{
  "meta": {
    "tool": "snapshot_json_plus",
    "version": "0.3.0",
    "root": "C:\\Users\\msk_7\\Documents\\Roblox\\hanahuda",
    "generated": "2025-10-08T07:15:06.469259+00:00",
    "maxLinesPerFile": 300,
    "scanBytes": 200000,
    "excludes": [
      ".git",
      ".vscode",
      "node_modules",
      "dist",
      "build",
      "__pycache__",
      ".DS_Store",
      ".idea",
      ".venv",
      "package-lock.json",
      "yarn.lock",
      "pnpm-lock.yaml",
      ".env",
      ".env.",
      ".pem",
      ".key",
      ".crt"
    ],
    "binaryExt": [
      "7z",
      "avi",
      "bmp",
      "bz2",
      "dll",
      "exe",
      "flac",
      "gif",
      "gz",
      "ico",
      "jar",
      "jpeg",
      "jpg",
      "mkv",
      "mov",
      "mp3",
      "mp4",
      "ogg",
      "pdb",
      "png",
      "rar",
      "rbxl",
      "rbxlx",
      "rbxm",
      "rbxmx",
      "svg",
      "wav",
      "webp",
      "xz",
      "zip"
    ],
    "counts": {
      "dirs": 33,
      "files": 182
    }
  },
  "tree": "hanahuda\n├── _unused\n│   └── src\n│       └── client\n│           └── _unused_dev_patch_diary_2025-09-14.md\n├── BGM\n│   ├── BGM.ogg\n│   ├── omise.ogg\n│   └── TOP.mp3\n├── huda\n│   ├── 0101.jpg\n│   ├── 0102.jpg\n│   ├── 0103.jpg\n│   ├── 0104.jpg\n│   ├── 0201.jpg\n│   ├── 0202.jpg\n│   ├── 0203.jpg\n│   ├── 0204.jpg\n│   ├── 0301.jpg\n│   ├── 0302.jpg\n│   ├── 0303.jpg\n│   ├── 0304.jpg\n│   ├── 0401.jpg\n│   ├── 0402.jpg\n│   ├── 0403.jpg\n│   ├── 0404.jpg\n│   ├── 0501.jpg\n│   ├── 0502.jpg\n│   ├── 0503.jpg\n│   ├── 0504.jpg\n│   ├── 0601.jpg\n│   ├── 0602.jpg\n│   ├── 0603.jpg\n│   ├── 0604.jpg\n│   ├── 0701.jpg\n│   ├── 0702.jpg\n│   ├── 0703.jpg\n│   ├── 0704.jpg\n│   ├── 0801.jpg\n│   ├── 0802.jpg\n│   ├── 0803.jpg\n│   ├── 0804.jpg\n│   ├── 0901.jpg\n│   ├── 0902.jpg\n│   ├── 0903.jpg\n│   ├── 0904.jpg\n│   ├── 1001.jpg\n│   ├── 1002.jpg\n│   ├── 1003.jpg\n│   ├── 1004.jpg\n│   ├── 1101.jpg\n│   ├── 1102.jpg\n│   ├── 1103.jpg\n│   ├── 1104.jpg\n│   ├── 1201.jpg\n│   ├── 1202.jpg\n│   ├── 1203.jpg\n│   └── 1204.jpg\n├── image\n│   ├── eto\n│   │   ├── eto001.jpg\n│   │   ├── eto002.jpg\n│   │   ├── eto003.jpg\n│   │   ├── eto004.jpg\n│   │   ├── eto005.jpg\n│   │   ├── eto006.jpg\n│   │   ├── eto007.jpg\n│   │   ├── eto008.jpg\n│   │   ├── eto009.jpg\n│   │   ├── eto010.jpg\n│   │   ├── eto011.jpg\n│   │   └── eto012.jpg\n│   ├── mainimage.png\n│   ├── mokume.png\n│   ├── mousen.png\n│   ├── samune.jpg\n│   ├── shop.png\n│   ├── tatami.jpg\n│   ├── top.jpg\n│   └── wasitu.png\n├── src\n│   ├── client\n│   │   └── ui\n│   │       ├── components\n│   │       │   ├── controllers\n│   │       │   │   ├── ClientSignals.lua\n│   │       │   │   ├── KitoPickWires.client.lua\n│   │       │   │   └── ShopWires.lua\n│   │       │   ├── renderers\n│   │       │   │   ├── FieldRenderer.lua\n│   │       │   │   ├── HandRenderer.lua\n│   │       │   │   ├── KitoPickRenderer.lua\n│   │       │   │   ├── ShopRenderer.lua\n│   │       │   │   └── TakenRenderer.lua\n│   │       │   ├── CardNode.lua\n│   │       │   ├── DevTools.lua\n│   │       │   ├── Overlay.lua\n│   │       │   ├── ResultModal.lua\n│   │       │   ├── TalismanBoard.lua\n│   │       │   ├── TutorialBanner.lua\n│   │       │   ├── UiKit.lua\n│   │       │   └── YakuPanel.lua\n│   │       ├── highlight\n│   │       │   └── MatchHighlighter.lua\n│   │       ├── lib\n│   │       │   ├── FormatUtil.lua\n│   │       │   ├── KitoAssets.lua\n│   │       │   └── UiUtil.lua\n│   │       ├── screens\n│   │       │   ├── HomeScreen.lua\n│   │       │   ├── KitoPickView.lua\n│   │       │   ├── PatchNotesModal.lua\n│   │       │   ├── RunScreen.lua\n│   │       │   ├── RunScreenRemotes.lua\n│   │       │   ├── RunScreenUI.lua\n│   │       │   ├── ShopView.lua\n│   │       │   └── ShrineScreen.lua\n│   │       ├── styles\n│   │       │   ├── KitoPickStyles.lua\n│   │       │   └── ShopStyles.lua\n│   │       ├── viewmodels\n│   │       │   └── KitoPickVM.lua\n│   │       ├── CameraController.client.lua\n│   │       ├── ClientMain.client.lua\n│   │       ├── DevLogViewer.client.lua\n│   │       └── ScreenRouter.lua\n│   ├── config\n│   │   ├── Balance.lua\n│   │   ├── DisplayMode.lua\n│   │   ├── FeatureFlags.lua\n│   │   ├── Locale.lua\n│   │   ├── PatchNotes.lua\n│   │   └── Theme.lua\n│   ├── remotes\n│   ├── server\n│   │   ├── ShopEffects\n│   │   │   ├── init.lua\n│   │   │   ├── Kito.lua\n│   │   │   ├── Omamori.lua\n│   │   │   ├── Sai.lua\n│   │   │   └── Spectral.lua\n│   │   ├── GameInit.server.lua\n│   │   ├── KitoPickCore.lua\n│   │   ├── KitoPickServer.server.lua\n│   │   ├── NavServer.lua\n│   │   ├── RemotesInit.server.lua\n│   │   ├── SaveService.lua\n│   │   ├── TalismanService.lua\n│   │   └── UiResync.server.lua\n│   └── shared\n│       ├── Deck\n│       │   ├── Effects\n│       │   │   ├── kito\n│       │   │   │   ├── Hitsuji_Prune.lua\n│       │   │   │   ├── I_Sakeify.lua\n│       │   │   │   ├── Inu_Chaff2.lua\n│       │   │   │   ├── Mi_Venom.lua\n│       │   │   │   ├── Tatsu_Copy.lua\n│       │   │   │   ├── Tori_Brighten.lua\n│       │   │   │   ├── Uma_Seedize.lua\n│       │   │   │   └── Usagi_Ribbonize.lua\n│       │   │   ├── omamori\n│       │   │   └── spectral\n│       │   ├── CardEngine.lua\n│       │   ├── DeckOps.lua\n│       │   ├── DeckRegistry.lua\n│       │   ├── DeckSchema.lua\n│       │   ├── DeckStore.lua\n│       │   ├── DeckViewAdapter.lua\n│       │   ├── EffectsRegisterAll.lua\n│       │   └── EffectsRegistry.lua\n│       ├── hooks\n│       ├── score\n│       │   ├── hooks\n│       │   │   ├── init.lua\n│       │   │   ├── omamori.lua\n│       │   │   └── talisman.lua\n│       │   ├── phases\n│       │   │   ├── finalize.lua\n│       │   │   ├── P0_normalize.lua\n│       │   │   ├── P1_count.lua\n│       │   │   ├── P2_roles.lua\n│       │   │   ├── P3_matsuri_kito.lua\n│       │   │   ├── P4_talisman.lua\n│       │   │   └── P5_omamori.lua\n│       │   ├── util\n│       │   │   ├── kind.lua\n│       │   │   └── tags.lua\n│       │   ├── constants.lua\n│       │   ├── ctx.lua\n│       │   └── index.lua\n│       ├── CardEngine.lua\n│       ├── CardImageMap.lua\n│       ├── DeckSampler.lua\n│       ├── LocaleUtil.lua\n│       ├── Logger.lua\n│       ├── Modifiers.lua\n│       ├── NavClient.lua\n│       ├── PickService.lua\n│       ├── PoolEditor.lua\n│       ├── RerollService.lua\n│       ├── RoundService.lua\n│       ├── RunDeckUtil.lua\n│       ├── ScoreService.lua\n│       ├── Scoring.lua\n│       ├── ShopDefs.lua\n│       ├── ShopFormat.lua\n│       ├── ShopService.lua\n│       ├── StateHub.lua\n│       ├── TalismanDefs.lua\n│       └── TalismanState.lua\n├── aftman.toml\n├── default.project.json\n├── PROJECT_SNAPSHOT.json\n├── README.md\n└── snapshot_json_plus.py",
  "dirs": [
    "_unused",
    "_unused/src",
    "_unused/src/client",
    "BGM",
    "huda",
    "image",
    "image/eto",
    "src",
    "src/client",
    "src/client/ui",
    "src/client/ui/components",
    "src/client/ui/components/controllers",
    "src/client/ui/components/renderers",
    "src/client/ui/highlight",
    "src/client/ui/lib",
    "src/client/ui/screens",
    "src/client/ui/styles",
    "src/client/ui/viewmodels",
    "src/config",
    "src/remotes",
    "src/server",
    "src/server/ShopEffects",
    "src/shared",
    "src/shared/Deck",
    "src/shared/Deck/Effects",
    "src/shared/Deck/Effects/kito",
    "src/shared/Deck/Effects/omamori",
    "src/shared/Deck/Effects/spectral",
    "src/shared/hooks",
    "src/shared/score",
    "src/shared/score/hooks",
    "src/shared/score/phases",
    "src/shared/score/util"
  ],
  "files": [
    {
      "path": "_unused/src/client/_unused_dev_patch_diary_2025-09-14.md",
      "ext": "md",
      "binary": false,
      "size": 8076,
      "mtime": "2025-09-20T16:21:24.810878+00:00",
      "head": [
        "",
        "## 注意（社内・開発向け）",
        "この文書には内部ファイル名や実装詳細が含まれます。外部共有前に公開用パッチノートへ要サニタイズ。",
        "",
        "---",
        "",
        "## 更新記録 / Change Log",
        "",
        "v0.9.6.3 — 2025-09-21",
        "",
        "護符のロード/配置まわりを修正：TalismanService を ServerScript → ModuleScript 化し、require(SSS:WaitForChild(\"TalismanService\")) が通る構成に統一。PlaceOnSlot はここだけが正本、ACK で unlocked/slots を都度返却 — (Refactored TalismanService to ModuleScript; single source of truth; reliable ACK payload).",
        "",
        "Shop→Client の護符同期：ShopService.open の ShopOpen ペイロードに state.run.talisman をそのまま同梱（補完なし）。クライアントは state.run.talisman を参照して自動配置/空スロ判定 — (Ship raw talisman board in ShopOpen; no shaping).",
        "",
        "自動配置のブロック原因を解消：unlocked=2 でも空スロが埋まって判定落ちするケースを、サーバ側の「スロ埋まり時 no-op→ACK 最新断面」で復帰できるよう整備 — (No-op overwrites now return fresh board snapshot).",
        "",
        "ログを強化：placed / rejected / noop / ensureFor を Logger.scope(\"TalismanService\") で要点出力。ショップ入店・購入・リロールにも talisman# を併記 — (Sharper logs around placement and shop lifecycle).",
        "",
        "言語コードの正規化：外部I/Fは ja/en に統一。jp を受け取った場合は警告ログのうえ ja へ正規化 — (Normalize jp → ja).",
        "",
        "左上情報パネルの英語対応（部分）：役名の整形を FormatUtil.rolesToLines で i18n 化（en/ja 字句を辞書化、未定義は英語フォールバック）。パネルのベース行は暫定で日本語固定のまま（TODO）— (Role labels localized; base state line remains JP for now).",
        "",
        "祭事を拡充：定義テーブルに以下を追加し、採点に反映",
        "",
        "新規：タネ祭 / 赤短祭 / 青短祭 / 猪鹿蝶祭 / 花見祭 / 月見祭 / 三光祭 / 四光祭 / 五光祭",
        "",
        "既存：カス祭 / 短冊祭",
        "",
        "役→祭事マッピングを刷新（雨四光は三光系に合流、四光/五光を個別に紐付け）— (Added full festival set; updated role↔festival maps).",
        "",
        "係数の扱いを明文化：現行 P3 は「倍率×」ではなく 加点+ として解釈（mon += lv * coeff[1], pts += lv * coeff[2]）。将来「本当の倍率」を導入する場合は P3 を別フェーズ/後段で乗算に — (Documented additive interpretation; prepared path for true multipliers).",
        "",
        "Shop 定義の拡張：ShopDefs.sai に祭事アイテム群を追加（価格・説明テキスト含む）。ShopEffects.Sai はレベルを +1 する汎用ロジックを維持し、数値効果はスコアリング側（P3）で集約 — (Sai effects remain level-only; scoring owns numbers).",
        "",
        "スペクタル維持：spectral_blackhole（全祭事+1）を現仕様に追随（レベル加算→P3で加点）— (Spectral stays compatible).",
        "",
        "影響範囲",
        "",
        "サーバ：ServerScriptService/TalismanService（ModuleScript化）、ShopService、ShopEffects/init.lua (+Sai)",
        "",
        "共有：SharedModules/score/constants.lua（祭事係数・対応表）、score/phases/P3_matsuri_kito.lua（加点適用）",
        "",
        "クライアント：StarterPlayerScripts/UI/lib/FormatUtil.lua（役名 i18n）",
        "",
        "### v0.9.5 — 2025-09-17",
        "- **Fix-All P0 完了**：P0-1〜P0-12 を一括修正 — (Completed all P0 blockers).",
        "- **ResultModal / Nav 統一**：UI は `Nav.next(\"home\"|\"next\"|\"save\")` のみ呼ぶ。内部は `DecideNext` に集約 — (Unified navigation on client; single remote).",
        "- **Router のちらつき解消**：同一画面の `show` は `Enabled/Visible` を変更せず、表示更新のみ実行 — (No disable/enable loop on same screen).",
        "- **Enabled/Visible の安全切替**：`ScreenGui.Enabled` / `GuiObject.Visible` を型で分岐 — (Safe toggling across types).",
        "- **ResultModal 文言の i18n**：`Locale.t` キー（`RESULT_FINAL_*`）で切替、英語フォールバック — (Final dialog localized).",
        "- **ShopOpen リスナーを1本化**：`ClientMain` に集約し、二重描画・二重遷移を排除 — (Consolidated ShopOpen handling).",
        "- **Home Start の同期待ち**：`HomeOpen` 着弾まで Start を無効化（「同期中…」表示）— (Gate Start until payload arrives).",
        "- **トーストのタイトル i18n**：`Locale.t(lang, \"TOAST_TITLE\")` — (Toast title localized).",
        "- **Run の負債返済**：no-op 削除、空役は `Locale.t(\"ROLES_NONE\")` に統一 — (Removed no-ops; empty roles string via Locale).",
        "- **言語コード統一**：外部 I/F は `ja/en`。`jp` 受信時は警告の上 `ja` に正規化 — (Normalize `jp` → `ja`).",
        "- **OSロケール検出の簡素化**：`game:GetService(\"Players\")` を素直に使用 — (Simpler, clear detection code).",
        "- **Run の目標スコア**：`StatePush` に `goal:number` を追加。Run は `st.goal` のみ参照（文字列パース撤廃）— (Robust goal display).",
        "- **ShopCells 二重クリック対策**：価格帯を `TextLabel` 化し `Active=false/Selectable=false`。`Activated` は本体のみ — (1 click = 1 send).",
        "- **その他**：Start/Continue の表示不具合を修正 — (Fixed Start/Continue visibility issue).",
        "",
        "### v0.9.4 — 2025-09-14",
        "- SHOP UI **4分割**：`ShopScreen` / `ShopCells` / `ShopRenderer` / `ShopWires` へ分離 — (SHOP UI split into four files).",
        "- **Theme 薄適用**：`Config/Theme.lua` の `COLORS`/`SIZES` を SHOP に反映 — (Applied Theme thinly to SHOP).",
        "- **i18n アダプタ**：SHOP 内はローカル鍵で暫定対応 → 後で `Config/Locale.lua` に移行予定 — (Local keys in SHOP, migrate later).",
        "- `PatchNotesModal.lua` を追加。`HomeScreen` はモーダル起動のみへ簡素化 — (Added PatchNotesModal; Home just opens it).",
        "- `Config/PatchNotes.lua` を**公開用**に再構成（ファイル名など内部情報を非表示に）— (Reworked for public notes).",
        "- **短冊定義の修正**：`0102/0202/0302/0402/0502/0602/0702/0902/1002/1103` の10枚に統一 — (Ribbon set fixed to 10 cards).",
        "- **Akatan/Aotan**（各 +5 文）を `Scoring.lua` に実装、`FormatUtil` に表示行を追加 — (Implemented yaku detection and display).",
        "- **超過文（Koi-koi 互換）**：カス/タネ/短冊で閾値超過毎に +1 文 — (Overflow-mon implemented).",
        "- **Kito: 寅（Tora）** 仕様を **pts+1/Lv** に確定（丑/酉は現行維持）— (Finalize Tora).",
        "- `BalanceDev.lua` 追加：理論上限/ノブ感度の試算ツール — (Added balance helper).",
        "",
        "### v0.9.3 — 2025-09-12",
        "- Home に**暫定パッチノート**追加（ボタン→モーダル原型）。",
        "- **採点全取りケース**検証：定義修正前 3268 → 修正後 **3306**。",
        "- `Locale.setGlobal` の反映範囲を拡張（Home→Run/Shop へ伝播）。",
        "- **クラシック“文のみ”モード**の下準備。",
        "",
        "### v0.9.2 — 2025-09-11",
        "- NEW/CONTINUE を **START GAME に統合**。旧 CONTINUE 枠は**パッチノート**へ。",
        "- **言語チップ（EN/JP）**追加：保存言語優先、なければ OS ロケール初期化。",
        "- `ShopDefs`：**spectral** カテゴリ追加、**黒天**（全祭事 +1）を実装。",
        "- `ShopEffects` 初期化ディスパッチに `kito_/sai_/spectral_` を追加。",
        "",
        "### v0.9.1 — 2025-09-10",
        "- 採点に**寅（取り札 pts+1/Lv 候補）**を試験導入 → 後日仕様確定。",
        "- `ShopDefs` に **Kito 基本3種（丑/寅/酉）**を追加。",
        "",
        "### v0.9.0 — 2025-09-06",
        "- **基礎採点**：役→文 / 札→点、総スコア = 文 × 点 を実装。",
        "- **祭事テーブル**と**役→祭事マッピング**を追加。",
        "- `CardEngine`：**48枚デッキ**定義と**スナップショット**機能。",
        "- `ShopEffects v1`：安全な **pcall require** と委譲ラッパー。",
        "",
        "---",
        "",
        "### 追記ルール（メモ）",
        "- 先頭が最新。新しい更新は上に追記。",
        "- 社外公開が必要になったら、公開用 `PatchNotes.lua` へ転記＆サニタイズ。"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [
          "TalismanService"
        ],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "aftman.toml",
      "ext": "toml",
      "binary": false,
      "size": 39,
      "mtime": "2025-08-24T17:26:29.688756+00:00",
      "head": [
        "[tools]",
        "rojo = \"rojo-rbx/rojo@7.4.0\""
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "BGM/BGM.ogg",
      "ext": "ogg",
      "binary": true,
      "size": 2693901,
      "mtime": "2025-09-17T05:55:06.526888+00:00"
    },
    {
      "path": "BGM/omise.ogg",
      "ext": "ogg",
      "binary": true,
      "size": 2548556,
      "mtime": "2025-09-17T05:55:35.565633+00:00"
    },
    {
      "path": "BGM/TOP.mp3",
      "ext": "mp3",
      "binary": true,
      "size": 2356304,
      "mtime": "2025-09-17T06:02:07.731774+00:00"
    },
    {
      "path": "default.project.json",
      "ext": "json",
      "binary": false,
      "size": 756,
      "mtime": "2025-09-03T05:34:24.475381+00:00",
      "head": [
        "{",
        "  \"name\": \"hanahuda\",",
        "  \"tree\": {",
        "    \"$className\": \"DataModel\",",
        "",
        "    \"ReplicatedStorage\": {",
        "      \"$className\": \"ReplicatedStorage\",",
        "",
        "      \"Config\": {",
        "        \"$className\": \"Folder\",",
        "        \"$path\": \"src/config\"",
        "      },",
        "",
        "      \"SharedModules\": {",
        "        \"$className\": \"Folder\",",
        "        \"$path\": \"src/shared\"",
        "      },",
        "",
        "      \"Remotes\": {",
        "        \"$className\": \"Folder\",",
        "        \"$path\": \"src/remotes\"",
        "      }",
        "    },",
        "",
        "    \"ServerScriptService\": {",
        "      \"$className\": \"ServerScriptService\",",
        "      \"$path\": \"src/server\"",
        "    },",
        "",
        "    \"StarterPlayer\": {",
        "      \"$className\": \"StarterPlayer\",",
        "      \"StarterPlayerScripts\": {",
        "        \"$className\": \"StarterPlayerScripts\",",
        "        \"$path\": \"src/client\"",
        "      }",
        "    }",
        "  }",
        "}"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "huda/0101.jpg",
      "ext": "jpg",
      "binary": true,
      "size": 438186,
      "mtime": "2025-09-01T13:35:09.831929+00:00"
    },
    {
      "path": "huda/0102.jpg",
      "ext": "jpg",
      "binary": true,
      "size": 462146,
      "mtime": "2025-09-01T13:42:10.553539+00:00"
    },
    {
      "path": "huda/0103.jpg",
      "ext": "jpg",
      "binary": true,
      "size": 379729,
      "mtime": "2025-09-01T13:42:18.481983+00:00"
    },
    {
      "path": "huda/0104.jpg",
      "ext": "jpg",
      "binary": true,
      "size": 356183,
      "mtime": "2025-09-01T13:42:28.883567+00:00"
    },
    {
      "path": "huda/0201.jpg",
      "ext": "jpg",
      "binary": true,
      "size": 690113,
      "mtime": "2025-09-02T06:38:41.731511+00:00"
    },
    {
      "path": "huda/0202.jpg",
      "ext": "jpg",
      "binary": true,
      "size": 599653,
      "mtime": "2025-09-02T06:38:52.570160+00:00"
    },
    {
      "path": "huda/0203.jpg",
      "ext": "jpg",
      "binary": true,
      "size": 490722,
      "mtime": "2025-09-02T06:38:55.789791+00:00"
    },
    {
      "path": "huda/0204.jpg",
      "ext": "jpg",
      "binary": true,
      "size": 553546,
      "mtime": "2025-09-02T06:38:59.303901+00:00"
    },
    {
      "path": "huda/0301.jpg",
      "ext": "jpg",
      "binary": true,
      "size": 594615,
      "mtime": "2025-09-02T06:40:29.981737+00:00"
    },
    {
      "path": "huda/0302.jpg",
      "ext": "jpg",
      "binary": true,
      "size": 669071,
      "mtime": "2025-09-02T06:40:36.144293+00:00"
    },
    {
      "path": "huda/0303.jpg",
      "ext": "jpg",
      "binary": true,
      "size": 616400,
      "mtime": "2025-09-02T06:40:39.738554+00:00"
    },
    {
      "path": "huda/0304.jpg",
      "ext": "jpg",
      "binary": true,
      "size": 605588,
      "mtime": "2025-09-02T06:40:43.669949+00:00"
    },
    {
      "path": "huda/0401.jpg",
      "ext": "jpg",
      "binary": true,
      "size": 594444,
      "mtime": "2025-09-02T06:41:19.612005+00:00"
    },
    {
      "path": "huda/0402.jpg",
      "ext": "jpg",
      "binary": true,
      "size": 513126,
      "mtime": "2025-09-02T06:41:24.709433+00:00"
    },
    {
      "path": "huda/0403.jpg",
      "ext": "jpg",
      "binary": true,
      "size": 451761,
      "mtime": "2025-09-02T06:41:27.527982+00:00"
    },
    {
      "path": "huda/0404.jpg",
      "ext": "jpg",
      "binary": true,
      "size": 458665,
      "mtime": "2025-09-02T06:41:30.997316+00:00"
    },
    {
      "path": "huda/0501.jpg",
      "ext": "jpg",
      "binary": true,
      "size": 546701,
      "mtime": "2025-09-02T06:42:24.014081+00:00"
    },
    {
      "path": "huda/0502.jpg",
      "ext": "jpg",
      "binary": true,
      "size": 474859,
      "mtime": "2025-09-02T06:42:27.246042+00:00"
    },
    {
      "path": "huda/0503.jpg",
      "ext": "jpg",
      "binary": true,
      "size": 409231,
      "mtime": "2025-09-02T06:42:29.802805+00:00"
    },
    {
      "path": "huda/0504.jpg",
      "ext": "jpg",
      "binary": true,
      "size": 390722,
      "mtime": "2025-09-02T06:42:45.065049+00:00"
    },
    {
      "path": "huda/0601.jpg",
      "ext": "jpg",
      "binary": true,
      "size": 668251,
      "mtime": "2025-09-02T06:43:38.038072+00:00"
    },
    {
      "path": "huda/0602.jpg",
      "ext": "jpg",
      "binary": true,
      "size": 468126,
      "mtime": "2025-09-02T06:43:41.245075+00:00"
    },
    {
      "path": "huda/0603.jpg",
      "ext": "jpg",
      "binary": true,
      "size": 508251,
      "mtime": "2025-09-02T06:43:44.477185+00:00"
    },
    {
      "path": "huda/0604.jpg",
      "ext": "jpg",
      "binary": true,
      "size": 543343,
      "mtime": "2025-09-02T06:43:47.434035+00:00"
    },
    {
      "path": "huda/0701.jpg",
      "ext": "jpg",
      "binary": true,
      "size": 729449,
      "mtime": "2025-09-02T07:37:03.373326+00:00"
    },
    {
      "path": "huda/0702.jpg",
      "ext": "jpg",
      "binary": true,
      "size": 599235,
      "mtime": "2025-09-02T07:37:47.647546+00:00"
    },
    {
      "path": "huda/0703.jpg",
      "ext": "jpg",
      "binary": true,
      "size": 576273,
      "mtime": "2025-09-02T07:37:10.523697+00:00"
    },
    {
      "path": "huda/0704.jpg",
      "ext": "jpg",
      "binary": true,
      "size": 543537,
      "mtime": "2025-09-02T07:37:13.619742+00:00"
    },
    {
      "path": "huda/0801.jpg",
      "ext": "jpg",
      "binary": true,
      "size": 174467,
      "mtime": "2025-09-02T07:38:37.446900+00:00"
    },
    {
      "path": "huda/0802.jpg",
      "ext": "jpg",
      "binary": true,
      "size": 487270,
      "mtime": "2025-09-02T07:38:41.172417+00:00"
    },
    {
      "path": "huda/0803.jpg",
      "ext": "jpg",
      "binary": true,
      "size": 287249,
      "mtime": "2025-09-02T07:38:44.437268+00:00"
    },
    {
      "path": "huda/0804.jpg",
      "ext": "jpg",
      "binary": true,
      "size": 293964,
      "mtime": "2025-09-02T07:38:47.250876+00:00"
    },
    {
      "path": "huda/0901.jpg",
      "ext": "jpg",
      "binary": true,
      "size": 644374,
      "mtime": "2025-09-02T07:39:35.578133+00:00"
    },
    {
      "path": "huda/0902.jpg",
      "ext": "jpg",
      "binary": true,
      "size": 496406,
      "mtime": "2025-09-02T07:39:39.587018+00:00"
    },
    {
      "path": "huda/0903.jpg",
      "ext": "jpg",
      "binary": true,
      "size": 549757,
      "mtime": "2025-09-02T07:39:43.499008+00:00"
    },
    {
      "path": "huda/0904.jpg",
      "ext": "jpg",
      "binary": true,
      "size": 541753,
      "mtime": "2025-09-02T07:39:46.890230+00:00"
    },
    {
      "path": "huda/1001.jpg",
      "ext": "jpg",
      "binary": true,
      "size": 718964,
      "mtime": "2025-09-02T07:40:41.915740+00:00"
    },
    {
      "path": "huda/1002.jpg",
      "ext": "jpg",
      "binary": true,
      "size": 565662,
      "mtime": "2025-09-02T07:40:45.547140+00:00"
    },
    {
      "path": "huda/1003.jpg",
      "ext": "jpg",
      "binary": true,
      "size": 587487,
      "mtime": "2025-09-02T07:40:49.039371+00:00"
    },
    {
      "path": "huda/1004.jpg",
      "ext": "jpg",
      "binary": true,
      "size": 607072,
      "mtime": "2025-09-02T07:40:52.377122+00:00"
    },
    {
      "path": "huda/1101.jpg",
      "ext": "jpg",
      "binary": true,
      "size": 639089,
      "mtime": "2025-09-02T07:41:45.186745+00:00"
    },
    {
      "path": "huda/1102.jpg",
      "ext": "jpg",
      "binary": true,
      "size": 535857,
      "mtime": "2025-09-02T07:41:48.854433+00:00"
    },
    {
      "path": "huda/1103.jpg",
      "ext": "jpg",
      "binary": true,
      "size": 423515,
      "mtime": "2025-09-02T07:41:52.995880+00:00"
    },
    {
      "path": "huda/1104.jpg",
      "ext": "jpg",
      "binary": true,
      "size": 533342,
      "mtime": "2025-09-02T07:41:56.095886+00:00"
    },
    {
      "path": "huda/1201.jpg",
      "ext": "jpg",
      "binary": true,
      "size": 613326,
      "mtime": "2025-09-02T07:42:45.930461+00:00"
    },
    {
      "path": "huda/1202.jpg",
      "ext": "jpg",
      "binary": true,
      "size": 383187,
      "mtime": "2025-09-02T10:22:18.203939+00:00"
    },
    {
      "path": "huda/1203.jpg",
      "ext": "jpg",
      "binary": true,
      "size": 374187,
      "mtime": "2025-09-02T10:22:21.496751+00:00"
    },
    {
      "path": "huda/1204.jpg",
      "ext": "jpg",
      "binary": true,
      "size": 412995,
      "mtime": "2025-09-02T10:22:25.202814+00:00"
    },
    {
      "path": "image/eto/eto001.jpg",
      "ext": "jpg",
      "binary": true,
      "size": 17302,
      "mtime": "2025-10-04T07:20:38.982834+00:00"
    },
    {
      "path": "image/eto/eto002.jpg",
      "ext": "jpg",
      "binary": true,
      "size": 16735,
      "mtime": "2025-10-04T07:22:32.220530+00:00"
    },
    {
      "path": "image/eto/eto003.jpg",
      "ext": "jpg",
      "binary": true,
      "size": 23751,
      "mtime": "2025-10-04T07:23:40.733685+00:00"
    },
    {
      "path": "image/eto/eto004.jpg",
      "ext": "jpg",
      "binary": true,
      "size": 13287,
      "mtime": "2025-10-04T07:24:55.059613+00:00"
    },
    {
      "path": "image/eto/eto005.jpg",
      "ext": "jpg",
      "binary": true,
      "size": 18992,
      "mtime": "2025-10-04T07:29:21.171993+00:00"
    },
    {
      "path": "image/eto/eto006.jpg",
      "ext": "jpg",
      "binary": true,
      "size": 15683,
      "mtime": "2025-10-04T07:30:23.989307+00:00"
    },
    {
      "path": "image/eto/eto007.jpg",
      "ext": "jpg",
      "binary": true,
      "size": 16321,
      "mtime": "2025-10-04T07:32:01.475163+00:00"
    },
    {
      "path": "image/eto/eto008.jpg",
      "ext": "jpg",
      "binary": true,
      "size": 15751,
      "mtime": "2025-10-04T07:33:19.733063+00:00"
    },
    {
      "path": "image/eto/eto009.jpg",
      "ext": "jpg",
      "binary": true,
      "size": 15623,
      "mtime": "2025-10-04T07:36:04.307840+00:00"
    },
    {
      "path": "image/eto/eto010.jpg",
      "ext": "jpg",
      "binary": true,
      "size": 20087,
      "mtime": "2025-10-04T07:35:32.743981+00:00"
    },
    {
      "path": "image/eto/eto011.jpg",
      "ext": "jpg",
      "binary": true,
      "size": 13339,
      "mtime": "2025-10-04T07:37:06.196221+00:00"
    },
    {
      "path": "image/eto/eto012.jpg",
      "ext": "jpg",
      "binary": true,
      "size": 15355,
      "mtime": "2025-10-04T07:38:32.563856+00:00"
    },
    {
      "path": "image/mainimage.png",
      "ext": "png",
      "binary": true,
      "size": 2635970,
      "mtime": "2025-09-04T18:54:02.232944+00:00"
    },
    {
      "path": "image/mokume.png",
      "ext": "png",
      "binary": true,
      "size": 283683,
      "mtime": "2025-09-06T00:14:08.257821+00:00"
    },
    {
      "path": "image/mousen.png",
      "ext": "png",
      "binary": true,
      "size": 1064156,
      "mtime": "2025-09-06T00:07:19.682113+00:00"
    },
    {
      "path": "image/samune.jpg",
      "ext": "jpg",
      "binary": true,
      "size": 1269022,
      "mtime": "2025-09-04T20:06:27.783409+00:00"
    },
    {
      "path": "image/shop.png",
      "ext": "png",
      "binary": true,
      "size": 732408,
      "mtime": "2025-09-14T01:46:32.196817+00:00"
    },
    {
      "path": "image/tatami.jpg",
      "ext": "jpg",
      "binary": true,
      "size": 887488,
      "mtime": "2025-09-03T21:24:10.208489+00:00"
    },
    {
      "path": "image/top.jpg",
      "ext": "jpg",
      "binary": true,
      "size": 1165288,
      "mtime": "2025-09-05T01:33:43.771499+00:00"
    },
    {
      "path": "image/wasitu.png",
      "ext": "png",
      "binary": true,
      "size": 1267489,
      "mtime": "2025-09-05T23:59:09.569941+00:00"
    },
    {
      "path": "PROJECT_SNAPSHOT.json",
      "ext": "json",
      "binary": false,
      "size": 1026471,
      "mtime": "2025-10-07T20:31:44.138896+00:00",
      "head": [
        "{",
        "  \"meta\": {",
        "    \"tool\": \"snapshot_json_plus\",",
        "    \"version\": \"0.3.0\",",
        "    \"root\": \"C:\\\\Users\\\\msk_7\\\\Documents\\\\Roblox\\\\hanahuda\",",
        "    \"generated\": \"2025-10-07T20:31:43.292621+00:00\",",
        "    \"maxLinesPerFile\": 300,",
        "    \"scanBytes\": 200000,",
        "    \"excludes\": [",
        "      \".git\",",
        "      \".vscode\",",
        "      \"node_modules\",",
        "      \"dist\",",
        "      \"build\",",
        "      \"__pycache__\",",
        "      \".DS_Store\",",
        "      \".idea\",",
        "      \".venv\",",
        "      \"package-lock.json\",",
        "      \"yarn.lock\",",
        "      \"pnpm-lock.yaml\",",
        "      \".env\",",
        "      \".env.\",",
        "      \".pem\",",
        "      \".key\",",
        "      \".crt\"",
        "    ],",
        "    \"binaryExt\": [",
        "      \"7z\",",
        "      \"avi\",",
        "      \"bmp\",",
        "      \"bz2\",",
        "      \"dll\",",
        "      \"exe\",",
        "      \"flac\",",
        "      \"gif\",",
        "      \"gz\",",
        "      \"ico\",",
        "      \"jar\",",
        "      \"jpeg\",",
        "      \"jpg\",",
        "      \"mkv\",",
        "      \"mov\",",
        "      \"mp3\",",
        "      \"mp4\",",
        "      \"ogg\",",
        "      \"pdb\",",
        "      \"png\",",
        "      \"rar\",",
        "      \"rbxl\",",
        "      \"rbxlx\",",
        "      \"rbxm\",",
        "      \"rbxmx\",",
        "      \"svg\",",
        "      \"wav\",",
        "      \"webp\",",
        "      \"xz\",",
        "      \"zip\"",
        "    ],",
        "    \"counts\": {",
        "      \"dirs\": 33,",
        "      \"files\": 182",
        "    }",
        "  },",
        "  \"tree\": \"hanahuda\\n├── _unused\\n│   └── src\\n│       └── client\\n│           └── _unused_dev_patch_diary_2025-09-14.md\\n├── BGM\\n│   ├── BGM.ogg\\n│   ├── omise.ogg\\n│   └── TOP.mp3\\n├── huda\\n│   ├── 0101.jpg\\n│   ├── 0102.jpg\\n│   ├── 0103.jpg\\n│   ├── 0104.jpg\\n│   ├── 0201.jpg\\n│   ├── 0202.jpg\\n│   ├── 0203.jpg\\n│   ├── 0204.jpg\\n│   ├── 0301.jpg\\n│   ├── 0302.jpg\\n│   ├── 0303.jpg\\n│   ├── 0304.jpg\\n│   ├── 0401.jpg\\n│   ├── 0402.jpg\\n│   ├── 0403.jpg\\n│   ├── 0404.jpg\\n│   ├── 0501.jpg\\n│   ├── 0502.jpg\\n│   ├── 0503.jpg\\n│   ├── 0504.jpg\\n│   ├── 0601.jpg\\n│   ├── 0602.jpg\\n│   ├── 0603.jpg\\n│   ├── 0604.jpg\\n│   ├── 0701.jpg\\n│   ├── 0702.jpg\\n│   ├── 0703.jpg\\n│   ├── 0704.jpg\\n│   ├── 0801.jpg\\n│   ├── 0802.jpg\\n│   ├── 0803.jpg\\n│   ├── 0804.jpg\\n│   ├── 0901.jpg\\n│   ├── 0902.jpg\\n│   ├── 0903.jpg\\n│   ├── 0904.jpg\\n│   ├── 1001.jpg\\n│   ├── 1002.jpg\\n│   ├── 1003.jpg\\n│   ├── 1004.jpg\\n│   ├── 1101.jpg\\n│   ├── 1102.jpg\\n│   ├── 1103.jpg\\n│   ├── 1104.jpg\\n│   ├── 1201.jpg\\n│   ├── 1202.jpg\\n│   ├── 1203.jpg\\n│   └── 1204.jpg\\n├── image\\n│   ├── eto\\n│   │   ├── eto001.jpg\\n│   │   ├── eto002.jpg\\n│   │   ├── eto003.jpg\\n│   │   ├── eto004.jpg\\n│   │   ├── eto005.jpg\\n│   │   ├── eto006.jpg\\n│   │   ├── eto007.jpg\\n│   │   ├── eto008.jpg\\n│   │   ├── eto009.jpg\\n│   │   ├── eto010.jpg\\n│   │   ├── eto011.jpg\\n│   │   └── eto012.jpg\\n│   ├── mainimage.png\\n│   ├── mokume.png\\n│   ├── mousen.png\\n│   ├── samune.jpg\\n│   ├── shop.png\\n│   ├── tatami.jpg\\n│   ├── top.jpg\\n│   └── wasitu.png\\n├── src\\n│   ├── client\\n│   │   └── ui\\n│   │       ├── components\\n│   │       │   ├── controllers\\n│   │       │   │   ├── ClientSignals.lua\\n│   │       │   │   ├── KitoPickWires.client.lua\\n│   │       │   │   └── ShopWires.lua\\n│   │       │   ├── renderers\\n│   │       │   │   ├── FieldRenderer.lua\\n│   │       │   │   ├── HandRenderer.lua\\n│   │       │   │   ├── KitoPickRenderer.lua\\n│   │       │   │   ├── ShopRenderer.lua\\n│   │       │   │   └── TakenRenderer.lua\\n│   │       │   ├── CardNode.lua\\n│   │       │   ├── DevTools.lua\\n│   │       │   ├── Overlay.lua\\n│   │       │   ├── ResultModal.lua\\n│   │       │   ├── TalismanBoard.lua\\n│   │       │   ├── TutorialBanner.lua\\n│   │       │   ├── UiKit.lua\\n│   │       │   └── YakuPanel.lua\\n│   │       ├── highlight\\n│   │       │   └── MatchHighlighter.lua\\n│   │       ├── lib\\n│   │       │   ├── FormatUtil.lua\\n│   │       │   ├── KitoAssets.lua\\n│   │       │   └── UiUtil.lua\\n│   │       ├── screens\\n│   │       │   ├── HomeScreen.lua\\n│   │       │   ├── KitoPickView.lua\\n│   │       │   ├── PatchNotesModal.lua\\n│   │       │   ├── RunScreen.lua\\n│   │       │   ├── RunScreenRemotes.lua\\n│   │       │   ├── RunScreenUI.lua\\n│   │       │   ├── ShopView.lua\\n│   │       │   └── ShrineScreen.lua\\n│   │       ├── styles\\n│   │       │   ├── KitoPickStyles.lua\\n│   │       │   └── ShopStyles.lua\\n│   │       ├── viewmodels\\n│   │       │   └── KitoPickVM.lua\\n│   │       ├── CameraController.client.lua\\n│   │       ├── ClientMain.client.lua\\n│   │       ├── DevLogViewer.client.lua\\n│   │       └── ScreenRouter.lua\\n│   ├── config\\n│   │   ├── Balance.lua\\n│   │   ├── DisplayMode.lua\\n│   │   ├── FeatureFlags.lua\\n│   │   ├── Locale.lua\\n│   │   ├── PatchNotes.lua\\n│   │   └── Theme.lua\\n│   ├── remotes\\n│   ├── server\\n│   │   ├── ShopEffects\\n│   │   │   ├── init.lua\\n│   │   │   ├── Kito.lua\\n│   │   │   ├── Omamori.lua\\n│   │   │   ├── Sai.lua\\n│   │   │   └── Spectral.lua\\n│   │   ├── GameInit.server.lua\\n│   │   ├── KitoPickCore.lua\\n│   │   ├── KitoPickServer.server.lua\\n│   │   ├── NavServer.lua\\n│   │   ├── RemotesInit.server.lua\\n│   │   ├── SaveService.lua\\n│   │   ├── TalismanService.lua\\n│   │   └── UiResync.server.lua\\n│   └── shared\\n│       ├── Deck\\n│       │   ├── Effects\\n│       │   │   ├── kito\\n│       │   │   │   ├── Hitsuji_Prune.lua\\n│       │   │   │   ├── I_Sakeify.lua\\n│       │   │   │   ├── Inu_Chaff2.lua\\n│       │   │   │   ├── Mi_Venom.lua\\n│       │   │   │   ├── Tatsu_Copy.lua\\n│       │   │   │   ├── Tori_Brighten.lua\\n│       │   │   │   ├── Uma_Seedize.lua\\n│       │   │   │   └── Usagi_Ribbonize.lua\\n│       │   │   ├── omamori\\n│       │   │   └── spectral\\n│       │   ├── CardEngine.lua\\n│       │   ├── DeckOps.lua\\n│       │   ├── DeckRegistry.lua\\n│       │   ├── DeckSchema.lua\\n│       │   ├── DeckStore.lua\\n│       │   ├── DeckViewAdapter.lua\\n│       │   ├── EffectsRegisterAll.lua\\n│       │   └── EffectsRegistry.lua\\n│       ├── hooks\\n│       ├── score\\n│       │   ├── hooks\\n│       │   │   ├── init.lua\\n│       │   │   ├── omamori.lua\\n│       │   │   └── talisman.lua\\n│       │   ├── phases\\n│       │   │   ├── finalize.lua\\n│       │   │   ├── P0_normalize.lua\\n│       │   │   ├── P1_count.lua\\n│       │   │   ├── P2_roles.lua\\n│       │   │   ├── P3_matsuri_kito.lua\\n│       │   │   ├── P4_talisman.lua\\n│       │   │   └── P5_omamori.lua\\n│       │   ├── util\\n│       │   │   ├── kind.lua\\n│       │   │   └── tags.lua\\n│       │   ├── constants.lua\\n│       │   ├── ctx.lua\\n│       │   └── index.lua\\n│       ├── CardEngine.lua\\n│       ├── CardImageMap.lua\\n│       ├── DeckSampler.lua\\n│       ├── LocaleUtil.lua\\n│       ├── Logger.lua\\n│       ├── Modifiers.lua\\n│       ├── NavClient.lua\\n│       ├── PickService.lua\\n│       ├── PoolEditor.lua\\n│       ├── RerollService.lua\\n│       ├── RoundService.lua\\n│       ├── RunDeckUtil.lua\\n│       ├── ScoreService.lua\\n│       ├── Scoring.lua\\n│       ├── ShopDefs.lua\\n│       ├── ShopFormat.lua\\n│       ├── ShopService.lua\\n│       ├── StateHub.lua\\n│       ├── TalismanDefs.lua\\n│       └── TalismanState.lua\\n├── aftman.toml\\n├── default.project.json\\n├── PROJECT_SNAPSHOT.json\\n├── README.md\\n└── snapshot_json_plus.py\",",
        "  \"dirs\": [",
        "    \"_unused\",",
        "    \"_unused/src\",",
        "    \"_unused/src/client\",",
        "    \"BGM\",",
        "    \"huda\",",
        "    \"image\",",
        "    \"image/eto\",",
        "    \"src\",",
        "    \"src/client\",",
        "    \"src/client/ui\",",
        "    \"src/client/ui/components\",",
        "    \"src/client/ui/components/controllers\",",
        "    \"src/client/ui/components/renderers\",",
        "    \"src/client/ui/highlight\",",
        "    \"src/client/ui/lib\",",
        "    \"src/client/ui/screens\",",
        "    \"src/client/ui/styles\",",
        "    \"src/client/ui/viewmodels\",",
        "    \"src/config\",",
        "    \"src/remotes\",",
        "    \"src/server\",",
        "    \"src/server/ShopEffects\",",
        "    \"src/shared\",",
        "    \"src/shared/Deck\",",
        "    \"src/shared/Deck/Effects\",",
        "    \"src/shared/Deck/Effects/kito\",",
        "    \"src/shared/Deck/Effects/omamori\",",
        "    \"src/shared/Deck/Effects/spectral\",",
        "    \"src/shared/hooks\",",
        "    \"src/shared/score\",",
        "    \"src/shared/score/hooks\",",
        "    \"src/shared/score/phases\",",
        "    \"src/shared/score/util\"",
        "  ],",
        "  \"files\": [",
        "    {",
        "      \"path\": \"_unused/src/client/_unused_dev_patch_diary_2025-09-14.md\",",
        "      \"ext\": \"md\",",
        "      \"binary\": false,",
        "      \"size\": 8076,",
        "      \"mtime\": \"2025-09-20T16:21:24.810878+00:00\",",
        "      \"head\": [",
        "        \"\",",
        "        \"## 注意（社内・開発向け）\",",
        "        \"この文書には内部ファイル名や実装詳細が含まれます。外部共有前に公開用パッチノートへ要サニタイズ。\",",
        "        \"\",",
        "        \"---\",",
        "        \"\",",
        "        \"## 更新記録 / Change Log\",",
        "        \"\",",
        "        \"v0.9.6.3 — 2025-09-21\",",
        "        \"\",",
        "        \"護符のロード/配置まわりを修正：TalismanService を ServerScript → ModuleScript 化し、require(SSS:WaitForChild(\\\"TalismanService\\\")) が通る構成に統一。PlaceOnSlot はここだけが正本、ACK で unlocked/slots を都度返却 — (Refactored TalismanService to ModuleScript; single source of truth; reliable ACK payload).\",",
        "        \"\",",
        "        \"Shop→Client の護符同期：ShopService.open の ShopOpen ペイロードに state.run.talisman をそのまま同梱（補完なし）。クライアントは state.run.talisman を参照して自動配置/空スロ判定 — (Ship raw talisman board in ShopOpen; no shaping).\",",
        "        \"\",",
        "        \"自動配置のブロック原因を解消：unlocked=2 でも空スロが埋まって判定落ちするケースを、サーバ側の「スロ埋まり時 no-op→ACK 最新断面」で復帰できるよう整備 — (No-op overwrites now return fresh board snapshot).\",",
        "        \"\",",
        "        \"ログを強化：placed / rejected / noop / ensureFor を Logger.scope(\\\"TalismanService\\\") で要点出力。ショップ入店・購入・リロールにも talisman# を併記 — (Sharper logs around placement and shop lifecycle).\",",
        "        \"\",",
        "        \"言語コードの正規化：外部I/Fは ja/en に統一。jp を受け取った場合は警告ログのうえ ja へ正規化 — (Normalize jp → ja).\",",
        "        \"\",",
        "        \"左上情報パネルの英語対応（部分）：役名の整形を FormatUtil.rolesToLines で i18n 化（en/ja 字句を辞書化、未定義は英語フォールバック）。パネルのベース行は暫定で日本語固定のまま（TODO）— (Role labels localized; base state line remains JP for now).\",",
        "        \"\",",
        "        \"祭事を拡充：定義テーブルに以下を追加し、採点に反映\",",
        "        \"\",",
        "        \"新規：タネ祭 / 赤短祭 / 青短祭 / 猪鹿蝶祭 / 花見祭 / 月見祭 / 三光祭 / 四光祭 / 五光祭\",",
        "        \"\",",
        "        \"既存：カス祭 / 短冊祭\",",
        "        \"\",",
        "        \"役→祭事マッピングを刷新（雨四光は三光系に合流、四光/五光を個別に紐付け）— (Added full festival set; updated role↔festival maps).\",",
        "        \"\",",
        "        \"係数の扱いを明文化：現行 P3 は「倍率×」ではなく 加点+ として解釈（mon += lv * coeff[1], pts += lv * coeff[2]）。将来「本当の倍率」を導入する場合は P3 を別フェーズ/後段で乗算に — (Documented additive interpretation; prepared path for true multipliers).\",",
        "        \"\",",
        "        \"Shop 定義の拡張：ShopDefs.sai に祭事アイテム群を追加（価格・説明テキスト含む）。ShopEffects.Sai はレベルを +1 する汎用ロジックを維持し、数値効果はスコアリング側（P3）で集約 — (Sai effects remain level-only; scoring owns numbers).\",",
        "        \"\",",
        "        \"スペクタル維持：spectral_blackhole（全祭事+1）を現仕様に追随（レベル加算→P3で加点）— (Spectral stays compatible).\",",
        "        \"\",",
        "        \"影響範囲\",",
        "        \"\",",
        "        \"サーバ：ServerScriptService/TalismanService（ModuleScript化）、ShopService、ShopEffects/init.lua (+Sai)\",",
        "        \"\",",
        "        \"共有：SharedModules/score/constants.lua（祭事係数・対応表）、score/phases/P3_matsuri_kito.lua（加点適用）\",",
        "        \"\",",
        "        \"クライアント：StarterPlayerScripts/UI/lib/FormatUtil.lua（役名 i18n）\",",
        "        \"\",",
        "        \"### v0.9.5 — 2025-09-17\",",
        "        \"- **Fix-All P0 完了**：P0-1〜P0-12 を一括修正 — (Completed all P0 blockers).\",",
        "        \"- **ResultModal / Nav 統一**：UI は `Nav.next(\\\"home\\\"|\\\"next\\\"|\\\"save\\\")` のみ呼ぶ。内部は `DecideNext` に集約 — (Unified navigation on client; single remote).\",",
        "        \"- **Router のちらつき解消**：同一画面の `show` は `Enabled/Visible` を変更せず、表示更新のみ実行 — (No disable/enable loop on same screen).\",",
        "        \"- **Enabled/Visible の安全切替**：`ScreenGui.Enabled` / `GuiObject.Visible` を型で分岐 — (Safe toggling across types).\",",
        "        \"- **ResultModal 文言の i18n**：`Locale.t` キー（`RESULT_FINAL_*`）で切替、英語フォールバック — (Final dialog localized).\",",
        "        \"- **ShopOpen リスナーを1本化**：`ClientMain` に集約し、二重描画・二重遷移を排除 — (Consolidated ShopOpen handling).\",",
        "        \"- **Home Start の同期待ち**：`HomeOpen` 着弾まで Start を無効化（「同期中…」表示）— (Gate Start until payload arrives).\",",
        "        \"- **トーストのタイトル i18n**：`Locale.t(lang, \\\"TOAST_TITLE\\\")` — (Toast title localized).\",",
        "        \"- **Run の負債返済**：no-op 削除、空役は `Locale.t(\\\"ROLES_NONE\\\")` に統一 — (Removed no-ops; empty roles string via Locale).\",",
        "        \"- **言語コード統一**：外部 I/F は `ja/en`。`jp` 受信時は警告の上 `ja` に正規化 — (Normalize `jp` → `ja`).\",",
        "        \"- **OSロケール検出の簡素化**：`game:GetService(\\\"Players\\\")` を素直に使用 — (Simpler, clear detection code).\",",
        "        \"- **Run の目標スコア**：`StatePush` に `goal:number` を追加。Run は `st.goal` のみ参照（文字列パース撤廃）— (Robust goal display).\",",
        "        \"- **ShopCells 二重クリック対策**：価格帯を `TextLabel` 化し `Active=false/Selectable=false`。`Activated` は本体のみ — (1 click = 1 send).\",",
        "        \"- **その他**：Start/Continue の表示不具合を修正 — (Fixed Start/Continue visibility issue).\",",
        "        \"\",",
        "        \"### v0.9.4 — 2025-09-14\",",
        "        \"- SHOP UI **4分割**：`ShopScreen` / `ShopCells` / `ShopRenderer` / `ShopWires` へ分離 — (SHOP UI split into four files).\",",
        "        \"- **Theme 薄適用**：`Config/Theme.lua` の `COLORS`/`SIZES` を SHOP に反映 — (Applied Theme thinly to SHOP).\",",
        "        \"- **i18n アダプタ**：SHOP 内はローカル鍵で暫定対応 → 後で `Config/Locale.lua` に移行予定 — (Local keys in SHOP, migrate later).\",",
        "        \"- `PatchNotesModal.lua` を追加。`HomeScreen` はモーダル起動のみへ簡素化 — (Added PatchNotesModal; Home just opens it).\",",
        "        \"- `Config/PatchNotes.lua` を**公開用**に再構成（ファイル名など内部情報を非表示に）— (Reworked for public notes).\",",
        "        \"- **短冊定義の修正**：`0102/0202/0302/0402/0502/0602/0702/0902/1002/1103` の10枚に統一 — (Ribbon set fixed to 10 cards).\",",
        "        \"- **Akatan/Aotan**（各 +5 文）を `Scoring.lua` に実装、`FormatUtil` に表示行を追加 — (Implemented yaku detection and display).\",",
        "        \"- **超過文（Koi-koi 互換）**：カス/タネ/短冊で閾値超過毎に +1 文 — (Overflow-mon implemented).\",",
        "        \"- **Kito: 寅（Tora）** 仕様を **pts+1/Lv** に確定（丑/酉は現行維持）— (Finalize Tora).\",",
        "        \"- `BalanceDev.lua` 追加：理論上限/ノブ感度の試算ツール — (Added balance helper).\",",
        "        \"\",",
        "        \"### v0.9.3 — 2025-09-12\",",
        "        \"- Home に**暫定パッチノート**追加（ボタン→モーダル原型）。\",",
        "        \"- **採点全取りケース**検証：定義修正前 3268 → 修正後 **3306**。\",",
        "        \"- `Locale.setGlobal` の反映範囲を拡張（Home→Run/Shop へ伝播）。\",",
        "        \"- **クラシック“文のみ”モード**の下準備。\",",
        "        \"\",",
        "        \"### v0.9.2 — 2025-09-11\",",
        "        \"- NEW/CONTINUE を **START GAME に統合**。旧 CONTINUE 枠は**パッチノート**へ。\",",
        "        \"- **言語チップ（EN/JP）**追加：保存言語優先、なければ OS ロケール初期化。\",",
        "        \"- `ShopDefs`：**spectral** カテゴリ追加、**黒天**（全祭事 +1）を実装。\",",
        "        \"- `ShopEffects` 初期化ディスパッチに `kito_/sai_/spectral_` を追加。\",",
        "        \"\",",
        "        \"### v0.9.1 — 2025-09-10\",",
        "        \"- 採点に**寅（取り札 pts+1/Lv 候補）**を試験導入 → 後日仕様確定。\",",
        "        \"- `ShopDefs` に **Kito 基本3種（丑/寅/酉）**を追加。\",",
        "        \"\",",
        "        \"### v0.9.0 — 2025-09-06\",",
        "        \"- **基礎採点**：役→文 / 札→点、総スコア = 文 × 点 を実装。\",",
        "        \"- **祭事テーブル**と**役→祭事マッピング**を追加。\",",
        "        \"- `CardEngine`：**48枚デッキ**定義と**スナップショット**機能。\",",
        "        \"- `ShopEffects v1`：安全な **pcall require** と委譲ラッパー。\",",
        "        \"\",",
        "        \"---\",",
        "        \"\",",
        "        \"### 追記ルール（メモ）\",",
        "        \"- 先頭が最新。新しい更新は上に追記。\",",
        "        \"- 社外公開が必要になったら、公開用 `PatchNotes.lua` へ転記＆サニタイズ。\"",
        "      ],",
        "      \"truncated\": false,",
        "      \"analysis\": {",
        "        \"waitForChild\": [",
        "          \"TalismanService\"",
        "        ],",
        "        \"routerScreens\": [],",
        "        \"fireServerArgs\": [],",
        "        \"udim\": {",
        "          \"fromScale\": 0,",
        "          \"fromOffset\": 0,",
        "          \"new\": 0",
        "        },",
        "        \"locale\": {",
        "          \"jp_literals\": 0,",
        "          \"ja_literals\": 0",
        "        },",
        "        \"kitoMention\": false,",
        "        \"onClientEventCount\": 0",
        "      }",
        "    },",
        "    {",
        "      \"path\": \"aftman.toml\",",
        "      \"ext\": \"toml\",",
        "      \"binary\": false,",
        "      \"size\": 39,",
        "      \"mtime\": \"2025-08-24T17:26:29.688756+00:00\",",
        "      \"head\": [",
        "        \"[tools]\",",
        "        \"rojo = \\\"rojo-rbx/rojo@7.4.0\\\"\"",
        "      ],",
        "      \"truncated\": false,",
        "      \"analysis\": {",
        "        \"waitForChild\": [],",
        "        \"routerScreens\": [],",
        "        \"fireServerArgs\": [],",
        "        \"udim\": {",
        "          \"fromScale\": 0,",
        "          \"fromOffset\": 0,",
        "          \"new\": 0",
        "        },",
        "        \"locale\": {",
        "          \"jp_literals\": 0,",
        "          \"ja_literals\": 0",
        "        },",
        "        \"kitoMention\": false,",
        "        \"onClientEventCount\": 0",
        "      }",
        "    },",
        "    {",
        "      \"path\": \"BGM/BGM.ogg\",",
        "      \"ext\": \"ogg\",",
        "      \"binary\": true,",
        "      \"size\": 2693901,",
        "      \"mtime\": \"2025-09-17T05:55:06.526888+00:00\"",
        "    },",
        "    {",
        "      \"path\": \"BGM/omise.ogg\",",
        "      \"ext\": \"ogg\",",
        "      \"binary\": true,",
        "      \"size\": 2548556,",
        "      \"mtime\": \"2025-09-17T05:55:35.565633+00:00\"",
        "    },",
        "    {",
        "      \"path\": \"BGM/TOP.mp3\",",
        "      \"ext\": \"mp3\",",
        "      \"binary\": true,",
        "      \"size\": 2356304,",
        "      \"mtime\": \"2025-09-17T06:02:07.731774+00:00\"",
        "    },",
        "    {",
        "      \"path\": \"default.project.json\",",
        "      \"ext\": \"json\",",
        "      \"binary\": false,",
        "      \"size\": 756,",
        "      \"mtime\": \"2025-09-03T05:34:24.475381+00:00\",",
        "      \"head\": [",
        "        \"{\",",
        "        \"  \\\"name\\\": \\\"hanahuda\\\",\",",
        "        \"  \\\"tree\\\": {\",",
        "        \"    \\\"$className\\\": \\\"DataModel\\\",\",",
        "        \"\",",
        "        \"    \\\"ReplicatedStorage\\\": {\",",
        "        \"      \\\"$className\\\": \\\"ReplicatedStorage\\\",\",",
        "        \"\",",
        "        \"      \\\"Config\\\": {\",",
        "        \"        \\\"$className\\\": \\\"Folder\\\",\",",
        "        \"        \\\"$path\\\": \\\"src/config\\\"\",",
        "        \"      },\",",
        "        \"\",",
        "        \"      \\\"SharedModules\\\": {\",",
        "        \"        \\\"$className\\\": \\\"Folder\\\",\",",
        "        \"        \\\"$path\\\": \\\"src/shared\\\"\","
      ],
      "truncated": true,
      "analysis": {
        "waitForChild": [],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 16,
          "fromOffset": 13,
          "new": 16
        },
        "locale": {
          "jp_literals": 2,
          "ja_literals": 1
        },
        "kitoMention": true,
        "onClientEventCount": 13
      }
    },
    {
      "path": "README.md",
      "ext": "md",
      "binary": false,
      "size": 363,
      "mtime": "2025-08-24T17:28:54.543877+00:00",
      "head": [
        "# hanahuda",
        "Generated by [Rojo](https://github.com/rojo-rbx/rojo) 7.4.0.",
        "",
        "## Getting Started",
        "To build the place from scratch, use:",
        "",
        "```bash",
        "rojo build -o \"hanahuda.rbxlx\"",
        "```",
        "",
        "Next, open `hanahuda.rbxlx` in Roblox Studio and start the Rojo server:",
        "",
        "```bash",
        "rojo serve",
        "```",
        "",
        "For more help, check out [the Rojo documentation](https://rojo.space/docs)."
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "snapshot_json_plus.py",
      "ext": "py",
      "binary": false,
      "size": 8656,
      "mtime": "2025-10-05T21:22:46.877135+00:00",
      "head": [
        "",
        "from __future__ import annotations",
        "import sys, os, json, re",
        "from pathlib import Path",
        "from datetime import datetime, timezone",
        "",
        "# ===== Settings =====",
        "MAX_LINES  = int(os.environ.get(\"SNAPSHOT_MAX_LINES\", \"300\"))",
        "OUT_NAME   = os.environ.get(\"SNAPSHOT_OUT\", \"PROJECT_SNAPSHOT.json\")",
        "SCAN_BYTES = int(os.environ.get(\"SNAPSHOT_SCAN_BYTES\", \"200000\"))  # per file scan budget (bytes)",
        "",
        "EXCLUDES = [",
        "    \".git\", \".vscode\", \"node_modules\", \"dist\", \"build\", \"__pycache__\",",
        "    \".DS_Store\", \".idea\", \".venv\",",
        "    \"package-lock.json\", \"yarn.lock\", \"pnpm-lock.yaml\",",
        "    \".env\", \".env.\", \".pem\", \".key\", \".crt\",",
        "]",
        "",
        "BINARY_EXT = {",
        "    \"png\",\"jpg\",\"jpeg\",\"gif\",\"webp\",\"bmp\",\"ico\",\"svg\",",
        "    \"mp3\",\"wav\",\"ogg\",\"flac\",\"mp4\",\"mov\",\"avi\",\"mkv\",",
        "    \"zip\",\"7z\",\"rar\",\"gz\",\"bz2\",\"xz\",\"jar\",",
        "    \"rbxl\",\"rbxlx\",\"rbxm\",\"rbxmx\",",
        "    \"dll\",\"exe\",\"pdb\",",
        "}",
        "",
        "FENCE_BY_EXT = {",
        "    \"lua\":\"lua\",\"rbxl\":\"\", \"rbxlx\":\"\", \"rbxm\":\"\", \"rbxmx\":\"\",",
        "    \"js\":\"js\",\"mjs\":\"js\",\"cjs\":\"js\",",
        "    \"ts\":\"ts\",\"tsx\":\"tsx\",\"jsx\":\"jsx\",",
        "    \"json\":\"json\",\"yaml\":\"yaml\",\"yml\":\"yaml\",\"toml\":\"toml\",",
        "    \"py\":\"py\",\"rb\":\"rb\",\"go\":\"go\",\"rs\":\"rust\",\"java\":\"java\",\"kt\":\"kt\",",
        "    \"cs\":\"cs\",\"cpp\":\"cpp\",\"c\":\"c\",\"h\":\"c\",\"hpp\":\"cpp\",",
        "    \"php\":\"php\",\"swift\":\"swift\",\"sql\":\"sql\",",
        "    \"sh\":\"sh\",\"bash\":\"bash\",\"zsh\":\"zsh\",",
        "    \"md\":\"md\",\"html\":\"html\",\"css\":\"css\",",
        "    \"txt\":\"\"",
        "}",
        "",
        "ROOT = Path(__file__).resolve().parent",
        "",
        "def relpath(p: Path) -> str:",
        "    return str(p.relative_to(ROOT)).replace(\"\\\\\", \"/\")",
        "",
        "def is_excluded(p: Path) -> bool:",
        "    rp = relpath(p)",
        "    return any(x in rp for x in EXCLUDES)",
        "",
        "def ext_of(p: Path) -> str:",
        "    return p.suffix.lower().lstrip(\".\")",
        "",
        "def is_binary(p: Path) -> bool:",
        "    return ext_of(p) in BINARY_EXT",
        "",
        "def read_head_lines(p: Path, limit: int) -> tuple[list[str], bool]:",
        "    lines: list[str] = []",
        "    truncated = False",
        "    for enc, err in ((\"utf-8\",\"strict\"), (\"utf-8\",\"replace\")):",
        "        try:",
        "            with p.open(\"r\", encoding=enc, errors=err) as f:",
        "                for i, line in enumerate(f):",
        "                    if i >= limit:",
        "                        truncated = True",
        "                        break",
        "                    lines.append(line.rstrip(\"\\n\"))",
        "            break",
        "        except Exception:",
        "            lines, truncated = [], False",
        "            continue",
        "    return lines, truncated",
        "",
        "def slurp_for_scan(p: Path, budget: int) -> str:",
        "    try:",
        "        with p.open(\"rb\") as f:",
        "            data = f.read(budget)",
        "        try:",
        "            return data.decode(\"utf-8\", \"replace\")",
        "        except Exception:",
        "            return data.decode(\"utf-8\", \"replace\")",
        "    except Exception:",
        "        return \"\"",
        "",
        "def build_tree() -> str:",
        "    lines: list[str] = []",
        "    def walk(dir: Path, prefix: str = \"\"):",
        "        try:",
        "            items = sorted(dir.iterdir(), key=lambda p: (not p.is_dir(), p.name.lower()))",
        "        except PermissionError:",
        "            return",
        "        keep = [it for it in items if not is_excluded(it)]",
        "        last_idx = len(keep) - 1",
        "        for idx, it in enumerate(keep):",
        "            is_last = (idx == last_idx)",
        "            elbow = \"└── \" if is_last else \"├── \"",
        "            lines.append(prefix + elbow + it.name)",
        "            if it.is_dir():",
        "                ext_pref = \"    \" if is_last else \"│   \"",
        "                walk(it, prefix + ext_pref)",
        "    lines.append(ROOT.name)",
        "    walk(ROOT)",
        "    return \"\\n\".join(lines)",
        "",
        "def list_dirs_files() -> tuple[list[str], list[Path]]:",
        "    dirs_set = set()",
        "    files: list[Path] = []",
        "    for p in ROOT.rglob(\"*\"):",
        "        if is_excluded(p):",
        "            continue",
        "        if p.is_dir():",
        "            dirs_set.add(relpath(p))",
        "        elif p.is_file():",
        "            files.append(p)",
        "    dirs = sorted(dirs_set, key=lambda s: s.lower())",
        "    files.sort(key=lambda x: relpath(x).lower())",
        "    return dirs, files",
        "",
        "def meta_for(p: Path) -> dict:",
        "    try:",
        "        st = p.stat()",
        "        size = int(st.st_size)",
        "        mtime = datetime.fromtimestamp(st.st_mtime, tz=timezone.utc).isoformat()",
        "    except Exception:",
        "        size = -1",
        "        mtime = None",
        "    return {\"size\": size, \"mtime\": mtime}",
        "",
        "# -------- Heuristic analyzers (Lua/text) --------",
        "RE_WAIT = re.compile(r\"WaitForChild\\s*\\(\\s*['\\\"]([^'\\\"\\)]+)['\\\"]\\s*\\)\")",
        "RE_ROUTER = re.compile(r\"ScreenRouter\\.register\\s*\\(\\s*['\\\"]([^'\\\"\\)]+)['\\\"]\")",
        "RE_FIRE_ARG = re.compile(r\":FireServer\\s*\\(\\s*['\\\"]([^'\\\"\\)]*)['\\\"]?\")",
        "RE_FROM_SCALE = re.compile(r\"\\bUDim2\\.fromScale\\b\")",
        "RE_FROM_OFFSET = re.compile(r\"\\bUDim2\\.fromOffset\\b\")",
        "RE_UDIM2_NEW = re.compile(r\"\\bUDim2\\.new\\s*\\(\")",
        "RE_LOCALE_JP = re.compile(r\"['\\\"]jp['\\\"]\", re.IGNORECASE)",
        "RE_LOCALE_JA = re.compile(r\"['\\\"]ja['\\\"]\", re.IGNORECASE)",
        "RE_KITO = re.compile(r\"\\bKito(?:Pick|Assets|Defs|Wires|PickView)\\b\")",
        "RE_ONCLIENT = re.compile(r\"\\.OnClientEvent\\b\")",
        "",
        "def analyze_text(text: str) -> dict:",
        "    waits = RE_WAIT.findall(text)",
        "    screens = RE_ROUTER.findall(text)",
        "    fire_args = RE_FIRE_ARG.findall(text)",
        "    from_scale = len(RE_FROM_SCALE.findall(text))",
        "    from_offset = len(RE_FROM_OFFSET.findall(text))",
        "    udim2_new = len(RE_UDIM2_NEW.findall(text))",
        "    onclient = len(RE_ONCLIENT.findall(text))",
        "    return {",
        "        \"waitForChild\": waits,",
        "        \"routerScreens\": screens,",
        "        \"fireServerArgs\": [s for s in fire_args if s],",
        "        \"udim\": {\"fromScale\": from_scale, \"fromOffset\": from_offset, \"new\": udim2_new},",
        "        \"locale\": {",
        "            \"jp_literals\": len(RE_LOCALE_JP.findall(text)),",
        "            \"ja_literals\": len(RE_LOCALE_JA.findall(text)),",
        "        },",
        "        \"kitoMention\": bool(RE_KITO.search(text)),",
        "        \"onClientEventCount\": onclient,",
        "    }",
        "",
        "def main():",
        "    ROOT = Path(__file__).resolve().parent",
        "    out_path = ROOT / OUT_NAME",
        "    dirs, files = list_dirs_files()",
        "",
        "    manifest = {",
        "        \"meta\": {",
        "            \"tool\": \"snapshot_json_plus\",",
        "            \"version\": \"0.3.0\",",
        "            \"root\": str(ROOT),",
        "            \"generated\": datetime.now(timezone.utc).isoformat(),",
        "            \"maxLinesPerFile\": MAX_LINES,",
        "            \"scanBytes\": SCAN_BYTES,",
        "            \"excludes\": EXCLUDES,",
        "            \"binaryExt\": sorted(BINARY_EXT),",
        "            \"counts\": {\"dirs\": len(dirs), \"files\": len(files)}",
        "        },",
        "        \"tree\": build_tree(),",
        "        \"dirs\": dirs,",
        "        \"files\": [],",
        "        \"analysis\": {",
        "            \"summary\": {",
        "                \"relativeLayoutRisk\": [],    # files where fromOffset >> fromScale",
        "                \"routerScreens\": {},         # screenName -> [paths]",
        "                \"remotes\": {",
        "                    \"fireServerArgs\": {},    # arg -> [paths]",
        "                    \"waitForChild\": {},      # name -> [paths]",
        "                },",
        "                \"localeJpUsage\": [],         # files containing 'jp' literals",
        "                \"kitoFiles\": [],             # files mentioning Kito*",
        "            }",
        "        }",
        "    }",
        "",
        "    # Per-file loop",
        "    for f in files:",
        "        entry = {",
        "            \"path\": relpath(f),",
        "            \"ext\": ext_of(f),",
        "            \"binary\": is_binary(f),",
        "            **meta_for(f)",
        "        }",
        "        text = \"\"",
        "        if not entry[\"binary\"]:",
        "            head, truncated = read_head_lines(f, MAX_LINES)",
        "            entry[\"head\"] = head",
        "            entry[\"truncated\"] = truncated",
        "            text = slurp_for_scan(f, SCAN_BYTES)",
        "",
        "            # Lightweight analysis",
        "            a = analyze_text(text)",
        "            entry[\"analysis\"] = a",
        "",
        "            # Aggregate: relative layout risk",
        "            ud = a[\"udim\"]",
        "            if ud[\"fromOffset\"] > max(ud[\"fromScale\"] * 2, 0) and (ud[\"fromOffset\"] + ud[\"fromScale\"] + ud[\"new\"]) > 0:",
        "                manifest[\"analysis\"][\"summary\"][\"relativeLayoutRisk\"].append(entry[\"path\"])",
        "",
        "            # Aggregate: router screens",
        "            for s in a[\"routerScreens\"]:",
        "                manifest[\"analysis\"][\"summary\"][\"routerScreens\"].setdefault(s, []).append(entry[\"path\"])",
        "",
        "            # Aggregate: remotes",
        "            for arg in a[\"fireServerArgs\"]:",
        "                manifest[\"analysis\"][\"summary\"][\"remotes\"][\"fireServerArgs\"].setdefault(arg, []).append(entry[\"path\"])",
        "            for w in a[\"waitForChild\"]:",
        "                manifest[\"analysis\"][\"summary\"][\"remotes\"][\"waitForChild\"].setdefault(w, []).append(entry[\"path\"])",
        "",
        "            # Aggregate: locale jp usage",
        "            if a[\"locale\"][\"jp_literals\"] > 0:",
        "                manifest[\"analysis\"][\"summary\"][\"localeJpUsage\"].append(entry[\"path\"])",
        "",
        "            # Aggregate: Kito",
        "            if a[\"kitoMention\"]:",
        "                manifest[\"analysis\"][\"summary\"][\"kitoFiles\"].append(entry[\"path\"])",
        "",
        "        manifest[\"files\"].append(entry)",
        "",
        "    # Write JSON",
        "    with out_path.open(\"w\", encoding=\"utf-8\") as o:",
        "        json.dump(manifest, o, ensure_ascii=False, indent=2)",
        "",
        "    print(f\"Done: {out_path}\")",
        "",
        "if __name__ == \"__main__\":",
        "    try:",
        "        main()",
        "    except KeyboardInterrupt:",
        "        sys.exit(130)"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 1,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 1
      }
    },
    {
      "path": "src/client/ui/CameraController.client.lua",
      "ext": "lua",
      "binary": false,
      "size": 2682,
      "mtime": "2025-09-06T13:36:54.759452+00:00",
      "head": [
        "-- src/client/CameraController.client.lua",
        "-- v0.8.x: 2D固定版（3Dは将来実装）",
        "-- 役割：DisplayMode(2D/3Dフラグ)に従い、カメラを2Dトップダウンへ固定する",
        "",
        "local Players     = game:GetService(\"Players\")",
        "local RunService  = game:GetService(\"RunService\")",
        "local RS          = game:GetService(\"ReplicatedStorage\")",
        "",
        "-- Config: ReplicatedStorage/Config/DisplayMode.lua",
        "local DisplayMode = require(",
        "\tRS:WaitForChild(\"Config\")",
        "\t  :WaitForChild(\"DisplayMode\")",
        ")",
        "",
        "local localPlayer = Players.LocalPlayer",
        "local camera      = workspace.CurrentCamera",
        "",
        "--========================",
        "-- 設定（2Dトップダウン）",
        "--========================",
        "local TOPDOWN_HEIGHT = 120               -- 盤面の上空高さ",
        "local TOPDOWN_FOV    = 20                -- 擬似2D感を強める狭めFOV",
        "local LOOK_AT        = Vector3.new(0,0,0) -- 盤面中心（必要に応じて差し替え）",
        "",
        "--========================",
        "-- 内部状態",
        "--========================",
        "local conn       -- Heartbeat接続",
        "local lastCF     -- 最後に適用したカメラCFrame",
        "local lastFOV    -- 最後に適用したFOV",
        "",
        "--========================",
        "-- 2D適用",
        "--========================",
        "local function apply2D()",
        "\tcamera.CameraType  = Enum.CameraType.Scriptable",
        "\tcamera.FieldOfView = TOPDOWN_FOV",
        "",
        "\t-- 上空から真下を見るカメラ",
        "\tlocal pos = Vector3.new(LOOK_AT.X, TOPDOWN_HEIGHT, LOOK_AT.Z)",
        "\tlocal cf  = CFrame.new(pos, LOOK_AT) * CFrame.Angles(-math.rad(90), 0, 0)",
        "\tcamera.CFrame = cf",
        "",
        "\t-- ユーザー操作のズーム無効化（保険）",
        "\tlocalPlayer.CameraMinZoomDistance = 0.5",
        "\tlocalPlayer.CameraMaxZoomDistance = 0.5",
        "",
        "\tlastCF  = cf",
        "\tlastFOV = TOPDOWN_FOV",
        "end",
        "",
        "--========================",
        "-- 監視ループ（軽量）",
        "--  初回適用後、ズレが出た時だけ補正",
        "--========================",
        "local function enable2DGuard()",
        "\t-- 既存ループ停止",
        "\tif conn then conn:Disconnect(); conn = nil end",
        "",
        "\t-- 初回適用",
        "\tapply2D()",
        "",
        "\t-- Heartbeatで軽く監視（毎フレーム再設定はしない）",
        "\tconn = RunService.Heartbeat:Connect(function()",
        "\t\tif camera.CameraType ~= Enum.CameraType.Scriptable",
        "\t\tor camera.FieldOfView ~= lastFOV",
        "\t\tor (camera.CFrame.Position - lastCF.Position).Magnitude > 0.01",
        "\t\tthen",
        "\t\t\tapply2D()",
        "\t\tend",
        "\tend)",
        "end",
        "",
        "local function disableGuard()",
        "\tif conn then conn:Disconnect(); conn = nil end",
        "end",
        "",
        "--========================",
        "-- 初期化：当面は必ず2D",
        "--========================",
        "if not DisplayMode:is2D() then",
        "\tDisplayMode:set(\"2D\") -- 将来3D実装時はここで分岐",
        "end",
        "enable2DGuard()",
        "",
        "-- クリーンアップ",
        "script.Destroying:Connect(disableGuard)"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [
          "Config",
          "DisplayMode"
        ],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/client/ui/ClientMain.client.lua",
      "ext": "lua",
      "binary": false,
      "size": 10787,
      "mtime": "2025-10-07T07:38:45.038422+00:00",
      "head": [
        "-- StarterPlayerScripts/UI/ClientMain.client.lua",
        "-- v0.9.6-P1-9 Router＋Remote結線（NavClient注入／Logger導入／vararg不使用）",
        "-- - ShopOpen の受信は撤去し、代わりに ShopWires.init に一任（フェーズ4：Wires 単一路線化）",
        "-- - ShopResult は存在しない環境もあるため FindFirstChild に変更（Infinite yield 回避）",
        "-- - kitoPick 前面時の裏更新などの分岐も Wires 側に委譲",
        "-- - Router の安全スタブ ensure/active/register は従来どおり",
        "-- - Router.setDeps から BuyItem / ShopReroll / ShopDone を除去（Wires 専任）",
        "",
        "local Players = game:GetService(\"Players\")",
        "local RS      = game:GetService(\"ReplicatedStorage\")",
        "local Remotes = RS:WaitForChild(\"Remotes\")",
        "",
        "--========================",
        "-- Logger",
        "--========================",
        "local Logger = require(RS:WaitForChild(\"SharedModules\"):WaitForChild(\"Logger\"))",
        "local LOG    = Logger.scope(\"ClientMain\")",
        "",
        "Logger.configure({",
        "\tlevel = Logger.INFO,",
        "\ttimePrefix = true,",
        "\tdupWindowSec = 0.5,",
        "})",
        "",
        "LOG.info(\"boot\")",
        "",
        "--========================",
        "-- Locale / LocaleUtil",
        "--========================",
        "local okLocale, Locale = pcall(function()",
        "\treturn require(RS:WaitForChild(\"Config\"):WaitForChild(\"Locale\"))",
        "end)",
        "if not okLocale or type(Locale) ~= \"table\" then",
        "\tLOG.warn(\"Locale missing; using fallback\")",
        "\tlocal _g = \"en\"",
        "\tLocale = {}",
        "\tfunction Locale.getGlobal() return _g end",
        "\tfunction Locale.setGlobal(v) _g = (v==\"ja\" or v==\"jp\") and \"ja\" or \"en\" end",
        "\tfunction Locale.t(_, key)",
        "\t\tif key == \"TOAST_TITLE\" then",
        "\t\t\treturn (_g == \"ja\") and \"通知\" or \"Notice\"",
        "\t\tend",
        "\t\treturn key",
        "\tend",
        "end",
        "",
        "local LocaleUtil = require(RS:WaitForChild(\"SharedModules\"):WaitForChild(\"LocaleUtil\"))",
        "",
        "--========================",
        "-- NavClient",
        "--========================",
        "local NavClient = require(RS:WaitForChild(\"SharedModules\"):WaitForChild(\"NavClient\"))",
        "",
        "--========================",
        "-- S→C",
        "--========================",
        "local HomeOpen    = Remotes:WaitForChild(\"HomeOpen\")",
        "local ShopOpen    = Remotes:WaitForChild(\"ShopOpen\")           -- ← Wires 側で購読",
        "local ShopResult  = Remotes:FindFirstChild(\"ShopResult\")       -- ← nil の可能性あり。WaitForChild を使わない",
        "local StatePush   = Remotes:WaitForChild(\"StatePush\")",
        "local HandPush    = Remotes:WaitForChild(\"HandPush\")",
        "local FieldPush   = Remotes:WaitForChild(\"FieldPush\")",
        "local TakenPush   = Remotes:WaitForChild(\"TakenPush\")",
        "local ScorePush   = Remotes:WaitForChild(\"ScorePush\")",
        "local RoundReady  = Remotes:WaitForChild(\"RoundReady\")",
        "local StageResult = Remotes:WaitForChild(\"StageResult\")",
        "",
        "--========================",
        "-- C→S",
        "--========================",
        "local ReqStartNewRun = Remotes:WaitForChild(\"ReqStartNewRun\")",
        "local ReqContinueRun = Remotes:WaitForChild(\"ReqContinueRun\")",
        "local Confirm        = Remotes:WaitForChild(\"Confirm\")",
        "local ReqRerollAll   = Remotes:WaitForChild(\"ReqRerollAll\")",
        "local ReqRerollHand  = Remotes:WaitForChild(\"ReqRerollHand\")",
        "local ShopDone       = Remotes:WaitForChild(\"ShopDone\")        -- ← 送信自体は Wires 側で実行",
        "local BuyItem        = Remotes:WaitForChild(\"BuyItem\")         -- ← 送信は Wires 側",
        "local ShopReroll     = Remotes:WaitForChild(\"ShopReroll\")      -- ← 送信は Wires 側",
        "local ReqPick        = Remotes:WaitForChild(\"ReqPick\")",
        "local ReqSyncUI      = Remotes:WaitForChild(\"ReqSyncUI\")",
        "local DecideNext     = Remotes:WaitForChild(\"DecideNext\")",
        "local ReqSetLang     = Remotes:WaitForChild(\"ReqSetLang\")",
        "",
        "-- DEV",
        "local DevGrantRyo  = Remotes:FindFirstChild(\"DevGrantRyo\")",
        "local DevGrantRole = Remotes:FindFirstChild(\"DevGrantRole\")",
        "",
        "-- レガシー（任意）",
        "local GoHome   = Remotes:FindFirstChild(\"GoHome\")",
        "local GoNext   = Remotes:FindFirstChild(\"GoNext\")",
        "local SaveQuit = Remotes:FindFirstChild(\"SaveQuit\")",
        "",
        "-- Nav",
        "local Nav = NavClient.new(DecideNext, {",
        "\tGoHome   = GoHome,",
        "\tGoNext   = GoNext,",
        "\tSaveQuit = SaveQuit,",
        "})",
        "",
        "--========================",
        "-- Router 準備",
        "--========================",
        "local uiRoot = script.Parent:FindFirstChild(\"UI\") or script.Parent",
        "local ScreenRouterModule = uiRoot:FindFirstChild(\"ScreenRouter\") or uiRoot:WaitForChild(\"ScreenRouter\")",
        "local ScreensFolder      = uiRoot:FindFirstChild(\"screens\")      or uiRoot:WaitForChild(\"screens\")",
        "",
        "local Router",
        "do",
        "\tlocal ok, mod = pcall(require, ScreenRouterModule)",
        "\tif not ok then",
        "\t\tLOG.warn(\"require(ScreenRouter) failed; stub used: %s\", tostring(mod))",
        "\t\tmod = {}",
        "\tend",
        "\tif type(mod) ~= \"table\" then mod = {} end",
        "\tmod.init     = (type(mod.init)     == \"function\") and mod.init     or function(_) end",
        "\tmod.setDeps  = (type(mod.setDeps)  == \"function\") and mod.setDeps  or function(_) end",
        "\tmod.show     = (type(mod.show)     == \"function\") and mod.show     or function(_) end",
        "\tmod.call     = (type(mod.call)     == \"function\") and mod.call     or function() end",
        "\t-- ensure/active/register を安全に生やす",
        "\tmod.ensure   = (type(mod.ensure)   == \"function\") and mod.ensure   or function() end",
        "\tmod.active   = (type(mod.active)   == \"function\") and mod.active   or function() return nil end",
        "\tmod.register = (type(mod.register) == \"function\") and mod.register or function() end",
        "\tRouter = mod",
        "end",
        "",
        "--========================",
        "-- 画面定義（shop は ShopView）",
        "--========================",
        "local Screens = {",
        "\thome     = require(ScreensFolder:WaitForChild(\"HomeScreen\")),",
        "\trun      = require(ScreensFolder:WaitForChild(\"RunScreen\")),",
        "\tshop     = require(ScreensFolder:WaitForChild(\"ShopView\")),",
        "\tshrine   = require(ScreensFolder:WaitForChild(\"ShrineScreen\")),",
        "\tkitoPick = require(ScreensFolder:WaitForChild(\"KitoPickView\")),",
        "}",
        "Router.init(Screens)",
        "",
        "--========================",
        "-- 依存性配布（Router → UI）",
        "--  ※ BuyItem / ShopReroll / ShopDone は UI に配布しない（Wires 専任）",
        "--========================",
        "Router.setDeps({",
        "\tplayerGui = Players.LocalPlayer:WaitForChild(\"PlayerGui\"),",
        "\tConfirm=Confirm, ReqPick=ReqPick, ReqRerollAll=ReqRerollAll, ReqRerollHand=ReqRerollHand,",
        "\tReqStartNewRun=ReqStartNewRun, ReqContinueRun=ReqContinueRun, ReqSyncUI=ReqSyncUI,",
        "\tDecideNext=DecideNext, ReqSetLang=ReqSetLang,",
        "\tHandPush=HandPush, FieldPush=FieldPush, TakenPush=TakenPush, ScorePush=ScorePush, StatePush=StatePush,",
        "\tStageResult=StageResult,",
        "",
        "\t-- UI層へ Nav を配布",
        "\tNav = Nav,",
        "",
        "\t-- トースト",
        "\ttoast = function(msg, dur)",
        "\t\tpcall(function()",
        "\t\t\tlocal gl   = (type(Locale.getGlobal)==\"function\" and Locale.getGlobal()) or \"en\"",
        "\t\t\tlocal lang = LocaleUtil.norm(gl) or \"en\"",
        "\t\t\tlocal title = (type(Locale.t)==\"function\" and Locale.t(lang, \"TOAST_TITLE\"))",
        "\t\t\t              or ((lang==\"ja\") and \"通知\" or \"Notice\")",
        "\t\t\tgame.StarterGui:SetCore(\"SendNotification\", {",
        "\t\t\t\tTitle    = title,",
        "\t\t\t\tText     = msg,",
        "\t\t\t\tDuration = dur or 2,",
        "\t\t\t})",
        "\t\tend)",
        "\tend,",
        "",
        "\t-- ★ remotes 配布からは除外：BuyItem / ShopReroll / ShopDone",
        "\tremotes = {",
        "\t\tConfirm=Confirm, ReqPick=ReqPick, ReqRerollAll=ReqRerollAll, ReqRerollHand=ReqRerollHand,",
        "\t\tReqStartNewRun=ReqStartNewRun, ReqContinueRun=ReqContinueRun, ReqSyncUI=ReqSyncUI,",
        "\t\tHandPush=HandPush, FieldPush=FieldPush, TakenPush=TakenPush, ScorePush=ScorePush, StatePush=StatePush,",
        "\t\tStageResult=StageResult, DecideNext=DecideNext, ReqSetLang=ReqSetLang,",
        "\t\tDevGrantRyo=DevGrantRyo, DevGrantRole=DevGrantRole,",
        "\t},",
        "})",
        "",
        "--========================",
        "-- Wires 単一路線化：ShopWires.init",
        "--========================",
        "local componentsFolder = uiRoot:WaitForChild(\"components\")",
        "local ShopWires     = require(componentsFolder:WaitForChild(\"controllers\"):WaitForChild(\"ShopWires\"))",
        "local ClientSignals = require(componentsFolder:WaitForChild(\"controllers\"):WaitForChild(\"ClientSignals\"))",
        "",
        "-- ShopOpen/（任意）ShopResult の購読、および Buy/Reroll/Close の送信は ShopWires に集約",
        "ShopWires.init({",
        "\tRouter = Router,",
        "\tLocale = Locale,",
        "\tLocaleUtil = LocaleUtil,",
        "\tLogger = Logger,",
        "\tsignals = ClientSignals,",
        "\tremotes = {",
        "\t\tShopOpen   = ShopOpen,",
        "\t\tShopResult = ShopResult,   -- ← nil の可能性あり。ShopWires 側で nil チェックすること",
        "\t\tBuyItem    = BuyItem,",
        "\t\tShopReroll = ShopReroll,",
        "\t\tShopDone   = ShopDone,",
        "\t\tReqSetLang = ReqSetLang,",
        "\t\tStatePush  = StatePush,",
        "\t},",
        "\ttoast = function(msg, dur)",
        "\t\tpcall(function()",
        "\t\t\tlocal gl   = (type(Locale.getGlobal)==\"function\" and Locale.getGlobal()) or \"en\"",
        "\t\t\tlocal lang = LocaleUtil.norm(gl) or \"en\"",
        "\t\t\tlocal title = (type(Locale.t)==\"function\" and Locale.t(lang, \"TOAST_TITLE\"))",
        "\t\t\t              or ((lang==\"ja\") and \"通知\" or \"Notice\")",
        "\t\t\tgame.StarterGui:SetCore(\"SendNotification\", {",
        "\t\t\t\tTitle    = title,",
        "\t\t\t\tText     = msg,",
        "\t\t\t\tDuration = dur or 2,",
        "\t\t\t})",
        "\t\tend)",
        "\tend,",
        "})",
        "if not ShopResult then",
        "\tLOG.warn(\"ShopResult remote not found; Wires will operate with ShopOpen only\")",
        "end",
        "LOG.info(\"wired: ShopWires.init (ShopOpen/ShopResult by Wires)\")",
        "",
        "--========================================",
        "-- S→C 配線（ShopOpen は撤去済み：Wires に委譲）",
        "--========================================",
        "HomeOpen.OnClientEvent:Connect(function(payload)",
        "\tif payload and payload.lang and type(Locale.setGlobal)==\"function\" then",
        "\t\tlocal nl = LocaleUtil.norm(payload.lang) or payload.lang",
        "\t\tLocale.setGlobal(nl)",
        "\tend",
        "\tRouter.show(\"home\", payload)",
        "\tLOG.info(\"Router.show -> home\")",
        "end)",
        "",
        "RoundReady.OnClientEvent:Connect(function()",
        "\tlocal gl   = (type(Locale.getGlobal)==\"function\" and Locale.getGlobal()) or \"en\"",
        "\tlocal lang = LocaleUtil.norm(gl) or \"en\"",
        "\tRouter.show(\"run\")",
        "\tif Router and type(Router.call)==\"function\" then",
        "\t\tRouter.call(\"run\", \"setLang\", lang)",
        "\t\tRouter.call(\"run\", \"requestSync\")",
        "\tend",
        "\tLOG.info(\"RoundReady → run | lang=%s\", lang)",
        "end)",
        "",
        "StatePush.OnClientEvent:Connect(function(st)",
        "\tif st and st.lang and type(Locale.setGlobal)==\"function\" then",
        "\t\tlocal l = LocaleUtil.norm(st.lang)",
        "\t\tif l then Locale.setGlobal(l) end",
        "\tend",
        "\tif Router and type(Router.call)==\"function\" then",
        "\t\tRouter.call(\"run\", \"onState\", st)",
        "\tend",
        "end)",
        "",
        "HandPush.OnClientEvent:Connect(function(hand)",
        "\tif Router and type(Router.call)==\"function\" then Router.call(\"run\", \"onHand\", hand) end",
        "end)",
        "",
        "FieldPush.OnClientEvent:Connect(function(field)",
        "\tif Router and type(Router.call)==\"function\" then Router.call(\"run\", \"onField\", field) end",
        "end)",
        "",
        "TakenPush.OnClientEvent:Connect(function(taken)",
        "\tif Router and type(Router.call)==\"function\" then Router.call(\"run\", \"onTaken\", taken) end",
        "end)",
        "",
        "ScorePush.OnClientEvent:Connect(function(total, roles, dtl)",
        "\tif Router and type(Router.call)==\"function\" then Router.call(\"run\", \"onScore\", total, roles, dtl) end",
        "end)",
        "",
        "StageResult.OnClientEvent:Connect(function(payload)",
        "\tif Router and type(Router.call)==\"function\" then Router.call(\"run\", \"onStageResult\", payload) end",
        "end)",
        "",
        "LOG.info(\"ready\")"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [
          "Remotes",
          "SharedModules",
          "Logger",
          "Config",
          "Locale",
          "SharedModules",
          "LocaleUtil",
          "SharedModules",
          "NavClient",
          "HomeOpen",
          "ShopOpen",
          "StatePush",
          "HandPush",
          "FieldPush",
          "TakenPush",
          "ScorePush",
          "RoundReady",
          "StageResult",
          "ReqStartNewRun",
          "ReqContinueRun",
          "Confirm",
          "ReqRerollAll",
          "ReqRerollHand",
          "ShopDone",
          "BuyItem",
          "ShopReroll",
          "ReqPick",
          "ReqSyncUI",
          "DecideNext",
          "ReqSetLang",
          "ScreenRouter",
          "screens",
          "HomeScreen",
          "RunScreen",
          "ShopView",
          "ShrineScreen",
          "KitoPickView",
          "PlayerGui",
          "components",
          "controllers",
          "ShopWires",
          "controllers",
          "ClientSignals"
        ],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 1,
          "ja_literals": 5
        },
        "kitoMention": true,
        "onClientEventCount": 8
      }
    },
    {
      "path": "src/client/ui/components/CardNode.lua",
      "ext": "lua",
      "binary": false,
      "size": 13769,
      "mtime": "2025-09-28T13:36:33.696987+00:00",
      "head": [
        "-- StarterPlayerScripts/UI/components/CardNode.lua",
        "-- カード画像ボタン（画像・角丸・枠・軽い拡大アニメ）",
        "-- 右側インフォ / 下部バッジはローカライズ（JA/EN）対応",
        "-- 依存: ReplicatedStorage/SharedModules/Deck/DeckViewAdapter.lua",
        "-- 任意依存: ReplicatedStorage/Config/Theme.lua, ReplicatedStorage/Config/Locale.lua",
        "-- v0.9.7-P1-5 (DeckViewAdapter委譲版):",
        "--   ① 画像決定を DeckViewAdapter に一元化（imageOverride ?? CardImageMap.get(code)）",
        "--   ② info 未指定時は、DeckViewAdapter 由来の {kind,month,name} を自動使用",
        "--   ③ create 時に VM情報をボタンの Attributes に保存（addBadge で再利用）",
        "--   ④ “真四角”ルールは維持（UICorner/外枠UIStrokeを生成しない）",
        "",
        "local TweenService = game:GetService(\"TweenService\")",
        "local RS = game:GetService(\"ReplicatedStorage\")",
        "",
        "local Shared = RS:WaitForChild(\"SharedModules\")",
        "local DeckViewAdapter = require(Shared:WaitForChild(\"Deck\"):WaitForChild(\"DeckViewAdapter\"))",
        "local LocaleUtil   = require(Shared:WaitForChild(\"LocaleUtil\"))",
        "",
        "-- Optional: Theme / Locale",
        "local Theme: any = nil",
        "local Locale: any = nil",
        "do",
        "\tlocal okCfg, cfg = pcall(function() return RS:FindFirstChild(\"Config\") end)",
        "\tif okCfg and cfg then",
        "\t\tif cfg:FindFirstChild(\"Theme\") then",
        "\t\t\tlocal okT, t = pcall(function() return require(cfg.Theme) end)",
        "\t\t\tif okT then Theme = t end",
        "\t\tend",
        "\t\tif cfg:FindFirstChild(\"Locale\") then",
        "\t\t\tlocal okL, l = pcall(function() return require(cfg.Locale) end)",
        "\t\t\tif okL then Locale = l end",
        "\t\tend",
        "\tend",
        "end",
        "",
        "local M = {}",
        "",
        "export type Info = {",
        "\tmonth: number?,  -- 1..12",
        "\tkind: string?,   -- \"bright\"|\"seed\"|\"ribbon\"|\"chaff\"|…（任意）",
        "\tname: string?,   -- 札の日本語名など",
        "}",
        "",
        "--========================",
        "-- Theme helpers",
        "--========================",
        "local function kindColorFallback(kind: string?)",
        "\tif kind == \"bright\" then return Color3.fromRGB(255,230,140)",
        "\telseif kind == \"seed\" then return Color3.fromRGB(200,240,255)",
        "\telseif kind == \"ribbon\" then return Color3.fromRGB(255,200,220)",
        "\telse return Color3.fromRGB(235,235,235) end",
        "end",
        "",
        "local function colorForKind(kind: string?)",
        "\tif Theme and Theme.colorForKind then",
        "\t\tlocal ok, c = pcall(function() return Theme.colorForKind(kind) end)",
        "\t\tif ok and typeof(c) == \"Color3\" then return c end",
        "\tend",
        "\treturn kindColorFallback(kind)",
        "end",
        "",
        "local function themeColor(key: string, fallback: Color3)",
        "\tlocal c = fallback",
        "\tif Theme and Theme.COLORS and typeof(Theme.COLORS[key]) == \"Color3\" then",
        "\t\tc = Theme.COLORS[key]",
        "\tend",
        "\treturn c",
        "end",
        "",
        "local function themeImage(key: string, fallback: string)",
        "\tlocal id = fallback",
        "\tif Theme and Theme.IMAGES and typeof(Theme.IMAGES[key]) == \"string\" and #Theme.IMAGES[key] > 0 then",
        "\t\tid = Theme.IMAGES[key]",
        "\tend",
        "\treturn id",
        "end",
        "",
        "--========================",
        "-- Locale helpers（LocaleUtil 統合）",
        "--========================",
        "",
        "",
        "-- \"ja\"/\"en\" のみ返す（Locale.getGlobal → Locale.pick → \"en\"）",
        "local function curLang(): string",
        "\t-- 1) グローバル設定",
        "\tif Locale and typeof(Locale.getGlobal) == \"function\" then",
        "\t\tlocal ok, v = pcall(Locale.getGlobal)",
        "\t\tif ok then",
        "\t\t\tlocal n = LocaleUtil.norm(v)",
        "\t\t\tif n then return n end",
        "\t\tend",
        "\tend",
        "\t-- 2) OS/環境推奨",
        "\tif Locale and typeof(Locale.pick) == \"function\" then",
        "\t\tlocal ok, v = pcall(Locale.pick)",
        "\t\tif ok then",
        "\t\t\tlocal n = LocaleUtil.norm(v)",
        "\t\t\tif n then return n end",
        "\t\tend",
        "\tend",
        "\t-- 3) 既定",
        "\treturn \"en\"",
        "end",
        "",
        "local function kindJP(kind: string?, fallbackName: string?): string",
        "\tif fallbackName and #fallbackName > 0 then return fallbackName end",
        "\tif kind == \"bright\" then return \"光\"",
        "\telseif kind == \"seed\" then return \"タネ\"",
        "\telseif kind == \"ribbon\" then return \"短冊\"",
        "\telseif kind == \"chaff\" or kind == \"kasu\" then return \"カス\"",
        "\telse return \"--\" end",
        "end",
        "",
        "local function kindEN(kind: string?, fallbackName: string?): string",
        "\tif kind == \"bright\" then return \"Bright\"",
        "\telseif kind == \"seed\" then return \"Seed\"",
        "\telseif kind == \"ribbon\" then return \"Ribbon\"",
        "\telseif kind == \"chaff\" or kind == \"kasu\" then return \"Chaff\"",
        "\telseif fallbackName and fallbackName:match(\"^[%w%p%s]+$\") then",
        "\t\treturn fallbackName",
        "\telse",
        "\t\treturn \"--\"",
        "\tend",
        "end",
        "",
        "-- JA: \"11月/タネ\" / EN: \"11/Seed\"（ENは単位「月」を省く）",
        "local function footerText(monthNum: number?, kind: string?, name: string?, lang: string): string",
        "\tlocal m = tonumber(monthNum)",
        "\tlocal mStr = m and tostring(m) or \"\"",
        "\tif lang == \"ja\" then",
        "\t\tlocal k = kindJP(kind, name)",
        "\t\treturn (mStr ~= \"\" and (mStr .. \"月/\" .. k)) or k",
        "\telse",
        "\t\tlocal k = kindEN(kind, name)",
        "\t\treturn (mStr ~= \"\" and (mStr .. \"/\" .. k)) or k",
        "\tend",
        "end",
        "",
        "-- 右側インフォの文言（短め）",
        "local function sideInfoText(monthNum: number?, kind: string?, name: string?, lang: string): string",
        "\tlocal m = tonumber(monthNum) or 0",
        "\tif lang == \"ja\" then",
        "\t\treturn string.format(\"%d月 %s\", m, (name and #name>0) and name or kindJP(kind))",
        "\telse",
        "\t\treturn string.format(\"%s %s\", tostring(m), kindEN(kind))",
        "\tend",
        "end",
        "",
        "--========================",
        "-- VM補助",
        "--========================",
        "local function vmFromCode(code: string)",
        "\t-- DeckViewAdapter に委譲（code だけで最小カードを作って渡す）",
        "\tlocal ok, vm = pcall(function()",
        "\t\treturn DeckViewAdapter.toVM({ code = tostring(code or \"\") })",
        "\tend)",
        "\tif ok and typeof(vm) == \"table\" then",
        "\t\treturn vm",
        "\tend",
        "\t-- フォールバック（最低限）",
        "\treturn { code = tostring(code or \"\"), imageId = \"\", kind = \"\", month = nil, name = \"\" }",
        "end",
        "",
        "local function applyVMAttributes(button: Instance, vm: any)",
        "\tif not (button and typeof(vm) == \"table\") then return end",
        "\tif typeof(button.SetAttribute) == \"function\" then",
        "\t\tbutton:SetAttribute(\"code\", tostring(vm.code or \"\"))",
        "\t\tbutton:SetAttribute(\"imageId\", tostring(vm.imageId or \"\"))",
        "\t\tbutton:SetAttribute(\"kind\", tostring(vm.kind or \"\"))",
        "\t\t-- month は number or nil を許容",
        "\t\tif vm.month ~= nil then",
        "\t\t\tbutton:SetAttribute(\"month\", tonumber(vm.month) or vm.month)",
        "\t\tend",
        "\t\tbutton:SetAttribute(\"name\", tostring(vm.name or \"\"))",
        "\tend",
        "end",
        "",
        "local function infoFrom(button: Instance, fallbackInfo: Info?): Info?",
        "\t-- 明示 info があればそのまま返す",
        "\tif fallbackInfo then return fallbackInfo end",
        "\t-- Attributes から復元（create 時に保存済み）",
        "\tif not (button and typeof(button.GetAttribute) == \"function\") then return nil end",
        "\tlocal kind = button:GetAttribute(\"kind\")",
        "\tlocal name = button:GetAttribute(\"name\")",
        "\tlocal monthAttr = button:GetAttribute(\"month\")",
        "\tlocal month = nil",
        "\tif typeof(monthAttr) == \"number\" then month = monthAttr end",
        "\tif (kind and #tostring(kind) > 0) or month or (name and #tostring(name) > 0) then",
        "\t\treturn {",
        "\t\t\tkind = kind and tostring(kind) or nil,",
        "\t\t\tmonth = month,",
        "\t\t\tname = name and tostring(name) or nil,",
        "\t\t}",
        "\tend",
        "\treturn nil",
        "end",
        "",
        "--========================",
        "-- 本体API",
        "--========================",
        "-- 後方互換 API:",
        "--   create(parent, code, w?, h?, info?, showInfoRight?)",
        "-- 新API（推奨）:",
        "--   create(parent, code, opts)",
        "--     opts = {",
        "--       size: UDim2, pos: UDim2, anchor: Vector2, zindex: number,",
        "--       info: Info, showInfoRight: boolean, -- cornerRadius は無効（真四角固定）",
        "--     }",
        "function M.create(parent: Instance, code: string, a: any?, b: any?, c: any?, d: any?)",
        "\t-- VM取得（画像/種別/月/名称の決定を DeckViewAdapter に委譲）",
        "\tlocal vm = vmFromCode(code)",
        "\tlocal imageId = tostring(vm.imageId or \"\")",
        "",
        "\t-- 引数解釈",
        "\tlocal opts: any = nil",
        "\tlocal legacyW: number? = nil",
        "\tlocal legacyH: number? = nil",
        "\tlocal legacyInfo: Info? = nil",
        "\tlocal legacyShowRight: boolean? = nil",
        "",
        "\tif typeof(a) == \"table\" and (a.size or a.pos or a.anchor or a.info or a.showInfoRight) then",
        "\t\topts = a",
        "\telse",
        "\t\tlegacyW, legacyH, legacyInfo, legacyShowRight = a, b, c, d",
        "\tend",
        "",
        "\t-- レイアウト方針",
        "\tlocal useScale = (opts == nil and legacyW == nil and legacyH == nil)",
        "\tlocal W_SCALE = 0.12",
        "\tlocal H_SCALE = 0.90",
        "",
        "\tlocal btn = Instance.new(\"ImageButton\")",
        "\tbtn.Name = \"Card_\" .. tostring(vm.code or code or \"????\")",
        "\tbtn.Parent = parent",
        "\tbtn.BackgroundTransparency = 1",
        "\tbtn.BorderSizePixel = 0",
        "\tbtn.AutoButtonColor = true",
        "\tbtn.Image = imageId",
        "\tbtn.ScaleType = Enum.ScaleType.Fit",
        "\tbtn.Active = true",
        "",
        "\t-- VMを属性として保持（addBadge等で info 未指定でも再現可能）",
        "\tapplyVMAttributes(btn, vm)",
        "",
        "\t-- ZIndex",
        "\tdo",
        "\t\tlocal baseZ = (parent:IsA(\"GuiObject\") and parent.ZIndex or 1) + 1",
        "\t\tbtn.ZIndex = (opts and tonumber(opts.zindex)) or baseZ",
        "\tend",
        "",
        "\t-- サイズ決定",
        "\tif opts and opts.size then",
        "\t\tbtn.Size = opts.size",
        "\t\tuseScale = false",
        "\telseif useScale then",
        "\t\tbtn.Size = UDim2.fromScale(W_SCALE, H_SCALE)",
        "\telse",
        "\t\tlocal w = tonumber(legacyW) or 180",
        "\t\tlocal h = tonumber(legacyH) or 120",
        "\t\tbtn.Size = UDim2.fromOffset(w, h)",
        "\tend",
        "",
        "\t-- 位置＆アンカー（指定があれば反映）",
        "\tif opts and opts.anchor then btn.AnchorPoint = opts.anchor end",
        "\tif opts and opts.pos    then btn.Position    = opts.pos    end",
        "",
        "\t-- 最小サイズの安全弁",
        "\tdo",
        "\t\tlocal min = Instance.new(\"UISizeConstraint\")",
        "\t\tmin.MinSize = Vector2.new(56, 78) -- 約 63:88",
        "\t\tmin.Parent = btn",
        "\tend",
        "",
        "\t-- ★ 真四角：UICorner/外枠UIStrokeは生成しない（＝角丸なし＆縁取りなし）",
        "",
        "\t-- 影（Theme.IMAGES.dropShadow があれば使用）",
        "\tdo",
        "\t\tlocal shadow = Instance.new(\"ImageLabel\")",
        "\t\tshadow.Name = \"Shadow\"",
        "\t\tshadow.Parent = btn",
        "\t\tshadow.BackgroundTransparency = 1",
        "\t\tshadow.Image = themeImage(\"dropShadow\", \"rbxassetid://1316045217\")",
        "\t\tshadow.ImageTransparency = (Theme and Theme.HandShadowOffT) or 0.70",
        "\t\tshadow.ScaleType = Enum.ScaleType.Slice",
        "\t\tshadow.SliceCenter = Rect.new(10,10,118,118)",
        "\t\tshadow.Size = UDim2.fromScale(1,1)",
        "\t\tshadow.ZIndex = btn.ZIndex - 1",
        "\tend",
        "",
        "\t-- アスペクト固定（横:縦=63:88、高さ基準）",
        "\tdo",
        "\t\tlocal ar = Instance.new(\"UIAspectRatioConstraint\")",
        "\t\tar.AspectRatio = 63/88",
        "\t\tar.DominantAxis = Enum.DominantAxis.Height",
        "\t\tar.Parent = btn",
        "\tend",
        "",
        "\t-- クリック感（軽い拡大アニメ）",
        "\tdo",
        "\t\tlocal function tweenTo(sz) TweenService:Create(btn, TweenInfo.new(0.06), { Size = sz }):Play() end"
      ],
      "truncated": true,
      "analysis": {
        "waitForChild": [
          "SharedModules",
          "Deck",
          "DeckViewAdapter",
          "LocaleUtil"
        ],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 3,
          "fromOffset": 2,
          "new": 5
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 3
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/client/ui/components/controllers/ClientSignals.lua",
      "ext": "lua",
      "binary": false,
      "size": 679,
      "mtime": "2025-10-07T04:20:25.400378+00:00",
      "head": [
        "-- Lightweight local-bus for Shop UI",
        "local function newSignal()",
        "\tlocal ev = Instance.new(\"BindableEvent\")",
        "\treturn {",
        "\t\tFire    = function(self, ...) ev:Fire(...) end,",
        "\t\tConnect = function(self, fn) return ev.Event:Connect(fn) end,",
        "\t\tWait    = function(self) return ev.Event:Wait() end,",
        "\t}",
        "end",
        "",
        "local Signals = {",
        "\t-- Remotes → UI",
        "\tShopIncoming = newSignal(),  -- payload",
        "\tShopResult   = newSignal(),  -- result from server (optional)",
        "",
        "\t-- UI → Wires（送信は Wires が担う）",
        "\tBuyRequested    = newSignal(), -- (itemTable)",
        "\tRerollRequested = newSignal(),",
        "\tCloseRequested  = newSignal(),",
        "\tDeckToggle      = newSignal(), -- optional",
        "}",
        "",
        "return Signals"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/client/ui/components/controllers/KitoPickWires.client.lua",
      "ext": "lua",
      "binary": false,
      "size": 7462,
      "mtime": "2025-10-06T10:27:30.864903+00:00",
      "head": [
        "-- src/client/ui/wires/KitoPickWires.client.lua",
        "-- 目的: KitoPick の配線（UIは ClientSignals のみ購読）",
        "-- メモ:",
        "--  - Balance.KITO_UI_ENABLED が true のときのみ動作",
        "--  - Balance.KITO_UI_AUTO_DECIDE=false で本UIへ委譲（12枚一覧・グレーアウト・確定ボタン）",
        "--  - UI層は ReplicatedStorage/ClientSignals の BindableEvent を購読する",
        "--  - eligibility を尊重：AUTO_DECIDE 時は「選択可能(eligibility.ok)な候補のみ」から選ぶ",
        "",
        "local RS = game:GetService(\"ReplicatedStorage\")",
        "",
        "-- 依存",
        "local Config   = RS:WaitForChild(\"Config\")",
        "local Balance  = require(Config:WaitForChild(\"Balance\"))",
        "",
        "local Remotes  = RS:WaitForChild(\"Remotes\")",
        "local EvStart  = Remotes:WaitForChild(\"KitoPickStart\")",
        "local EvDecide = Remotes:WaitForChild(\"KitoPickDecide\")",
        "local EvResult = Remotes:WaitForChild(\"KitoPickResult\")",
        "",
        "local Logger   = require(RS:WaitForChild(\"SharedModules\"):WaitForChild(\"Logger\"))",
        "local LOG      = Logger.scope(\"KitoPickClient\")",
        "",
        "-- ─────────────────────────────────────────────────────────────",
        "-- 重複接続ガード（Play Solo 再起動や二重require対策）",
        "-- ─────────────────────────────────────────────────────────────",
        "if script:GetAttribute(\"wired\") then",
        "\treturn",
        "end",
        "script:SetAttribute(\"wired\", true)",
        "",
        "-- ─────────────────────────────────────────────────────────────",
        "-- 設定",
        "-- ─────────────────────────────────────────────────────────────",
        "local AUTO_DECIDE = (Balance.KITO_UI_AUTO_DECIDE == true)   -- 明示 true のときのみ自動決定",
        "local ENABLED     = (Balance.KITO_UI_ENABLED == true)",
        "",
        "-- ─────────────────────────────────────────────────────────────",
        "-- UI ブリッジ（クライアント内だけで使う BindableEvent を公開）",
        "-- ─────────────────────────────────────────────────────────────",
        "local function ensure(parent, name, className)",
        "\tlocal inst = parent:FindFirstChild(name)",
        "\tif not inst then",
        "\t\tinst = Instance.new(className)",
        "\t\tinst.Name = name",
        "\t\tinst.Parent = parent",
        "\tend",
        "\treturn inst",
        "end",
        "",
        "local ClientSignals = ensure(RS, \"ClientSignals\", \"Folder\")",
        "local SigIncoming   = ensure(ClientSignals, \"KitoPickIncoming\", \"BindableEvent\")",
        "local SigResult     = ensure(ClientSignals, \"KitoPickResult\", \"BindableEvent\")",
        "",
        "-- ─────────────────────────────────────────────────────────────",
        "-- ユーティリティ",
        "-- ─────────────────────────────────────────────────────────────",
        "local function briefList(list)",
        "\tlocal n = type(list) == \"table\" and #list or 0",
        "\treturn tostring(n)",
        "end",
        "",
        "-- eligible を尊重して UID を選ぶ（AUTO_DECIDE 用）",
        "-- 1) eligible==true の中から先頭",
        "-- 2) すべて不可なら nil（＝スキップ送信）",
        "local function chooseEligibleUid(payload)",
        "\tif type(payload) ~= \"table\" or type(payload.list) ~= \"table\" or #payload.list == 0 then",
        "\t\treturn nil",
        "\tend",
        "\tlocal elig = (type(payload.eligibility) == \"table\") and payload.eligibility or {}",
        "",
        "\tfor _, ent in ipairs(payload.list) do",
        "\t\tlocal uid = ent and ent.uid",
        "\t\tif uid then",
        "\t\t\tlocal e = elig[uid]",
        "\t\t\tif type(e) == \"table\" and e.ok == true then",
        "\t\t\t\treturn uid",
        "\t\t\tend",
        "\t\tend",
        "\tend",
        "\treturn nil",
        "end",
        "",
        "local function countEligible(payload)",
        "\tif type(payload) ~= \"table\" or type(payload.list) ~= \"table\" then",
        "\t\treturn 0, 0",
        "\tend",
        "\tlocal elig = (type(payload.eligibility) == \"table\") and payload.eligibility or {}",
        "\tlocal total, ok = #payload.list, 0",
        "\tfor _, ent in ipairs(payload.list) do",
        "\t\tlocal e = ent and elig[ent.uid]",
        "\t\tif type(e) == \"table\" and e.ok == true then ok += 1 end",
        "\tend",
        "\treturn ok, total",
        "end",
        "",
        "-- ─────────────────────────────────────────────────────────────",
        "-- 受信: 候補提示 → UI へ（または AUTO_DECIDE）",
        "-- ─────────────────────────────────────────────────────────────",
        "EvStart.OnClientEvent:Connect(function(payload)",
        "\tif not ENABLED then",
        "\t\tLOG.debug(\"[KitoPickStart] UI disabled; ignoring\")",
        "\t\treturn",
        "\tend",
        "",
        "\tlocal ok = type(payload) == \"table\" and type(payload.list) == \"table\"",
        "\tlocal eff = ok and tostring(payload.effectId or payload.effect or \"-\") or \"-\"",
        "\tlocal okN, totalN = 0, 0",
        "\tif ok then okN, totalN = countEligible(payload) end",
        "",
        "\tLOG.info(\"[KitoPickStart] ok=%s size=%s elig=%d/%d target=%s effect=%s session=%s\",",
        "\t\ttostring(ok), ok and briefList(payload.list) or \"?\",",
        "\t\tokN, totalN,",
        "\t\ttostring(payload and payload.targetKind),",
        "\t\teff,",
        "\t\ttostring(payload and payload.sessionId)",
        "\t)",
        "\tif not ok or #payload.list == 0 then return end",
        "",
        "\tif not AUTO_DECIDE then",
        "\t\t-- 単一路線：UI は ClientSignals 経由でのみ開く",
        "\t\tSigIncoming:Fire(payload)",
        "\t\treturn",
        "\tend",
        "",
        "\t-- AUTO_DECIDE: eligible==true の先頭を自動選択。1件も無ければ「スキップ」。",
        "\tlocal pickUid = chooseEligibleUid(payload)",
        "\tif not pickUid then",
        "\t\tLOG.warn(\"[KitoPickDecide] no eligible candidate; sending skip\")",
        "\t\tlocal okSend, err = pcall(function()",
        "\t\t\tEvDecide:FireServer({",
        "\t\t\t\tsessionId  = payload.sessionId,",
        "\t\t\t\ttargetKind = payload.targetKind or \"bright\",",
        "\t\t\t\tnoChange   = true,",
        "\t\t\t})",
        "\t\tend)",
        "\t\tif not okSend then",
        "\t\t\tLOG.warn(\"[KitoPickDecide] skip send failed: %s\", tostring(err))",
        "\t\telse",
        "\t\t\tLOG.info(\"[KitoPickDecide] sent (auto-skip)\")",
        "\t\tend",
        "\t\treturn",
        "\tend",
        "",
        "\tlocal okSend, err = pcall(function()",
        "\t\tEvDecide:FireServer({",
        "\t\t\tsessionId  = payload.sessionId,",
        "\t\t\tuid        = pickUid,",
        "\t\t\ttargetKind = payload.targetKind or \"bright\",",
        "\t\t})",
        "\tend)",
        "\tif not okSend then",
        "\t\tLOG.warn(\"[KitoPickDecide] send failed: %s\", tostring(err))",
        "\telse",
        "\t\tLOG.info(\"[KitoPickDecide] sent uid=%s (auto)\", tostring(pickUid))",
        "\tend",
        "end)",
        "",
        "-- ─────────────────────────────────────────────────────────────",
        "-- 受信: 結果 → UI へ",
        "-- ─────────────────────────────────────────────────────────────",
        "EvResult.OnClientEvent:Connect(function(res)",
        "\tif type(res) ~= \"table\" then return end",
        "\tLOG.info(\"[KitoPickResult] ok=%s changed=%s msg=%s target=%s\",",
        "\t\ttostring(res.ok), tostring(res.changed), tostring(res.message), tostring(res.targetKind))",
        "\tSigResult:Fire(res)",
        "end)"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [
          "Config",
          "Balance",
          "Remotes",
          "KitoPickStart",
          "KitoPickDecide",
          "KitoPickResult",
          "SharedModules",
          "Logger"
        ],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": true,
        "onClientEventCount": 2
      }
    },
    {
      "path": "src/client/ui/components/controllers/ShopWires.lua",
      "ext": "lua",
      "binary": false,
      "size": 7734,
      "mtime": "2025-10-07T04:20:44.132206+00:00",
      "head": [
        "-- v0.10.0 Wires single-route: Remotes subscriber & sender",
        "--  - Only this file listens to Remotes (ShopOpen/ShopResult)",
        "--  - View/Renderer never fire remotes; they raise ClientSignals.* only",
        "--  - Also wires View buttons and deck toggle",
        "",
        "local RS      = game:GetService(\"ReplicatedStorage\")",
        "local Players = game:GetService(\"Players\")",
        "local Remotes = RS:WaitForChild(\"Remotes\")",
        "",
        "local SharedModules = RS:WaitForChild(\"SharedModules\")",
        "local Config        = RS:WaitForChild(\"Config\")",
        "",
        "local Logger     = require(SharedModules:WaitForChild(\"Logger\"))",
        "local LOG        = Logger.scope(\"ShopWires\")",
        "local Locale     = require(Config:WaitForChild(\"Locale\"))",
        "local LocaleUtil = require(SharedModules:WaitForChild(\"LocaleUtil\"))",
        "",
        "local ClientSignals = require(script.Parent:WaitForChild(\"ClientSignals\"))",
        "",
        "local M = {}",
        "",
        "-- deps: Router/toast だけDI（なければ安全スタブ）",
        "M._deps = {",
        "\tRouter = nil,",
        "\ttoast  = function(_) end,",
        "}",
        "",
        "M._wiredRemotes = false",
        "M._wiredSignals = false",
        "M._lastPayload  = nil",
        "M._buyBusy      = false",
        "M._rerollBusy   = false",
        "",
        "--=====================",
        "-- helpers",
        "--=====================",
        "local function _normLang(lang)",
        "\tlocal l = (type(Locale.normalize)==\"function\" and Locale.normalize(lang)) or lang or \"en\"",
        "\tif tostring(lang or \"\"):lower()==\"jp\" and l==\"ja\" then",
        "\t\tLOG.warn(\"[Locale] received legacy 'jp'; normalize to 'ja'\")",
        "\tend",
        "\treturn l",
        "end",
        "",
        "local function _ensureRouter()",
        "\tlocal R = M._deps.Router or {}",
        "\tR.ensure = (type(R.ensure)==\"function\") and R.ensure or function() end",
        "\tR.active = (type(R.active)==\"function\") and R.active or function() return nil end",
        "\tR.show   = (type(R.show)  ==\"function\") and R.show   or function() end",
        "\tR.call   = (type(R.call)  ==\"function\") and R.call   or function() end",
        "\treturn R",
        "end",
        "",
        "local function _snapTalisman(payload)",
        "\tlocal p = payload or M._lastPayload",
        "\treturn p and p.state and p.state.run and p.state.run.talisman or nil",
        "end",
        "",
        "local function _findFirstEmptySlot(payload)",
        "\tlocal t = _snapTalisman(payload)",
        "\tif type(t) ~= \"table\" then return nil end",
        "\tlocal unlocked = tonumber(t.unlocked or 0) or 0",
        "\tlocal s = t.slots or {}",
        "\tfor i=1, math.min(unlocked, 6) do",
        "\t\tif s[i] == nil then return i end",
        "\tend",
        "\treturn nil",
        "end",
        "",
        "local function _money(payload)",
        "\treturn tonumber((payload and (payload.mon or payload.totalMon)) or 0) or 0",
        "end",
        "",
        "--=====================",
        "-- Remotes → Signals / Router",
        "--=====================",
        "local function _onShopOpen(payload)",
        "\tM._lastPayload = payload or {}",
        "\tif M._lastPayload and M._lastPayload.lang then",
        "\t\tM._lastPayload.lang = _normLang(M._lastPayload.lang)",
        "\tend",
        "",
        "\t-- Router制御（kitoPick前面時は裏更新）",
        "\tlocal R = _ensureRouter()",
        "\tif R.active() == \"kitoPick\" then",
        "\t\tlocal ok, shopInst = pcall(function() return R.ensure(\"shop\") end)",
        "\t\tif ok and shopInst then",
        "\t\t\tif type(shopInst.setData)==\"function\" then",
        "\t\t\t\tpcall(function() shopInst:setData(M._lastPayload) end)",
        "\t\t\tend",
        "\t\t\tif type(shopInst.update)==\"function\" then",
        "\t\t\t\tpcall(function() shopInst:update(M._lastPayload) end)",
        "\t\t\tend",
        "\t\t\tLOG.info(\"<ShopOpen> updated in background | lang=%s (kitoPick active)\", tostring(M._lastPayload.lang))",
        "\t\telse",
        "\t\t\tR.show(\"shop\", M._lastPayload)",
        "\t\t\tLOG.info(\"<ShopOpen> routed (fallback) | lang=%s\", tostring(M._lastPayload.lang))",
        "\t\tend",
        "\telse",
        "\t\tR.show(\"shop\", M._lastPayload)",
        "\t\tLOG.info(\"<ShopOpen> routed | lang=%s\", tostring(M._lastPayload.lang))",
        "\tend",
        "",
        "\t-- ローカルバス配布（必要なら他UIが聞ける）",
        "\tClientSignals.ShopIncoming:Fire(M._lastPayload)",
        "end",
        "",
        "local function _onShopResult(res)",
        "\tClientSignals.ShopResult:Fire(res)",
        "end",
        "",
        "--=====================",
        "-- Signals → Remotes（送信はここだけ）",
        "--=====================",
        "local function _sendBuy(it)",
        "\tif M._buyBusy then return end",
        "\tif not it then return end",
        "\tlocal mon   = _money(M._lastPayload)",
        "\tlocal price = tonumber(it.price or 0) or 0",
        "\tif mon < price then",
        "\t\tM._deps.toast((Locale.t and Locale.t(_normLang(M._lastPayload and M._lastPayload.lang), \"SHOP_UI_NOT_ENOUGH_MONEY\")) or \"お金が足りません\")",
        "\t\treturn",
        "\tend",
        "\tM._buyBusy = true",
        "",
        "\t-- talisman は自動配置",
        "\tif tostring(it.category) == \"talisman\" and it.talismanId then",
        "\t\tlocal idx = _findFirstEmptySlot(M._lastPayload)",
        "\t\tif not idx then",
        "\t\t\tM._deps.toast(Locale.t(_normLang(M._lastPayload and M._lastPayload.lang), \"SHOP_UI_NO_EMPTY_SLOT\"))",
        "\t\t\tM._buyBusy = false",
        "\t\t\treturn",
        "\t\tend",
        "\t\tlocal PlaceOnSlot = Remotes:FindFirstChild(\"PlaceOnSlot\")",
        "\t\tif PlaceOnSlot and PlaceOnSlot:IsA(\"RemoteEvent\") then",
        "\t\t\tPlaceOnSlot:FireServer(idx, it.talismanId)",
        "\t\telse",
        "\t\t\tLOG.warn(\"[ShopWires] PlaceOnSlot missing; skip\")",
        "\t\tend",
        "\telse",
        "\t\tlocal BuyItem = Remotes:FindFirstChild(\"BuyItem\")",
        "\t\tif BuyItem and BuyItem:IsA(\"RemoteEvent\") then",
        "\t\t\tpcall(function() BuyItem:FireServer(it.id) end)",
        "\t\telse",
        "\t\t\tLOG.warn(\"[ShopWires] BuyItem missing; skip id=%s\", tostring(it.id))",
        "\t\tend",
        "\tend",
        "",
        "\ttask.delay(0.25, function() M._buyBusy = false end)",
        "end",
        "",
        "local function _sendReroll()",
        "\tif M._rerollBusy then return end",
        "\tM._rerollBusy = true",
        "\tlocal re = Remotes:FindFirstChild(\"ShopReroll\")",
        "\tif re and re:IsA(\"RemoteEvent\") then",
        "\t\tpcall(function() re:FireServer() end)",
        "\telse",
        "\t\tLOG.warn(\"[ShopWires] ShopReroll missing; skip\")",
        "\tend",
        "\ttask.delay(0.25, function() M._rerollBusy = false end)",
        "end",
        "",
        "local function _sendClose()",
        "\tlocal re = Remotes:FindFirstChild(\"ShopDone\")",
        "\tif re and re:IsA(\"RemoteEvent\") then",
        "\t\tpcall(function() re:FireServer() end)",
        "\telse",
        "\t\tLOG.warn(\"[ShopWires] ShopDone missing; skip\")",
        "\tend",
        "end",
        "",
        "--=====================",
        "-- Public: init / wireButtons / applyInfoPlaceholder",
        "--=====================",
        "function M.init(opts)",
        "\tM._deps.Router = (opts and opts.Router) or M._deps.Router",
        "\tM._deps.toast  = (opts and opts.toast)  or M._deps.toast",
        "",
        "\t-- Remotes → Signals",
        "\tif not M._wiredRemotes then",
        "\t\tlocal ShopOpen = Remotes:WaitForChild(\"ShopOpen\")",
        "\t\tShopOpen.OnClientEvent:Connect(_onShopOpen)",
        "\t\tlocal ShopResult = Remotes:FindFirstChild(\"ShopResult\")",
        "\t\tif ShopResult and ShopResult:IsA(\"RemoteEvent\") then",
        "\t\t\tShopResult.OnClientEvent:Connect(_onShopResult)",
        "\t\tend",
        "\t\tM._wiredRemotes = true",
        "\t\tLOG.info(\"wired: Remotes (ShopOpen/ShopResult)\")",
        "\tend",
        "",
        "\t-- Signals → Remotes（送信）",
        "\tif not M._wiredSignals then",
        "\t\tClientSignals.BuyRequested:Connect(_sendBuy)",
        "\t\tClientSignals.RerollRequested:Connect(_sendReroll)",
        "\t\tClientSignals.CloseRequested:Connect(_sendClose)",
        "\t\tM._wiredSignals = true",
        "\t\tLOG.info(\"wired: ClientSignals (Buy/Reroll/Close)\")",
        "\tend",
        "end",
        "",
        "function M.wireButtons(view)",
        "\tlocal n = view and view._nodes",
        "\tif not n then return end",
        "\t-- Reroll",
        "\tif n.rerollBtn and n.rerollBtn.Activated then",
        "\t\tn.rerollBtn.Activated:Connect(function()",
        "\t\t\t_sendReroll()",
        "\t\tend)",
        "\t\tLOG.info(\"wireButtons: RerollBtn connected\")",
        "\tend",
        "\t-- Deck toggle",
        "\tif n.deckBtn and n.deckBtn.Activated then",
        "\t\tn.deckBtn.Activated:Connect(function()",
        "\t\t\tview._deckOpen = not (view._deckOpen == true)",
        "\t\t\tif n.deckPanel and n.infoPanel then",
        "\t\t\t\tn.deckPanel.Visible = view._deckOpen",
        "\t\t\t\tn.infoPanel.Visible = not view._deckOpen",
        "\t\t\tend",
        "\t\tend)",
        "\t\tLOG.info(\"wireButtons: DeckBtn connected\")",
        "\tend",
        "\t-- Close",
        "\tif n.closeBtn and n.closeBtn.Activated then",
        "\t\tn.closeBtn.Activated:Connect(function()",
        "\t\t\t_sendClose()",
        "\t\t\tLOG.info(\"[CLOSE] → ShopDone.FireServer\")",
        "\t\tend)",
        "\t\tLOG.info(\"wireButtons: CloseBtn connected\")",
        "\telse",
        "\t\tLOG.warn(\"wireButtons: CloseBtn missing; skip\")",
        "\tend",
        "end",
        "",
        "function M.applyInfoPlaceholder(view)",
        "\tlocal n = view and view._nodes",
        "\tif not n or not n.infoText then return end",
        "\tif n.infoText.Text == \"\" then",
        "\t\tn.infoText.Text = \"（アイテムにマウスを乗せるか、クリックしてください）\"",
        "\tend",
        "end",
        "",
        "return M"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [
          "Remotes",
          "SharedModules",
          "Config",
          "Logger",
          "Locale",
          "LocaleUtil",
          "ClientSignals",
          "ShopOpen"
        ],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 2,
          "ja_literals": 2
        },
        "kitoMention": false,
        "onClientEventCount": 2
      }
    },
    {
      "path": "src/client/ui/components/DevTools.lua",
      "ext": "lua",
      "binary": false,
      "size": 2534,
      "mtime": "2025-09-05T04:19:22.551421+00:00",
      "head": [
        "-- StarterPlayerScripts/UI/components/DevTools.lua",
        "-- Studio 専用の開発用チートボタン（+役 / +両）を右下に表示するコンポーネント",
        "",
        "local ReplicatedStorage = game:GetService(\"ReplicatedStorage\")",
        "",
        "local Config = ReplicatedStorage:WaitForChild(\"Config\")",
        "local Theme  = require(Config:WaitForChild(\"Theme\"))",
        "",
        "local DevTools = {}",
        "",
        "export type Options = {",
        "\tgrantRyoAmount: number?, -- +両 で付与する金額（既定: 1000）",
        "\toffsetX: number?,         -- 右端からのマージン（px, 既定: 10）",
        "\toffsetY: number?,         -- 下端からのマージン（px, 既定: 10）",
        "\twidth: number?,           -- 全体幅（px, 既定: 160）",
        "\theight: number?,          -- 行高さ（px, 既定: 32）",
        "}",
        "",
        "function DevTools.create(parent: Instance, deps: any, opts: Options?)",
        "\topts = opts or {}",
        "\tlocal grantRyoAmount = opts.grantRyoAmount or 1000",
        "\tlocal PADX = opts.offsetX or 10",
        "\tlocal PADY = opts.offsetY or 10",
        "\tlocal W    = opts.width   or 160",
        "\tlocal H    = opts.height  or 32",
        "",
        "\tlocal C = (Theme and Theme.COLORS) or {}",
        "\tlocal BTN_BG   = C.DevBtnBg   or Color3.fromRGB(35,130,90)",
        "\tlocal BTN_TEXT = C.DevBtnText or Color3.fromRGB(255,255,255)",
        "",
        "\tlocal row = Instance.new(\"Frame\")",
        "\trow.Name = \"DevTools\"",
        "\trow.Parent = parent",
        "\trow.AnchorPoint = Vector2.new(1, 1)",
        "\trow.Position = UDim2.new(1, -PADX, 1, -PADY)",
        "\trow.Size = UDim2.new(0, W, 0, H)",
        "\trow.BackgroundTransparency = 1",
        "\trow.ZIndex = 999",
        "",
        "\tlocal layout = Instance.new(\"UIListLayout\")",
        "\tlayout.Parent = row",
        "\tlayout.FillDirection = Enum.FillDirection.Horizontal",
        "\tlayout.HorizontalAlignment = Enum.HorizontalAlignment.Right",
        "\tlayout.Padding = UDim.new(0, 8)",
        "",
        "\tlocal function makeBtn(txt: string, onClick: ()->())",
        "\t\tlocal b = Instance.new(\"TextButton\")",
        "\t\tb.Name = \"Btn\"",
        "\t\tb.Parent = row",
        "\t\tb.Size = UDim2.new(0, math.floor((W-8)/2), 1, 0)",
        "\t\tb.BackgroundColor3 = BTN_BG",
        "\t\tb.TextColor3 = BTN_TEXT",
        "\t\tb.Text = txt",
        "\t\tb.Font = Enum.Font.GothamBold",
        "\t\tb.TextScaled = true",
        "\t\tb.AutoButtonColor = true",
        "\t\tlocal c = Instance.new(\"UICorner\")",
        "\t\tc.CornerRadius = UDim.new(0, 8)",
        "\t\tc.Parent = b",
        "\t\tb.Activated:Connect(function()",
        "\t\t\tif typeof(onClick) == \"function\" then onClick() end",
        "\t\tend)",
        "\t\treturn b",
        "\tend",
        "",
        "\t-- +役",
        "\tif deps and deps.DevGrantRole then",
        "\t\tmakeBtn(\"+役\", function()",
        "\t\t\tdeps.DevGrantRole:FireServer()",
        "\t\tend)",
        "\tend",
        "",
        "\t-- +両",
        "\tif deps and deps.DevGrantRyo then",
        "\t\tmakeBtn(\"+両\", function()",
        "\t\t\tdeps.DevGrantRyo:FireServer(grantRyoAmount)",
        "\t\tend)",
        "\tend",
        "",
        "\treturn row",
        "end",
        "",
        "return DevTools"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [
          "Config",
          "Theme"
        ],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 3
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/client/ui/components/Overlay.lua",
      "ext": "lua",
      "binary": false,
      "size": 2202,
      "mtime": "2025-09-17T08:08:04.701866+00:00",
      "head": [
        "-- StarterPlayerScripts/UI/components/Overlay.lua",
        "-- ローディング用オーバーレイ",
        "-- v0.9.7-P1-4: Theme に完全寄せ（色・透過のフォールバック撤去／既定文言もTheme経由）",
        "",
        "local ReplicatedStorage = game:GetService(\"ReplicatedStorage\")",
        "local Config = ReplicatedStorage:WaitForChild(\"Config\")",
        "local Theme  = require(Config:WaitForChild(\"Theme\"))",
        "",
        "local M = {}",
        "",
        "function M.create(parent: Instance, text: string?)",
        "\t--=== 背景（入力遮断＋半透明） ======================================",
        "\tlocal overlay = Instance.new(\"Frame\")",
        "\toverlay.Name = \"LoadingOverlay\"",
        "\toverlay.Parent = parent",
        "\toverlay.Size = UDim2.fromScale(1, 1)",
        "\toverlay.BackgroundColor3 = (Theme.COLORS and Theme.COLORS.OverlayBg) or Color3.fromRGB(0, 0, 0)",
        "\toverlay.BackgroundTransparency = (Theme.overlayBgT ~= nil) and Theme.overlayBgT or 0.35",
        "\toverlay.Visible = false",
        "\toverlay.ZIndex = 50",
        "\toverlay.Active = true            -- 入力を遮断",
        "",
        "\t--=== メッセージ =====================================================",
        "\tlocal msg = Instance.new(\"TextLabel\")",
        "\tmsg.Name = \"Msg\"",
        "\tmsg.Parent = overlay",
        "\tmsg.BackgroundTransparency = 1",
        "\tmsg.TextScaled = true",
        "\tmsg.Size = UDim2.new(0, 480, 0, 48)",
        "\tmsg.Position = UDim2.new(0.5, 0, 0.5, 0)",
        "\tmsg.AnchorPoint = Vector2.new(0.5, 0.5)",
        "\tmsg.TextXAlignment = Enum.TextXAlignment.Center",
        "\tmsg.Font = Enum.Font.GothamMedium",
        "\tmsg.TextColor3 = (Theme.COLORS and (Theme.COLORS.PrimaryBtnText or Color3.fromRGB(255,255,255)))",
        "\t\tor Color3.fromRGB(255, 255, 255)",
        "\tmsg.Text = text or Theme.loadingText or Theme.helpText or \"読み込み中...\"",
        "",
        "\t--=== API ============================================================",
        "\tlocal api = {}",
        "",
        "\tfunction api:show()",
        "\t\toverlay.Visible = true",
        "\tend",
        "",
        "\tfunction api:hide()",
        "\t\toverlay.Visible = false",
        "\tend",
        "",
        "\tfunction api:setText(t: string?)",
        "\t\tmsg.Text = t or \"\"",
        "\tend",
        "",
        "\tfunction api:setTransparency(alpha: number)",
        "\t\t-- 0（不透明）〜1（完全透明）",
        "\t\tlocal a = tonumber(alpha)",
        "\t\tif a and a >= 0 and a <= 1 then",
        "\t\t\toverlay.BackgroundTransparency = a",
        "\t\tend",
        "\tend",
        "",
        "\tfunction api:destroy()",
        "\t\tpcall(function() overlay:Destroy() end)",
        "\tend",
        "",
        "\treturn api",
        "end",
        "",
        "return M"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [
          "Config",
          "Theme"
        ],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 1,
          "fromOffset": 0,
          "new": 2
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/client/ui/components/renderers/FieldRenderer.lua",
      "ext": "lua",
      "binary": false,
      "size": 4183,
      "mtime": "2025-09-24T13:53:52.543964+00:00",
      "head": [
        "-- StarterPlayerScripts/UI/components/renderers/FieldRenderer.lua",
        "-- 場札の描画レンダラ：上下2段に分けて配置",
        "-- v0.9.7-P1-6: DeckViewAdapter による一括VM化 + フッタ表示は CardNode に全面委譲",
        "--               （画像決定/ローカライズ/配色は CardNode 側に集約）",
        "",
        "local components = script.Parent.Parent",
        "local lib        = components.Parent:WaitForChild(\"lib\")",
        "",
        "local UiUtil     = require(lib:WaitForChild(\"UiUtil\"))",
        "local CardNode   = require(components:WaitForChild(\"CardNode\"))",
        "",
        "-- ★ 依存",
        "local RS         = game:GetService(\"ReplicatedStorage\")",
        "local Shared     = RS:WaitForChild(\"SharedModules\")",
        "local DeckViewAdapter = require(Shared:WaitForChild(\"Deck\"):WaitForChild(\"DeckViewAdapter\"))",
        "",
        "local Config  = RS:WaitForChild(\"Config\")",
        "local Theme   = require(Config:WaitForChild(\"Theme\"))",
        "",
        "local M = {}",
        "",
        "-- opts:",
        "--   width:number?               -- 未指定ならスケールレイアウト（推奨）",
        "--   height:number?              -- 未指定ならスケールレイアウト（推奨）",
        "--   rowPaddingScale:number?     -- カード間隔（比率）。未指定は Theme.RATIOS.COL_GAP",
        "--   onPick:(bindex:number)->()  -- 場札クリック時に呼ぶ",
        "function M.render(topRow: Instance, bottomRow: Instance, field: {any}?, opts: {width:number?, height:number?, rowPaddingScale:number?, onPick:any}? )",
        "\topts = opts or {}",
        "\tlocal useScale = (opts.width == nil and opts.height == nil)",
        "\tlocal W = opts.width  or 80",
        "\tlocal H = opts.height or 96",
        "\tlocal R = Theme.RATIOS or {}",
        "\tlocal padScale = (typeof(opts.rowPaddingScale) == \"number\" and opts.rowPaddingScale) or R.COL_GAP or 0.015",
        "\tlocal onPick = opts.onPick",
        "",
        "\t-- 既存をクリア",
        "\tUiUtil.clear(topRow, {})",
        "\tUiUtil.clear(bottomRow, {})",
        "",
        "\t-- 行レイアウト（横並び・両端にも同じ余白）",
        "\tlocal function ensureRowLayout(row: Instance)",
        "\t\tlocal layout = Instance.new(\"UIListLayout\")",
        "\t\tlayout.Parent = row",
        "\t\tlayout.FillDirection = Enum.FillDirection.Horizontal",
        "\t\tlayout.HorizontalAlignment = Enum.HorizontalAlignment.Left",
        "\t\tlayout.VerticalAlignment = Enum.VerticalAlignment.Center",
        "\t\tlayout.Padding = UDim.new(padScale, 0)",
        "",
        "\t\tlocal pad = Instance.new(\"UIPadding\")",
        "\t\tpad.PaddingLeft  = UDim.new(padScale, 0)",
        "\t\tpad.PaddingRight = UDim.new(padScale, 0)",
        "\t\tpad.Parent = row",
        "",
        "\t\treturn layout, pad",
        "\tend",
        "",
        "\tensureRowLayout(topRow)",
        "\tensureRowLayout(bottomRow)",
        "",
        "\t-- ---- DeckViewAdapter で一括VM化（画像ID/種別/月/名称の決定を委譲） ----",
        "\tlocal vms = DeckViewAdapter.toVMs(field or {})",
        "\tlocal n   = #vms",
        "",
        "\t-- 上下2段にスプリット",
        "\tlocal split       = math.ceil(n/2) -- 前半=上段、後半=下段",
        "\tlocal topCount    = math.min(split, n)",
        "\tlocal bottomCount = math.max(0, n - split)",
        "",
        "\t-- 行ごとのカード幅（scale）",
        "\tlocal function calcWScale(count: number): number",
        "\t\tif count <= 0 then return 0.12 end",
        "\t\tlocal raw = (1 - padScale * (count + 1)) / count -- 両端＋間の余白",
        "\t\tif raw < 0.08 then raw = 0.08 end",
        "\t\tif raw > 0.18 then raw = 0.18 end",
        "\t\treturn raw",
        "\tend",
        "",
        "\tlocal W_TOP    = calcWScale(topCount)",
        "\tlocal W_BOTTOM = calcWScale(bottomCount)",
        "",
        "\tfor i, vm in ipairs(vms) do",
        "\t\tlocal parentRow = (i <= split) and topRow or bottomRow",
        "\t\tlocal rowWScale = (i <= split) and W_TOP  or W_BOTTOM",
        "",
        "\t\tlocal node",
        "\t\tif useScale then",
        "\t\t\t-- スケールレイアウト：横幅は行の枚数に応じて最適化",
        "\t\t\tnode = CardNode.create(parentRow, vm.code, nil, nil, {",
        "\t\t\t\tmonth = vm.month, kind = vm.kind, name = vm.name,",
        "\t\t\t})",
        "\t\t\tnode.Size = UDim2.fromScale(rowWScale, 0.90)",
        "\t\telse",
        "\t\t\t-- 互換：px 指定",
        "\t\t\tnode = CardNode.create(parentRow, vm.code, W, H, {",
        "\t\t\t\tmonth = vm.month, kind = vm.kind, name = vm.name,",
        "\t\t\t})",
        "\t\tend",
        "",
        "\t\t-- 配列順を保持",
        "\t\tnode:SetAttribute(\"bindex\", i)",
        "\t\tnode.LayoutOrder = i",
        "",
        "\t\t-- ▼ フッタ（ローカライズ/文字色は CardNode に委譲）",
        "\t\t-- info を省略すれば、CardNode 側が VM/Attributes 由来で自動表示",
        "\t\tCardNode.addBadge(node)",
        "",
        "\t\t-- クリック",
        "\t\tif onPick then",
        "\t\t\tnode.MouseButton1Click:Connect(function()",
        "\t\t\t\tonPick(i)",
        "\t\t\tend)",
        "\t\tend",
        "\tend",
        "end",
        "",
        "return M"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [
          "lib",
          "UiUtil",
          "CardNode",
          "SharedModules",
          "Deck",
          "DeckViewAdapter",
          "Config",
          "Theme"
        ],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 1,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/client/ui/components/renderers/HandRenderer.lua",
      "ext": "lua",
      "binary": false,
      "size": 5068,
      "mtime": "2025-09-24T13:43:55.741206+00:00",
      "head": [
        "-- StarterPlayerScripts/UI/components/renderers/HandRenderer.lua",
        "-- 手札を描画。selectedIndex のハイライトは内部で管理（縁取りは使わず影だけで強調）",
        "-- v0.9.7-P1-5: DeckViewAdapter 一括VM化 / フッタ＆画像決定は CardNode に委譲",
        "",
        "local ReplicatedStorage = game:GetService(\"ReplicatedStorage\")",
        "local Config = ReplicatedStorage:WaitForChild(\"Config\")",
        "local Theme  = require(Config:WaitForChild(\"Theme\"))",
        "",
        "local Shared      = ReplicatedStorage:WaitForChild(\"SharedModules\")",
        "local DeckViewAdapter = require(Shared:WaitForChild(\"Deck\"):WaitForChild(\"DeckViewAdapter\"))",
        "",
        "local components = script.Parent.Parent",
        "local CardNode   = require(components:WaitForChild(\"CardNode\"))",
        "",
        "local M = {}",
        "",
        "--========================",
        "-- 選択ハイライト（縁取りは使わない）",
        "--========================",
        "local SHADOW_ON_ALPHA  = (Theme and Theme.HandShadowOnT  ~= nil) and Theme.HandShadowOnT  or 0.45  -- 0=不透明（濃い影）",
        "local SHADOW_OFF_ALPHA = (Theme and Theme.HandShadowOffT ~= nil) and Theme.HandShadowOffT or 0.70",
        "",
        "local function highlight(container: Instance, selectedIndex: number?)",
        "\tfor _,node in ipairs(container:GetChildren()) do",
        "\t\tif node:IsA(\"ImageButton\") or node:IsA(\"TextButton\") then",
        "\t\t\tlocal myIdx = node:GetAttribute(\"index\")",
        "\t\t\tlocal on = (selectedIndex ~= nil and myIdx == selectedIndex)",
        "",
        "\t\t\t-- 縁取りは一切使わない（UIStrokeを触らない）",
        "",
        "\t\t\t-- 影でハイライト（CardNode 側の Shadow:ImageLabel を利用）",
        "\t\t\tlocal shadow = node:FindFirstChild(\"Shadow\")",
        "\t\t\tif shadow and shadow:IsA(\"ImageLabel\") then",
        "\t\t\t\tshadow.ImageTransparency = on and SHADOW_ON_ALPHA or SHADOW_OFF_ALPHA",
        "\t\t\tend",
        "",
        "\t\t\t-- TextButtonの枠は常に消す",
        "\t\t\tif node:IsA(\"TextButton\") then",
        "\t\t\t\tnode.BorderSizePixel = 0",
        "\t\t\tend",
        "\t\tend",
        "\tend",
        "end",
        "",
        "-- 子を掃除",
        "local function clear(container: Instance)",
        "\tfor _,c in ipairs(container:GetChildren()) do",
        "\t\tif c:IsA(\"TextButton\") or c:IsA(\"ImageButton\") or c:IsA(\"TextLabel\")",
        "\t\t\tor c:IsA(\"Frame\") or c:IsA(\"ImageLabel\") or c:IsA(\"UIListLayout\") or c:IsA(\"UIPadding\") then",
        "\t\t\tc:Destroy()",
        "\t\tend",
        "\tend",
        "end",
        "",
        "--========================",
        "-- API",
        "--========================",
        "-- render(container, hand, { width, height, selectedIndex, onSelect, paddingScale })",
        "--  - width/height 未指定 → 比率レイアウト（各カードは高さ90%、横幅は手札枚数から自動算出）",
        "--  - width/height 指定   → pxレイアウト（互換）",
        "--  - paddingScale       → カード間の横間隔（比率）。既定 0.02（= 2%）",
        "function M.render(container: Instance, hand: {any}?, opts: {width:number?, height:number?, selectedIndex:number?, onSelect:(number)->()? , paddingScale:number?})",
        "\topts = opts or {}",
        "\tlocal useScale = (opts.width == nil and opts.height == nil)",
        "\tlocal w = opts.width  or 90",
        "\tlocal h = opts.height or 150",
        "\tlocal gapScale = (typeof(opts.paddingScale) == \"number\" and opts.paddingScale) or 0.02",
        "",
        "\tclear(container)",
        "",
        "\t-- 並べ方：横並び（比率Padding）＋左右にも同じ余白を付与",
        "\tlocal layout = Instance.new(\"UIListLayout\")",
        "\tlayout.Parent = container",
        "\tlayout.FillDirection = Enum.FillDirection.Horizontal",
        "\tlayout.HorizontalAlignment = Enum.HorizontalAlignment.Left",
        "\tlayout.VerticalAlignment = Enum.VerticalAlignment.Center",
        "\tlayout.Padding = UDim.new(gapScale, 0)",
        "",
        "\tlocal pad = Instance.new(\"UIPadding\")",
        "\tpad.PaddingLeft  = UDim.new(gapScale, 0)",
        "\tpad.PaddingRight = UDim.new(gapScale, 0)",
        "\tpad.Parent = container",
        "",
        "\t-- ---- ここから：DeckViewAdapter で一括VM化 ----",
        "\tlocal vms = DeckViewAdapter.toVMs(hand or {})",
        "\tlocal count = #vms",
        "",
        "\t-- 手札枚数に応じて横幅スケールを自動算出",
        "\tlocal function calcWScale(n: number): number",
        "\t\tif n <= 0 then return 0.12 end",
        "\t\tlocal raw = (1 - gapScale * (n + 1)) / n",
        "\t\tif raw < 0.09 then raw = 0.09 end",
        "\t\tif raw > 0.16 then raw = 0.16 end",
        "\t\treturn raw",
        "\tend",
        "\tlocal W_SCALE = useScale and calcWScale(count) or nil",
        "\tlocal H_SCALE = 0.90",
        "",
        "\t-- カードを生成して並べる",
        "\tfor i, vm in ipairs(vms) do",
        "\t\tlocal node",
        "\t\tif useScale then",
        "\t\t\tnode = CardNode.create(container, vm.code, nil, nil, {",
        "\t\t\t\tmonth = vm.month, kind = vm.kind, name = vm.name,",
        "\t\t\t})",
        "\t\t\tnode.Size = UDim2.fromScale(W_SCALE, H_SCALE)",
        "\t\telse",
        "\t\t\tnode = CardNode.create(container, vm.code, w, h, {",
        "\t\t\t\tmonth = vm.month, kind = vm.kind, name = vm.name,",
        "\t\t\t})",
        "\t\tend",
        "",
        "\t\t-- index 属性（選択ハイライト用）",
        "\t\tnode:SetAttribute(\"index\", i)",
        "",
        "\t\t-- ▼ フッタ（ローカライズ＆配色は CardNode 側で実施）",
        "\t\t-- info を省略すれば、CardNode 側が Attributes/VM 由来で自動表示",
        "\t\tCardNode.addBadge(node)",
        "",
        "\t\t-- クリック時の選択",
        "\t\tif typeof(opts.onSelect) == \"function\" then",
        "\t\t\tnode.MouseButton1Click:Connect(function()",
        "\t\t\t\topts.onSelect(i)",
        "\t\t\t\t-- 内部ハイライトも即時更新（影だけで表現）",
        "\t\t\t\thighlight(container, i)",
        "\t\t\tend)",
        "\t\tend",
        "\tend",
        "",
        "\t-- 初期ハイライト",
        "\thighlight(container, opts.selectedIndex)",
        "end",
        "",
        "return M"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [
          "Config",
          "Theme",
          "SharedModules",
          "Deck",
          "DeckViewAdapter",
          "CardNode"
        ],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 1,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/client/ui/components/renderers/KitoPickRenderer.lua",
      "ext": "lua",
      "binary": false,
      "size": 9976,
      "mtime": "2025-10-07T14:36:25.850355+00:00",
      "head": [
        "-- StarterPlayerScripts/UI/components/renderers/KitoPickRenderer.lua",
        "-- v1.4.2 (Overlay Z fix + bigger info text)",
        "--  - 対象外オーバーレイの ZIndex をカード基準で強制的に最前面へ",
        "--  - 情報行（◯月/種族 名前）の MaxTextSize は v1.4.1 同様 24px 既定",
        "--  - API: create(playerGui) -> { gui, show, hide, renderCard, setCardSelected }",
        "",
        "local RS     = game:GetService(\"ReplicatedStorage\")",
        "local Logger = require(RS:WaitForChild(\"SharedModules\"):WaitForChild(\"Logger\"))",
        "local LOG    = Logger.scope(\"KitoPickRenderer\")",
        "",
        "-- Styles（存在しなくても動くようにガード）",
        "local Styles do",
        "\tlocal ok, mod = pcall(function()",
        "\t\treturn require(script.Parent.Parent.Parent",
        "\t\t\t:WaitForChild(\"styles\")",
        "\t\t\t:WaitForChild(\"KitoPickStyles\"))",
        "\tend)",
        "\tStyles = ok and mod or nil",
        "end",
        "",
        "local M = {}",
        "",
        "--───────────────────────── ユーティリティ（表示用） ─────────────────────────",
        "local MONTH_JP = { \"1月\",\"2月\",\"3月\",\"4月\",\"5月\",\"6月\",\"7月\",\"8月\",\"9月\",\"10月\",\"11月\",\"12月\" }",
        "local CARD_AR  = 0.62 -- 花札のアスペクト（幅/高さ）の目安",
        "",
        "local function parseMonth(entry)",
        "\tif not entry then return nil end",
        "\tlocal m = tonumber(entry.month or (entry.meta and entry.meta.month))",
        "\tif m and m >= 1 and m <= 12 then return m end",
        "\tlocal s = tostring(entry.code or entry.uid or \"\")",
        "\tlocal two = string.match(s, \"^(%d%d)\")",
        "\tm = tonumber(two); if m and m >= 1 and m <= 12 then return m end",
        "\treturn nil",
        "end",
        "",
        "local function kindToJp(k)",
        "\tlocal map = { bright=\"光\", ribbon=\"短\", seed=\"タネ\", chaff=\"カス\", plain=\"カス\", animal=\"タネ\" }",
        "\treturn map[tostring(k or \"\"):lower()] or tostring(k or \"?\")",
        "end",
        "",
        "local function reasonToText(reason)",
        "\tlocal map = {",
        "\t\t[\"already-applied\"]     = \"既に適用済みです\",",
        "\t\t[\"already-bright\"]      = \"すでに光札です\",",
        "\t\t[\"already-chaff\"]       = \"すでにカス札です\",",
        "\t\t[\"month-has-no-bright\"] = \"この月に光札はありません\",",
        "\t\t[\"not-eligible\"]        = \"対象外です\",",
        "\t\t[\"same-target\"]         = \"同一カードは選べません\",",
        "\t\t[\"no-check\"]            = \"対象外（サーバ判定なし）\",",
        "\t}",
        "\treturn map[tostring(reason or \"\")] or nil",
        "end",
        "",
        "local function resolveImage(entry)",
        "\tif entry.image and type(entry.image) == \"string\" and #entry.image > 0 then",
        "\t\treturn entry.image",
        "\tend",
        "\tif entry.imageId then",
        "\t\treturn \"rbxassetid://\" .. tostring(entry.imageId)",
        "\tend",
        "\treturn nil",
        "end",
        "",
        "-- 色の既定値（Styles があれば上書き）",
        "local COLOR = {",
        "\tslotBg       = Color3.fromRGB(40, 42, 54),",
        "\tslotStroke   = Color3.fromRGB(64, 68, 80),",
        "\ttextMain     = Color3.fromRGB(232,232,240),",
        "\ttextSub      = Color3.fromRGB(210,210,220),",
        "\timgFallback  = Color3.fromRGB(55,57,69),",
        "\toverlayEdge  = Color3.fromRGB(230,230,240),",
        "\tselectStroke = Color3.fromRGB(255,210,110),",
        "}",
        "do",
        "\tlocal C = Styles and Styles.colors or {}",
        "\tCOLOR.slotBg       = C.cardBg          or COLOR.slotBg",
        "\tCOLOR.slotStroke   = C.cardStroke      or COLOR.slotStroke",
        "\tCOLOR.textMain     = C.cardNameText    or COLOR.textMain",
        "\tCOLOR.textSub      = C.cardInfoText    or COLOR.textSub",
        "\tCOLOR.imgFallback  = C.cardImgFallback or COLOR.imgFallback",
        "\tCOLOR.overlayEdge  = C.ineligibleTitle or COLOR.overlayEdge",
        "\tCOLOR.selectStroke = C.selectedStroke  or COLOR.selectStroke",
        "end",
        "",
        "--────────────────────────────── 本体 ──────────────────────────────",
        "function M.create(playerGui: Instance)",
        "\tassert(playerGui and playerGui:IsA(\"PlayerGui\"), \"create(playerGui): PlayerGui expected\")",
        "",
        "\tlocal gui = Instance.new(\"ScreenGui\")",
        "\tgui.Name           = \"KitoPickGui\"",
        "\tgui.ResetOnSpawn   = false",
        "\tgui.ZIndexBehavior = Enum.ZIndexBehavior.Global",
        "\tgui.IgnoreGuiInset = true",
        "\tgui.DisplayOrder   = 50",
        "\tgui.Enabled        = false",
        "\tgui.Parent         = playerGui",
        "",
        "\tlocal api = { gui = gui }",
        "\tfunction api.show() gui.Enabled = true end",
        "\tfunction api.hide() gui.Enabled = false end",
        "",
        "\t--──────────────── セル（カード）生成 ────────────────",
        "\t-- ent: { uid, code, name, kind, month, image?/imageId?, eligible?, reason? }",
        "\tfunction api.renderCard(parent: Instance, ent: table): Instance",
        "\t\tassert(parent and parent:IsA(\"Instance\"), \"renderCard: invalid parent\")",
        "\t\tassert(type(ent) == \"table\", \"renderCard: ent must be table\")",
        "",
        "\t\tlocal S = (Styles and Styles.sizes) or {}",
        "\t\tlocal F = (Styles and Styles.fontSizes) or {}",
        "\t\tlocal Z = (Styles and Styles.z) or {}",
        "",
        "\t\t-- ルート（灰スロット）",
        "\t\tlocal card = Instance.new(\"TextButton\")",
        "\t\tcard.Name                   = tostring(ent.uid or ent.code or \"card\")",
        "\t\tcard.AutoButtonColor        = true",
        "\t\tcard.BackgroundColor3       = COLOR.slotBg",
        "\t\tcard.BackgroundTransparency = 0.05",
        "\t\tcard.BorderSizePixel        = 0",
        "\t\tcard.Size                   = UDim2.fromScale(1,1) -- Grid 側でサイズ管理",
        "\t\tcard.Text                   = \"\"",
        "\t\tcard.ZIndex                 = 10",
        "\t\tcard.Parent                 = parent",
        "",
        "\t\tlocal corner = Instance.new(\"UICorner\")",
        "\t\tcorner.CornerRadius = UDim.new(0, S.btnCorner or 12)",
        "\t\tcorner.Parent = card",
        "",
        "\t\tlocal stroke = Instance.new(\"UIStroke\")",
        "\t\tstroke.Name = \"SelStroke\"",
        "\t\tstroke.Thickness = 3",
        "\t\tstroke.Color = COLOR.selectStroke",
        "\t\tstroke.Enabled = false",
        "\t\tstroke.Parent = card",
        "",
        "\t\t-- 画像：セル中央フィット（高さ優先・等比）",
        "\t\tlocal img = Instance.new(\"ImageLabel\")",
        "\t\timg.Name                   = \"Thumb\"",
        "\t\timg.BackgroundTransparency = 1",
        "\t\timg.BorderSizePixel        = 0",
        "\t\timg.ScaleType              = Enum.ScaleType.Fit",
        "\t\timg.AnchorPoint            = Vector2.new(0.5, 0.5)",
        "\t\timg.Position               = UDim2.fromScale(0.5, 0.50)",
        "\t\timg.Size                   = UDim2.fromScale(1, 0.82)",
        "\t\timg.ZIndex                 = 12",
        "\t\timg.Parent                 = card",
        "\t\tlocal ar = Instance.new(\"UIAspectRatioConstraint\")",
        "\t\tar.AspectRatio  = 0.62",
        "\t\tar.DominantAxis = Enum.DominantAxis.Height",
        "\t\tar.Parent = img",
        "",
        "\t\tlocal src = resolveImage(ent)",
        "\t\tif src then",
        "\t\t\timg.Image = src",
        "\t\telse",
        "\t\t\timg.Image = \"\"",
        "\t\t\timg.BackgroundTransparency = 0",
        "\t\t\timg.BackgroundColor3 = COLOR.imgFallback",
        "\t\tend",
        "",
        "\t\t-- 左下インフォ（「◯月/種族 名前」を1行）",
        "\t\tlocal info = Instance.new(\"TextLabel\")",
        "\t\tinfo.Name                   = \"Info\"",
        "\t\tinfo.BackgroundTransparency = 1",
        "\t\tinfo.TextXAlignment         = Enum.TextXAlignment.Left",
        "\t\tinfo.TextYAlignment         = Enum.TextYAlignment.Bottom",
        "\t\tinfo.AnchorPoint            = Vector2.new(0,1)",
        "\t\tinfo.Position               = UDim2.fromScale(0, 1)",
        "\t\tinfo.Size                   = UDim2.fromScale(1, 0.22)",
        "\t\tinfo.Font                   = Enum.Font.Gotham",
        "\t\tinfo.TextColor3             = COLOR.textMain",
        "\t\tinfo.TextScaled             = true",
        "\t\tinfo.TextWrapped            = false",
        "\t\tinfo.LineHeight             = 1",
        "\t\tinfo.TextTruncate           = Enum.TextTruncate.AtEnd",
        "\t\tinfo.ZIndex                 = 14",
        "\t\tlocal lim = Instance.new(\"UITextSizeConstraint\")",
        "\t\tlim.MaxTextSize = (F.cardInfoMax or F.cardInfo or 24) -- ★ 情報行の上限フォント（既定24px）",
        "\t\tlim.Parent = info",
        "\t\tlocal pad = Instance.new(\"UIPadding\")",
        "\t\tpad.PaddingLeft   = UDim.new(0, 10)",
        "\t\tpad.PaddingBottom = UDim.new(0, 8)",
        "\t\tpad.Parent = info",
        "\t\tdo",
        "\t\t\tlocal m = parseMonth(ent)",
        "\t\t\tlocal monthText = m and MONTH_JP[m] or \"?月\"",
        "\t\t\tlocal kindText  = kindToJp(ent.kind)",
        "\t\t\tlocal nameText  = tostring(ent.name or ent.code or ent.uid or \"?\")",
        "\t\t\tinfo.Text = string.format(\"%s/%s %s\", monthText, kindText, nameText)",
        "\t\tend",
        "\t\tinfo.Parent = card",
        "",
        "\t\t-- 不可選オーバーレイ（常に最前面へ）",
        "\t\tlocal canPick = (ent.eligible ~= false)",
        "\t\tcard:SetAttribute(\"canPick\", canPick)",
        "\t\tcard:SetAttribute(\"reason\", ent.reason or \"\")",
        "\t\tif not canPick then",
        "\t\t\tcard.AutoButtonColor = false",
        "",
        "\t\t\t-- ★ ZIndex をカード基準で強制的に最前面に",
        "\t\t\tlocal OVERLAY_Z = (card.ZIndex or 0) + 100",
        "",
        "\t\t\tlocal mask = Instance.new(\"Frame\")",
        "\t\t\tmask.Name = \"IneligibleMask\"",
        "\t\t\tmask.BackgroundColor3 = Color3.new(0,0,0)",
        "\t\t\tmask.BackgroundTransparency = 0.45",
        "\t\t\tmask.BorderSizePixel = 0",
        "\t\t\tmask.Size = UDim2.fromScale(1,1)",
        "\t\t\tmask.ZIndex = OVERLAY_Z",
        "\t\t\tmask.Active = false -- 入力はボタンへ通す",
        "\t\t\tmask.Parent = card",
        "",
        "\t\t\tlocal tag = Instance.new(\"TextLabel\")",
        "\t\t\ttag.BackgroundTransparency = 1",
        "\t\t\ttag.Size = UDim2.fromScale(1,0)",
        "\t\t\ttag.Position = UDim2.fromScale(0,0.44)",
        "\t\t\ttag.Text = \"対象外\"",
        "\t\t\ttag.Font = Enum.Font.GothamBold",
        "\t\t\ttag.TextScaled = true",
        "\t\t\ttag.TextColor3 = COLOR.overlayEdge",
        "\t\t\ttag.ZIndex = OVERLAY_Z + 1",
        "\t\t\tlocal tl = Instance.new(\"UITextSizeConstraint\")",
        "\t\t\ttl.MaxTextSize = ((Styles and Styles.fontSizes and Styles.fontSizes.inelMain) or 22)",
        "\t\t\ttl.Parent = tag",
        "\t\t\ttag.Parent = mask",
        "",
        "\t\t\tif ent.reason and ent.reason ~= \"\" then",
        "\t\t\t\tlocal sub = Instance.new(\"TextLabel\")",
        "\t\t\t\tsub.BackgroundTransparency = 1",
        "\t\t\t\tsub.Size = UDim2.fromScale(1,0)",
        "\t\t\t\tsub.Position = UDim2.fromScale(0,0.62)",
        "\t\t\t\tsub.Text = reasonToText(ent.reason) or tostring(ent.reason)",
        "\t\t\t\tsub.Font = Enum.Font.Gotham",
        "\t\t\t\tsub.TextScaled = true",
        "\t\t\t\tsub.TextColor3 = COLOR.overlayEdge",
        "\t\t\t\tsub.ZIndex = OVERLAY_Z + 1",
        "\t\t\t\tlocal sl = Instance.new(\"UITextSizeConstraint\")",
        "\t\t\t\tsl.MaxTextSize = ((Styles and Styles.fontSizes and Styles.fontSizes.inelSub) or 16)",
        "\t\t\t\tsl.Parent = sub",
        "\t\t\t\tsub.Parent = mask",
        "\t\t\tend",
        "\t\tend",
        "",
        "\t\treturn card",
        "\tend",
        "",
        "\t-- 選択ハイライト（枠だけ光らせる）",
        "\tfunction api.setCardSelected(btn: Instance, sel: boolean)",
        "\t\tif not (btn and btn:IsA(\"GuiObject\")) then return end",
        "\t\tlocal stroke = btn:FindFirstChild(\"SelStroke\")",
        "\t\tif stroke and stroke:IsA(\"UIStroke\") then",
        "\t\t\tstroke.Enabled = sel and true or false",
        "\t\tend",
        "\tend",
        "",
        "\tLOG.info(\"KitoPickRenderer ready\")",
        "\treturn api",
        "end",
        "",
        "return M"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [
          "SharedModules",
          "Logger",
          "styles",
          "KitoPickStyles"
        ],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 10,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/client/ui/components/renderers/ShopRenderer.lua",
      "ext": "lua",
      "binary": false,
      "size": 15267,
      "mtime": "2025-10-07T12:54:42.800466+00:00",
      "head": [
        "-- StarterPlayerScripts/UI/components/renderers/ShopRenderer.lua",
        "-- v0.9.SIMPLE-21 (6-cols + Hanafuda vertical ratio)",
        "--  - 横1列6個固定（相対）",
        "--  - セル高さは「横幅 / cardWH」で算出（cardWH=幅/高さ、既定0.57＝縦長）",
        "--  - 子ボタンはセル全面フィル、価格帯は高さ比率（既定0.12）",
        "--  - Remotes直叩きなし（handlers経由）",
        "",
        "local RS = game:GetService(\"ReplicatedStorage\")",
        "",
        "-- Shared",
        "local SharedModules = RS:WaitForChild(\"SharedModules\")",
        "local ShopFormat    = require(SharedModules:WaitForChild(\"ShopFormat\"))",
        "local Logger        = require(SharedModules:WaitForChild(\"Logger\"))",
        "local LOG           = Logger.scope(\"ShopRenderer\")",
        "",
        "-- Config",
        "local Config = RS:WaitForChild(\"Config\")",
        "local Locale = require(Config:WaitForChild(\"Locale\"))",
        "local Theme  = require(Config:WaitForChild(\"Theme\"))",
        "",
        "--========================",
        "-- CIユーティリティ",
        "--========================",
        "local function _lower(s) return string.lower(tostring(s or \"\")) end",
        "local function findAncestorCI(startInst: Instance, name: string): Instance?",
        "\tlocal target = _lower(name); local node = startInst",
        "\twhile node do if _lower(node.Name) == target then return node end; node = node.Parent end",
        "\treturn nil",
        "end",
        "local function findChildCI(parent: Instance?, name: string): Instance?",
        "\tif not parent then return nil end",
        "\tlocal target = _lower(name)",
        "\tfor _, ch in ipairs(parent:GetChildren()) do if _lower(ch.Name) == target then return ch end end",
        "\treturn nil",
        "end",
        "local function requireModuleCI(root: Instance?, path: {string}, waitSeconds: number?): any",
        "\tif not root then return nil end",
        "\tlocal node: Instance? = root",
        "\tfor _, seg in ipairs(path) do",
        "\t\tlocal found = findChildCI(node, seg)",
        "\t\tif (not found) and waitSeconds and waitSeconds > 0 then",
        "\t\t\tlocal deadline = os.clock() + waitSeconds",
        "\t\t\twhile (not found) and os.clock() < deadline do",
        "\t\t\t\tfound = findChildCI(node, seg) or node:FindFirstChild(seg)",
        "\t\t\t\tif not found then task.wait(0.05) end",
        "\t\t\tend",
        "\t\tend",
        "\t\tif not found then return nil end",
        "\t\tnode = found",
        "\tend",
        "\tif node and node:IsA(\"ModuleScript\") then",
        "\t\tlocal ok, mod = pcall(require, node)",
        "\t\tif ok then return mod end",
        "\tend",
        "\treturn nil",
        "end",
        "",
        "--========================",
        "-- Styles",
        "--========================",
        "local Styles do",
        "\tlocal ok, mod = pcall(function()",
        "\t\tlocal uiRoot = findAncestorCI(script, \"UI\")",
        "\t\tassert(uiRoot, \"UI root not found for ShopRenderer (case-insensitive)\")",
        "\t\treturn requireModuleCI(uiRoot, {\"styles\",\"ShopStyles\"}, 0.5)",
        "\tend)",
        "\tStyles = ok and mod or nil",
        "end",
        "",
        "--========================",
        "-- KitoAssets（遅延解決）",
        "--========================",
        "local KitoAssets",
        "local function _getKitoAssets()",
        "\tif KitoAssets ~= nil then return KitoAssets end",
        "\tlocal uiRoot = findAncestorCI(script, \"UI\"); if not uiRoot then return nil end",
        "\tlocal mod = requireModuleCI(uiRoot, {\"lib\",\"KitoAssets\"}, 0.5)",
        "\tif mod then KitoAssets = mod; return mod end",
        "\treturn nil",
        "end",
        "",
        "--========================",
        "-- 便利関数",
        "--========================",
        "local function _safeId(it:any): string",
        "\tlocal raw = tostring(it and it.id or \"Item\")",
        "\treturn (raw:gsub(\"[^%w_%-]\", \"_\"))",
        "end",
        "local function _getFaceName(it:any): string",
        "\tlocal ok, name = pcall(function() return ShopFormat.faceName(it) end)",
        "\treturn (ok and tostring(name or \"\")) or \"\"",
        "end",
        "local function _fmtPrice(v:any): string",
        "\tlocal ok, s = pcall(function() return ShopFormat.fmtPrice(v) end)",
        "\treturn (ok and tostring(s or \"\")) or tostring(v or \"\")",
        "end",
        "local function _title(it:any, lang:string): string",
        "\tlocal ok, s = pcall(function() return ShopFormat.itemTitle(it, lang) end)",
        "\treturn (ok and tostring(s or \"\")) or \"\"",
        "end",
        "local function _desc(it:any, lang:string): string",
        "\tlocal ok, s = pcall(function() return ShopFormat.itemDesc(it, lang) end)",
        "\treturn (ok and tostring(s or \"\")) or \"\"",
        "end",
        "local function _catLabel(it:any, lang:string): string",
        "\tlocal cat = tostring(it and it.category or \"-\")",
        "\treturn Locale.t(lang, \"SHOP_UI_LABEL_CATEGORY\"):format(cat)",
        "end",
        "local function _priceLabel(it:any, lang:string): string",
        "\treturn Locale.t(lang, \"SHOP_UI_LABEL_PRICE\"):format(_fmtPrice(it and it.price))",
        "end",
        "local function _computeAffordable(mon:any, price:any): boolean",
        "\tlocal m = tonumber(mon or 0) or 0; local p = tonumber(price or 0) or 0",
        "\treturn m >= p",
        "end",
        "local function _styleColor(key:string, fallback: Color3): Color3",
        "\tif Styles and Styles.colors and typeof(Styles.colors[key]) == \"Color3\" then return Styles.colors[key] end",
        "\tlocal map = { panelStroke=\"PanelStroke\", badgeBg=\"BadgeBg\", badgeStroke=\"BadgeStroke\",",
        "\t\ttext=\"TextDefault\", cardBg=\"PanelBg\", selectedStroke=\"SelectedStroke\" }",
        "\tlocal themeKey = map[key]",
        "\tif themeKey and Theme and Theme.COLORS and typeof(Theme.COLORS[themeKey])==\"Color3\" then",
        "\t\treturn Theme.COLORS[themeKey]",
        "\tend",
        "\treturn fallback",
        "end",
        "local function addCorner(gui: Instance, px: number?)",
        "\tpcall(function()",
        "\t\tlocal c = Instance.new(\"UICorner\")",
        "\t\tlocal r = px or (Styles and Styles.sizes and Styles.sizes.panelCorner) or Theme.PANEL_RADIUS or 10",
        "\t\tc.CornerRadius = UDim.new(0, r); c.Parent = gui",
        "\tend)",
        "end",
        "local function addStroke(gui: Instance, color: Color3?, thickness: number?, transparency: number?)",
        "\tlocal ok, stroke = pcall(function()",
        "\t\tlocal s = Instance.new(\"UIStroke\")",
        "\t\ts.Thickness = thickness or 1",
        "\t\ts.Color = color or _styleColor(\"panelStroke\", Color3.fromRGB(70,70,80))",
        "\t\ts.Transparency = transparency or 0",
        "\t\ts.Parent = gui; return s",
        "\tend)",
        "\treturn ok and stroke or nil",
        "end",
        "",
        "--========================",
        "-- Grid（相対・6列固定、縦長カード比）",
        "--========================",
        "local _gridConns = setmetatable({}, { __mode = \"k\" })",
        "local FORCE_COLS = 6  -- 横1列6個",
        "",
        "local function _computeGridMetrics(parent: Instance)",
        "\tlocal sz = parent.AbsoluteSize",
        "\tlocal w, h = math.max(1, sz.X), math.max(1, sz.Y)",
        "\tlocal arParent = w / h",
        "",
        "\t-- ギャップとカード比は Styles で上書き可能",
        "\tlocal gapXScale = (Styles and Styles.sizes and Styles.sizes.gridGapScale) or 0.02",
        "\t-- 幅/高さ（縦長なので 1 未満） : 既定 0.57 ≒ 花札",
        "\tlocal cardWH    = (Styles and Styles.ratio and (Styles.ratio.cardWH or Styles.ratio.cardAspect))",
        "\t                   or 0.57",
        "",
        "\tlocal cols = FORCE_COLS",
        "\tlocal cellWScale = (1 - gapXScale * (cols - 1)) / cols",
        "\t-- 高さ = (セル幅 / cardWH) / 親高 = セル幅スケール * (親幅/親高) / cardWH",
        "\tlocal cellHScale = math.clamp(cellWScale * (arParent / cardWH), 0.05, 1)",
        "\tlocal gapYScale  = math.min(gapXScale * (arParent / cardWH), 0.25)",
        "",
        "\treturn {",
        "\t\tcellWScale = cellWScale,",
        "\t\tcellHScale = cellHScale,",
        "\t\tgapXScale  = gapXScale,",
        "\t\tgapYScale  = gapYScale,",
        "\t\tcardWH     = cardWH,",
        "\t}",
        "end",
        "",
        "local function _ensureGrid(parent: Instance)",
        "\tlocal grid = parent:FindFirstChildOfClass(\"UIGridLayout\")",
        "\tif not grid then",
        "\t\tgrid = Instance.new(\"UIGridLayout\")",
        "\t\tgrid.Name = \"Grid\"",
        "\t\tgrid.FillDirection = Enum.FillDirection.Horizontal",
        "\t\tgrid.HorizontalAlignment = Enum.HorizontalAlignment.Center",
        "\t\tgrid.VerticalAlignment   = Enum.VerticalAlignment.Top",
        "\t\tgrid.SortOrder = Enum.SortOrder.LayoutOrder",
        "\t\tgrid.Parent = parent",
        "\tend",
        "",
        "\tlocal function apply()",
        "\t\tlocal m = _computeGridMetrics(parent)",
        "\t\tgrid.CellPadding = UDim2.new(m.gapXScale, 0, m.gapYScale, 0)",
        "\t\tgrid.CellSize    = UDim2.new(m.cellWScale, 0, m.cellHScale, 0)",
        "\tend",
        "\tapply()",
        "",
        "\tif _gridConns[parent] == nil then",
        "\t\t_gridConns[parent] = parent:GetPropertyChangedSignal(\"AbsoluteSize\"):Connect(apply)",
        "\tend",
        "end",
        "",
        "--========================",
        "-- KITOフルアート",
        "--========================",
        "local function _applyKitoFullArt(btn: Instance, priceBand: Instance, it:any): boolean",
        "\tif not (btn and btn:IsA(\"GuiObject\")) then return false end",
        "\tif not it or tostring(it.category) ~= \"kito\" then return false end",
        "",
        "\tlocal KA = _getKitoAssets()",
        "\tif not KA then",
        "\t\tlocal alreadyRetried = (typeof(btn.GetAttribute) == \"function\") and (btn:GetAttribute(\"kitoArtRetry\") == true)",
        "\t\tif not alreadyRetried then",
        "\t\t\tif typeof(btn.SetAttribute) == \"function\" then btn:SetAttribute(\"kitoArtRetry\", true) end",
        "\t\t\ttask.delay(0.30, function()",
        "\t\t\t\tlocal KA2 = _getKitoAssets()",
        "\t\t\t\tif KA2 then local ok2 = _applyKitoFullArt(btn, priceBand, it); if ok2 and btn:IsA(\"TextButton\") then btn.Text = \"\" end end",
        "\t\t\tend)",
        "\t\tend",
        "\t\tLOG.debug(\"[kito] assets not ready; will retry once\"); return false",
        "\tend",
        "",
        "\tlocal effectCanon = tostring(it.effect or \"\")",
        "\tlocal okDefs, ShopDefs = pcall(function() return require(SharedModules:WaitForChild(\"ShopDefs\")) end)",
        "\tif okDefs and ShopDefs and type(ShopDefs.toCanonicalEffectId) == \"function\" then",
        "\t\tlocal ok, canon = pcall(ShopDefs.toCanonicalEffectId, effectCanon)",
        "\t\tif ok and canon and canon ~= \"\" then effectCanon = canon end",
        "\tend",
        "",
        "\tlocal icon; local okGet, res = pcall(function() return KA.getIcon(effectCanon) end)",
        "\tif okGet then icon = res end",
        "\tif not icon or icon == \"\" then LOG.warn(\"[kito] icon not found for effect=%s\", tostring(effectCanon)); return false end",
        "",
        "\tfor _, n in ipairs({\"KitoIcon\",\"KitoArt\"}) do local x=btn:FindFirstChild(n); if x then x:Destroy() end end",
        "",
        "\tlocal bandScale = 0; if priceBand and priceBand:IsA(\"GuiObject\") then bandScale = (priceBand.Size.Y.Scale or 0) end",
        "",
        "\tlocal art = Instance.new(\"ImageLabel\")",
        "\tart.Name = \"KitoArt\"; art.Image = icon; art.BackgroundTransparency = 1; art.ScaleType = Enum.ScaleType.Fit",
        "\tart.Size = UDim2.new(1, 0, 1 - bandScale, 0); art.Position = UDim2.new(0, 0, 0, 0)",
        "\tart.ZIndex = (btn.ZIndex or 0) + 1; art.Parent = btn",
        "\tLOG.debug(\"[kito] full-art applied\"); return true",
        "end",
        "",
        "local M = {}",
        "",
        "--========================",
        "-- セル生成",
        "--========================",
        "function M.renderCell(parent: Instance, nodes, it: any, lang: string, mon: number, handlers)",
        "\tif not (parent and parent:IsA(\"GuiObject\")) then return nil end",
        "\tlang = tostring(lang or \"en\"); mon = tonumber(mon or 0) or 0; handlers = handlers or {}",
        "\tlocal TweenService = game:GetService(\"TweenService\")",
        "",
        "\t-- 相対グリッド（6列固定）",
        "\t_ensureGrid(parent)",
        "",
        "\t-- ボタン（セル全面フィル）",
        "\tlocal btn = Instance.new(\"TextButton\")",
        "\tbtn.Name = _safeId(it)",
        "\tbtn.Size = UDim2.fromScale(1, 1)",
        "\tbtn.AutomaticSize = Enum.AutomaticSize.None",
        "",
        "\t-- 顔テキスト（タイトル→faceName）",
        "\tlocal faceText = _title(it, lang); if faceText == \"\" then faceText = _getFaceName(it) end",
        "\tbtn.Text = faceText; btn.TextWrapped = true; btn.TextScaled = true",
        "\tdo local max = Instance.new(\"UITextSizeConstraint\")",
        "\t\tmax.MaxTextSize = (Styles and Styles.fontSizes and Styles.fontSizes.cellTextMax) or 24; max.Parent = btn",
        "\tend",
        "\tbtn.TextXAlignment = Enum.TextXAlignment.Center; btn.TextYAlignment = Enum.TextYAlignment.Center",
        "",
        "\tbtn.Font = Enum.Font.GothamBold",
        "\tbtn.TextColor3 = _styleColor(\"text\", Color3.fromRGB(240,240,240))",
        "\tbtn.BackgroundColor3 = _styleColor(\"cardBg\", Color3.fromRGB(35,38,46))",
        "\tbtn.AutoButtonColor  = true",
        "\tbtn.ZIndex = (Styles and Styles.z and Styles.z.cells) or 10",
        "\tbtn.Parent = parent",
        "\taddCorner(btn, (Styles and Styles.sizes and Styles.sizes.panelCorner) or Theme.PANEL_RADIUS or 10)",
        "\tlocal stroke = addStroke(btn, _styleColor(\"panelStroke\", Color3.fromRGB(70,70,80)), 1, 0)",
        "",
        "\t-- アスペクト拘束（縦長カード：幅/高さ = cardWH）",
        "\tdo",
        "\t\tlocal cardWH = (Styles and Styles.ratio and (Styles.ratio.cardWH or Styles.ratio.cardAspect)) or 0.57",
        "\t\tlocal asp = Instance.new(\"UIAspectRatioConstraint\")",
        "\t\tasp.AspectRatio = cardWH        -- 幅/高さ",
        "\t\tasp.DominantAxis = Enum.DominantAxis.Width",
        "\t\tasp.Parent = btn",
        "\tend",
        "",
        "\t-- 価格バンド（高さ比率）",
        "\tlocal priceBandScale = (Styles and Styles.ratio and Styles.ratio.priceBand) or 0.12",
        "\tlocal priceBand = Instance.new(\"TextLabel\")",
        "\tpriceBand.Name = \"Price\"",
        "\tpriceBand.BackgroundColor3 = _styleColor(\"badgeBg\", Color3.fromRGB(25,28,36))",
        "\tpriceBand.Size = UDim2.new(1,0, priceBandScale, 0)",
        "\tpriceBand.Position = UDim2.new(0,0, 1 - priceBandScale, 0)",
        "\tpriceBand.Text = _fmtPrice(it and it.price)",
        "\tpriceBand.TextSize = (Styles and Styles.fontSizes and Styles.fontSizes.price) or 14",
        "\tpriceBand.Font = Enum.Font.Gotham",
        "\tpriceBand.TextColor3 = Color3.fromRGB(245,245,245)",
        "\tpriceBand.ZIndex = (Styles and Styles.z and Styles.z.price) or 11",
        "\tpriceBand.Active = false; priceBand.Selectable = false; priceBand.Parent = btn",
        "\taddStroke(priceBand, _styleColor(\"badgeStroke\", Color3.fromRGB(60,65,80)), 1, 0.2)"
      ],
      "truncated": true,
      "analysis": {
        "waitForChild": [
          "SharedModules",
          "ShopFormat",
          "Logger",
          "Config",
          "Locale",
          "Theme",
          "ShopDefs"
        ],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 1,
          "fromOffset": 0,
          "new": 6
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": true,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/client/ui/components/renderers/TakenRenderer.lua",
      "ext": "lua",
      "binary": false,
      "size": 8583,
      "mtime": "2025-10-07T17:02:43.544345+00:00",
      "head": [
        "-- StarterPlayerScripts/UI/components/renderers/TakenRenderer.lua",
        "-- v1.1.0 (Responsive: keep current look, size by parent)",
        "--  - 現在のUI（ラベルピル + 色ドット + 1/3オーバーラップのカード列）を維持",
        "--  - すべて親サイズから相対計算（タグH/タグW/行H/余白/ドットサイズ等）",
        "--  - 親の AbsoluteSize 変化で自動再レイアウト",
        "--  - 言語は \"ja\"/\"en\" を LocaleUtil から取得",
        "",
        "local RS        = game:GetService(\"ReplicatedStorage\")",
        "local Config    = RS:WaitForChild(\"Config\")",
        "local Theme     = require(Config:WaitForChild(\"Theme\"))",
        "local LocaleUtil= require(RS:WaitForChild(\"SharedModules\"):WaitForChild(\"LocaleUtil\"))",
        "",
        "-- CardNode（カード1枚）",
        "local UI_ROOT   = script.Parent.Parent",
        "local CardNode  = require(UI_ROOT:WaitForChild(\"CardNode\"))",
        "",
        "local M = {}",
        "",
        "-- ========= lang / labels =========",
        "local CATEGORY_JA = { bright = \"光\",     seed = \"タネ\",   ribbon = \"短冊\",  chaff = \"カス\",   kasu=\"カス\" }",
        "local CATEGORY_EN = { bright = \"Bright\", seed = \"Seed\",   ribbon = \"Ribbon\", chaff = \"Chaff\", kasu=\"Chaff\" }",
        "local ORDER       = { \"bright\", \"seed\", \"ribbon\", \"chaff\" }",
        "",
        "local function curLang(): string",
        "\treturn LocaleUtil.safeGlobal() or LocaleUtil.pickInitial() or \"en\"",
        "end",
        "",
        "-- ========= colors =========",
        "local function kindColor(kind: string): Color3",
        "\tif Theme and Theme.colorForKind then",
        "\t\tlocal ok, c = pcall(function() return Theme.colorForKind(kind) end)",
        "\t\tif ok and typeof(c) == \"Color3\" then return c end",
        "\tend",
        "\tlocal C = Theme.COLORS or {}",
        "\treturn C.BadgeStroke or C.SelectedStroke or C.TextDefault or Color3.fromRGB(200,200,200)",
        "end",
        "",
        "-- ========= utils =========",
        "local function clearAll(parent: Instance)",
        "\tfor _, ch in ipairs(parent:GetChildren()) do ch:Destroy() end",
        "end",
        "local function monthOf(code: string)",
        "\tlocal m = tonumber(string.sub(tostring(code or \"\"), 1, 2)); return m or 99",
        "end",
        "local function widthFromHeight(h: number): number",
        "\treturn math.floor(h * (63/88)) -- 花札の実寸比",
        "end",
        "",
        "-- responsiveデータ保持とresize接続",
        "local _store  = setmetatable({}, { __mode=\"k\" }) -- parent -> takenCards",
        "local _conns  = setmetatable({}, { __mode=\"k\" }) -- parent -> RBXScriptConnection",
        "",
        "-- ========= 本体描画（親サイズに相対） =========",
        "local function paint(parent: Instance, takenCards: {any})",
        "\tclearAll(parent)",
        "",
        "\tlocal W = math.max(1, parent.AbsoluteSize.X)",
        "\tlocal H = math.max(1, parent.AbsoluteSize.Y)",
        "",
        "\t-- ---- 相対寸法（現状の見た目に寄せてチューニング） ----",
        "\t-- 横幅基準で安定するように多くをWから算出、必要に応じてHでクランプ",
        "\tlocal padX       = math.floor(W * 0.035)                      -- 左右余白",
        "\tlocal sectionGap = math.floor(H * 0.018)                      -- セクション間",
        "\tlocal tagH       = math.floor(math.clamp(H * 0.055, 18, 36))  -- タグの高さ",
        "\tlocal tagW       = math.floor(math.clamp(W * 0.44, 96, 180))  -- タグの幅（ピル）",
        "\tlocal dotSize    = math.floor(tagH * 0.48)                    -- 色ドットの直径",
        "\tlocal gapBelow   = math.floor(tagH * 0.50)                    -- タグ下のスペース",
        "\tlocal rowH       = math.floor(math.clamp(W * 0.25, 48, 120))  -- カード列の高さ",
        "\tlocal radiusPx   = tonumber(Theme.PANEL_RADIUS) or 10",
        "",
        "\t-- カード重なり",
        "\tlocal overlap = (Theme.RATIOS and Theme.RATIOS.TAKEN_OVERLAP) or 0.33",
        "",
        "\t-- 言語マップ",
        "\tlocal MAP = (curLang()==\"ja\") and CATEGORY_JA or CATEGORY_EN",
        "",
        "\t-- バケット化＆1月→12月でソート",
        "\tlocal buckets = { bright={}, seed={}, ribbon={}, chaff={} }",
        "\tfor _, c in ipairs(takenCards or {}) do",
        "\t\tlocal k = tostring(c.kind or \"chaff\"):lower()",
        "\t\tif not buckets[k] then k = \"chaff\" end",
        "\t\ttable.insert(buckets[k], c)",
        "\tend",
        "\tfor _, arr in pairs(buckets) do",
        "\t\ttable.sort(arr, function(a,b) return monthOf(a.code) < monthOf(b.code) end)",
        "\tend",
        "",
        "\t-- 使用高さ（CanvasSize用）",
        "\tlocal usedY   = 0",
        "\tlocal C       = Theme.COLORS or {}",
        "\tlocal parentZ = (parent:IsA(\"GuiObject\") and parent.ZIndex) or 1",
        "",
        "\tfor _, kind in ipairs(ORDER) do",
        "\t\tlocal arr = buckets[kind] or {}",
        "\t\tlocal title = MAP[kind] or kind",
        "",
        "\t\t-- セクション（タグ + 列）",
        "\t\tlocal sectionH = tagH + gapBelow + rowH",
        "\t\tlocal section = Instance.new(\"Frame\")",
        "\t\tsection.Name = \"Section_\"..kind",
        "\t\tsection.BackgroundTransparency = 1",
        "\t\tsection.Size = UDim2.new(1, -padX*2, 0, sectionH)",
        "\t\tsection.Position = UDim2.new(0, padX, 0, usedY)",
        "\t\tsection.ZIndex = parentZ + 2",
        "\t\tsection.Parent = parent",
        "",
        "\t\t-- タグ（不透明ピル + ストローク + 色ドット + テキスト）",
        "\t\tdo",
        "\t\t\tlocal tag = Instance.new(\"Frame\")",
        "\t\t\ttag.Name = \"LabelTag\"",
        "\t\t\ttag.BackgroundTransparency = 0",
        "\t\t\ttag.BackgroundColor3 = C.PanelBg or Color3.fromRGB(32,34,40)",
        "\t\t\ttag.Size = UDim2.new(0, tagW, 0, tagH)",
        "\t\t\ttag.Position = UDim2.fromOffset(0,0)",
        "\t\t\ttag.ZIndex = section.ZIndex + 1",
        "\t\t\ttag.Parent = section",
        "",
        "\t\t\tlocal cr = Instance.new(\"UICorner\"); cr.CornerRadius = UDim.new(0, radiusPx); cr.Parent = tag",
        "\t\t\tlocal st = Instance.new(\"UIStroke\"); st.Color = C.PanelStroke or Color3.fromRGB(70,70,80); st.Thickness = 1; st.Parent = tag",
        "",
        "\t\t\tlocal dot = Instance.new(\"Frame\")",
        "\t\t\tdot.Name = \"KindDot\"",
        "\t\t\tdot.BackgroundColor3 = kindColor(kind)",
        "\t\t\tdot.BorderSizePixel  = 0",
        "\t\t\tdot.AnchorPoint = Vector2.new(0,0.5)",
        "\t\t\tdot.Position = UDim2.fromOffset(8, tagH*0.5)",
        "\t\t\tdot.Size     = UDim2.fromOffset(dotSize, dotSize)",
        "\t\t\tdot.ZIndex   = tag.ZIndex + 1",
        "\t\t\tdot.Parent   = tag",
        "\t\t\tlocal dcr = Instance.new(\"UICorner\"); dcr.CornerRadius = UDim.new(1,0); dcr.Parent = dot",
        "",
        "\t\t\tlocal lab = Instance.new(\"TextLabel\")",
        "\t\t\tlab.Name = \"Text\"",
        "\t\t\tlab.BackgroundTransparency = 1",
        "\t\t\tlab.TextXAlignment = Enum.TextXAlignment.Left",
        "\t\t\tlab.TextYAlignment = Enum.TextYAlignment.Center",
        "\t\t\tlab.AnchorPoint = Vector2.new(0,0.5)",
        "\t\t\tlab.Position = UDim2.fromOffset(8 + dotSize + 8, tagH*0.5)",
        "\t\t\tlab.Size     = UDim2.new(1, -(8 + dotSize + 8 + 8), 1, 0)",
        "\t\t\tlab.Font     = Enum.Font.GothamBold",
        "\t\t\tlab.TextColor3 = C.TextDefault or Color3.fromRGB(235,235,238)",
        "\t\t\tlab.TextScaled = true",
        "\t\t\tlocal lim = Instance.new(\"UITextSizeConstraint\"); lim.MaxTextSize = 18; lim.Parent = lab",
        "\t\t\tlab.Text = string.format(\"%s ×%d\", title, #arr)",
        "\t\t\tlab.ZIndex = tag.ZIndex + 1",
        "\t\t\tlab.Parent = tag",
        "\t\tend",
        "",
        "\t\t-- カード行（1/3オーバーラップ）",
        "\t\tdo",
        "\t\t\tlocal row = Instance.new(\"Frame\")",
        "\t\t\trow.Name = \"CardsRow\"",
        "\t\t\trow.BackgroundTransparency = 1",
        "\t\t\trow.Size = UDim2.new(1, 0, 0, rowH)",
        "\t\t\trow.Position = UDim2.fromOffset(0, tagH + gapBelow)",
        "\t\t\trow.ZIndex = section.ZIndex + 2",
        "\t\t\trow.Parent = section",
        "",
        "\t\t\tlocal cardH = rowH - 2",
        "\t\t\tlocal cardW = widthFromHeight(cardH)",
        "\t\t\tlocal stepX = math.max(1, math.floor(cardW * (1 - overlap)))",
        "",
        "\t\t\tlocal x = 0",
        "\t\t\tlocal z = row.ZIndex + 1",
        "\t\t\tfor _, card in ipairs(arr) do",
        "\t\t\t\tlocal node",
        "\t\t\t\tif type(CardNode) == \"table\" and type(CardNode.create) == \"function\" then",
        "\t\t\t\t\tnode = CardNode.create(row, card.code, {",
        "\t\t\t\t\t\tanchor = Vector2.new(0, 0),",
        "\t\t\t\t\t\tpos    = UDim2.fromOffset(x, 1),",
        "\t\t\t\t\t\tsize   = UDim2.fromOffset(cardW, cardH),",
        "\t\t\t\t\t\tzindex = z,",
        "\t\t\t\t\t})",
        "\t\t\t\telseif type(CardNode) == \"function\" then",
        "\t\t\t\t\tnode = CardNode(row, card.code, {",
        "\t\t\t\t\t\tanchor = Vector2.new(0, 0),",
        "\t\t\t\t\t\tpos    = UDim2.fromOffset(x, 1),",
        "\t\t\t\t\t\tsize   = UDim2.fromOffset(cardW, cardH),",
        "\t\t\t\t\t\tzindex = z,",
        "\t\t\t\t\t})",
        "\t\t\t\telseif type(CardNode) == \"table\" and type(CardNode.new) == \"function\" then",
        "\t\t\t\t\tnode = CardNode.new(row, card.code, {",
        "\t\t\t\t\t\tanchor = Vector2.new(0, 0),",
        "\t\t\t\t\t\tpos    = UDim2.fromOffset(x, 1),",
        "\t\t\t\t\t\tsize   = UDim2.fromOffset(cardW, cardH),",
        "\t\t\t\t\t\tzindex = z,",
        "\t\t\t\t\t})",
        "\t\t\t\tend",
        "\t\t\t\tx += stepX",
        "\t\t\t\tz += 1",
        "\t\t\tend",
        "\t\tend",
        "",
        "\t\tusedY += sectionH + sectionGap",
        "\tend",
        "",
        "\t-- ScrollingFrame対応（横スクロール不要）",
        "\tif parent:IsA(\"ScrollingFrame\") then",
        "\t\tparent.ScrollingDirection = Enum.ScrollingDirection.Y",
        "\t\tparent.CanvasSize = UDim2.fromOffset(0, usedY)",
        "\t\tparent.ScrollBarThickness = (Theme.SIZES and Theme.SIZES.scrollBar) or 8",
        "\tend",
        "end",
        "",
        "-- ========= 公開API =========",
        "function M.renderTaken(parent: Instance, takenCards: {any})",
        "\tif not parent or not parent.Destroy then return end",
        "\t_store[parent] = takenCards",
        "",
        "\t-- 初回描画",
        "\tpaint(parent, takenCards)",
        "",
        "\t-- 既存のリサイズ接続は張り替え",
        "\tif _conns[parent] then",
        "\t\t_conns[parent]:Disconnect()",
        "\t\t_conns[parent] = nil",
        "\tend",
        "\t_conns[parent] = parent:GetPropertyChangedSignal(\"AbsoluteSize\"):Connect(function()",
        "\t\tlocal data = _store[parent]",
        "\t\tif data then paint(parent, data) end",
        "\tend)",
        "end",
        "",
        "return M"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [
          "Config",
          "Theme",
          "SharedModules",
          "LocaleUtil",
          "CardNode"
        ],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 12,
          "new": 5
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 2
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/client/ui/components/ResultModal.lua",
      "ext": "lua",
      "binary": false,
      "size": 11673,
      "mtime": "2025-10-03T02:32:57.629517+00:00",
      "head": [
        "-- StarterPlayerScripts/UI/components/ResultModal.lua",
        "-- ステージ結果モーダル：2択（こいこい／ホーム）＋ワンボタン（final）",
        "-- v0.9.8: 12-month対応／解禁ロジック撤廃／\"next\",\"save\"削除 → \"koikoi\",\"home\" に集約",
        "--         Theme 完全デフォルト化（配色は Theme を参照）",
        "",
        "local M = {}",
        "",
        "-- 型（Luau）",
        "type NavIF = { next: (NavIF, string) -> () }",
        "type Handlers = { home: (() -> ())?, koikoi: (() -> ())?, final: (() -> ())? }",
        "type ResultAPI = {",
        "\thide: (ResultAPI) -> (),",
        "\t-- 2択：こいこい/ホーム（9/10/11/12月のクリア時に利用）",
        "\tshow: (ResultAPI, data: {",
        "\t\trewardBank: number?,        -- 付与両（既定=2）",
        "\t\ttitleText: string?,         -- タイトル上書き（省略時は自動生成）",
        "\t\tdescText: string?,          -- 説明上書き（省略時は自動生成）",
        "\t\tnextMonth: number?,         -- こいこい先の月（例: 10）",
        "\t\tnextGoal: number?,          -- こいこい先の目標スコア",
        "\t}?) -> (),",
        "\t-- ワンボタン（完全終了時 12月想定）",
        "\tshowFinal: (ResultAPI, titleText: string?, descText: string?, buttonText: string?, onClick: (() -> ())?) -> (),",
        "\tsetLocked: (ResultAPI, boolean) -> (), -- こいこいボタンのロックだけ提供",
        "\ton: (ResultAPI, Handlers) -> (),",
        "\tbindNav: (ResultAPI, Nav: NavIF) -> (),",
        "\tdestroy: (ResultAPI) -> (),",
        "}",
        "",
        "-- Theme 参照",
        "local ReplicatedStorage = game:GetService(\"ReplicatedStorage\")",
        "local Config = ReplicatedStorage:WaitForChild(\"Config\")",
        "local Theme  = require(Config:WaitForChild(\"Theme\"))",
        "",
        "--==================================================",
        "-- 内部：ボタンのロック見た目",
        "--==================================================",
        "local function setLockedVisual(button: TextButton, locked: boolean)",
        "\tif not button then return end",
        "\t-- 初回に元色を保存",
        "\tif button:GetAttribute(\"OrigBG3\") == nil then",
        "\t\tbutton:SetAttribute(\"OrigBG3\", button.BackgroundColor3)",
        "\tend",
        "\tif button:GetAttribute(\"OrigTX3\") == nil then",
        "\t\tbutton:SetAttribute(\"OrigTX3\", button.TextColor3)",
        "\tend",
        "\tif button:GetAttribute(\"OrigText\") == nil then",
        "\t\tbutton:SetAttribute(\"OrigText\", button.Text)",
        "\tend",
        "",
        "\tlocal baseText = button:GetAttribute(\"OrigText\") or button.Text",
        "\tif locked then",
        "\t\tbutton.AutoButtonColor = false",
        "\t\tbutton:SetAttribute(\"locked\", true)",
        "\t\t-- グレー系（Cancel系）に寄せる",
        "\t\tlocal C = Theme.COLORS",
        "\t\tbutton.BackgroundColor3 = (C and (C.CancelBtnBg or C.PanelStroke)) or Color3.fromRGB(200,200,200)",
        "\t\tbutton.TextColor3       = (C and (C.CancelBtnText or C.TextDefault)) or Color3.fromRGB(40,40,40)",
        "\t\tbutton.Text = tostring(baseText) .. \"  🔒\"",
        "\telse",
        "\t\tbutton.AutoButtonColor = true",
        "\t\tbutton:SetAttribute(\"locked\", false)",
        "\t\t-- 元色に戻す",
        "\t\tlocal bg = button:GetAttribute(\"OrigBG3\")",
        "\t\tlocal tx = button:GetAttribute(\"OrigTX3\")",
        "\t\tif typeof(bg) == \"Color3\" then button.BackgroundColor3 = bg end",
        "\t\tif typeof(tx) == \"Color3\" then button.TextColor3       = tx end",
        "\t\tbutton.Text = tostring(baseText)",
        "\tend",
        "end",
        "",
        "--==================================================",
        "-- Factory",
        "--==================================================",
        "function M.create(parent: Instance): ResultAPI",
        "\t-------------------------------- オーバーレイ",
        "\tlocal overlay = Instance.new(\"TextButton\")",
        "\toverlay.Name = \"ResultBackdrop\"",
        "\toverlay.Parent = parent",
        "\toverlay.Size = UDim2.fromScale(1,1)",
        "\toverlay.AutoButtonColor = false",
        "\toverlay.Text = \"\"",
        "\toverlay.Visible = false",
        "\toverlay.ZIndex = 99",
        "",
        "\tdo",
        "\t\tlocal C = Theme.COLORS",
        "\t\toverlay.BackgroundColor3 = (C and C.OverlayBg) or Color3.fromRGB(0,0,0)",
        "\t\toverlay.BackgroundTransparency = (Theme.overlayBgT ~= nil) and Theme.overlayBgT or 0.35",
        "\tend",
        "",
        "\t-------------------------------- 本体フレーム",
        "\tlocal modal = Instance.new(\"Frame\")",
        "\tmodal.Name = \"ResultModal\"",
        "\tmodal.Parent = parent",
        "\tmodal.Visible = false",
        "\tmodal.Size = UDim2.new(0, 520, 0, 260)",
        "\tmodal.Position = UDim2.new(0.5, 0, 0.5, 0)",
        "\tmodal.AnchorPoint = Vector2.new(0.5, 0.5)",
        "\tmodal.ZIndex = 100",
        "",
        "\tdo",
        "\t\tlocal C = Theme.COLORS",
        "\t\tmodal.BackgroundColor3 = (C and C.PanelBg) or Color3.fromRGB(255,255,255)",
        "\t\tlocal corner = Instance.new(\"UICorner\")",
        "\t\tcorner.CornerRadius = UDim.new(0, Theme.PANEL_RADIUS or 10)",
        "\t\tcorner.Parent = modal",
        "\t\tlocal stroke = Instance.new(\"UIStroke\")",
        "\t\tstroke.Color = (C and C.PanelStroke) or Color3.fromRGB(210,210,210)",
        "\t\tstroke.Thickness = 1",
        "\t\tstroke.Parent = modal",
        "\tend",
        "",
        "\t-------------------------------- タイトル／説明",
        "\tlocal title = Instance.new(\"TextLabel\")",
        "\ttitle.Name = \"Title\"",
        "\ttitle.Parent = modal",
        "\ttitle.BackgroundTransparency = 1",
        "\ttitle.TextScaled = true",
        "\ttitle.Size = UDim2.new(1,-20,0,48)",
        "\ttitle.Position = UDim2.new(0.5,0,0,16)",
        "\ttitle.AnchorPoint = Vector2.new(0.5,0)",
        "\ttitle.TextXAlignment = Enum.TextXAlignment.Center",
        "\ttitle.Font = Enum.Font.GothamBold",
        "\ttitle.TextWrapped = true",
        "\ttitle.RichText = true",
        "\ttitle.ZIndex = 101",
        "\ttitle.Text = \"結果\"",
        "\ttitle.TextColor3 = (Theme.COLORS and Theme.COLORS.TextDefault) or Color3.fromRGB(25,25,25)",
        "",
        "\tlocal desc = Instance.new(\"TextLabel\")",
        "\tdesc.Name = \"Desc\"",
        "\tdesc.Parent = modal",
        "\tdesc.BackgroundTransparency = 1",
        "\tdesc.TextScaled = true",
        "\tdesc.Size = UDim2.new(1,-40,0,32)",
        "\tdesc.Position = UDim2.new(0.5,0,0,70)",
        "\tdesc.AnchorPoint = Vector2.new(0.5,0)",
        "\tdesc.TextXAlignment = Enum.TextXAlignment.Center",
        "\tdesc.TextWrapped = true",
        "\tdesc.RichText = true",
        "\tdesc.ZIndex = 101",
        "\tdesc.Text = \"\"",
        "\tdesc.TextColor3 = (Theme.COLORS and Theme.COLORS.TextDefault) or Color3.fromRGB(25,25,25)",
        "",
        "\t-------------------------------- 2択ボタン行（こいこい／ホーム）",
        "\tlocal btnRow = Instance.new(\"Frame\")",
        "\tbtnRow.Name = \"BtnRow\"",
        "\tbtnRow.Parent = modal",
        "\tbtnRow.Size = UDim2.new(1,-40,0,64)",
        "\tbtnRow.Position = UDim2.new(0.5,0,0,120)",
        "\tbtnRow.AnchorPoint = Vector2.new(0.5,0)",
        "\tbtnRow.BackgroundTransparency = 1",
        "\tbtnRow.ZIndex = 101",
        "\tlocal layout = Instance.new(\"UIListLayout\", btnRow)",
        "\tlayout.FillDirection = Enum.FillDirection.Horizontal",
        "\tlayout.HorizontalAlignment = Enum.HorizontalAlignment.Center",
        "\tlayout.Padding = UDim.new(0, 16)",
        "",
        "\tlocal function mkBtn(text: string, style: \"primary\" | \"neutral\" | \"warn\" | nil): TextButton",
        "\t\tlocal C = Theme.COLORS",
        "\t\tlocal b = Instance.new(\"TextButton\")",
        "\t\tb.Size = UDim2.new(0.45, 0, 1, 0)",
        "\t\tb.Text = text",
        "\t\tb.AutoButtonColor = true",
        "\t\tb.TextWrapped = true",
        "\t\tb.RichText = true",
        "\t\tb.ZIndex = 102",
        "\t\tb.Parent = btnRow",
        "",
        "\t\tlocal bg, tx",
        "\t\tif style == \"primary\" then",
        "\t\t\tbg = C and C.PrimaryBtnBg or Color3.fromRGB(190,50,50)",
        "\t\t\ttx = C and C.PrimaryBtnText or Color3.fromRGB(255,245,240)",
        "\t\telseif style == \"warn\" then",
        "\t\t\tbg = C and C.WarnBtnBg or Color3.fromRGB(180,80,40)",
        "\t\t\ttx = C and C.WarnBtnText or Color3.fromRGB(255,240,230)",
        "\t\telse",
        "\t\t\tbg = C and C.CancelBtnBg or Color3.fromRGB(120,130,140)",
        "\t\t\ttx = C and C.CancelBtnText or Color3.fromRGB(240,240,240)",
        "\t\tend",
        "\t\tb.BackgroundColor3 = bg",
        "\t\tb.TextColor3 = tx",
        "\t\tlocal c = Instance.new(\"UICorner\")",
        "\t\tc.CornerRadius = UDim.new(0, Theme.PANEL_RADIUS or 10)",
        "\t\tc.Parent = b",
        "",
        "\t\tb:SetAttribute(\"OrigText\", text)",
        "\t\tb:SetAttribute(\"OrigBG3\", bg)",
        "\t\tb:SetAttribute(\"OrigTX3\", tx)",
        "\t\treturn b",
        "\tend",
        "",
        "\tlocal btnHome  = mkBtn(\"ホームへ\", \"neutral\")",
        "\tlocal btnKoi   = mkBtn(\"こいこい\", \"primary\") -- テキストは show() 時に上書き",
        "",
        "\t-------------------------------- ワンボタン（final）",
        "\tlocal finalBtn = Instance.new(\"TextButton\")",
        "\tfinalBtn.Name = \"FinalBtn\"",
        "\tfinalBtn.Parent = modal",
        "\tfinalBtn.Size = UDim2.new(0, 240, 0, 48)",
        "\tfinalBtn.Position = UDim2.new(0.5,0,0,120)",
        "\tfinalBtn.AnchorPoint = Vector2.new(0.5,0)",
        "\tfinalBtn.AutoButtonColor = true",
        "\tfinalBtn.TextWrapped = true",
        "\tfinalBtn.RichText = true",
        "\tfinalBtn.Visible = false",
        "\tfinalBtn.ZIndex = 102",
        "\tdo",
        "\t\tlocal C = Theme.COLORS",
        "\t\tfinalBtn.BackgroundColor3 = (C and C.PrimaryBtnBg) or Color3.fromRGB(190,50,50)",
        "\t\tfinalBtn.TextColor3       = (C and C.PrimaryBtnText) or Color3.fromRGB(255,245,240)",
        "\t\tlocal fcorner = Instance.new(\"UICorner\")",
        "\t\tfcorner.CornerRadius = UDim.new(0, Theme.PANEL_RADIUS or 10)",
        "\t\tfcorner.Parent = finalBtn",
        "\tend",
        "",
        "\t-------------------------------- ハンドラ",
        "\tlocal on: Handlers = { home = nil, koikoi = nil, final = nil }",
        "",
        "\t-- クリック結線（ロック中は無視：こいこいのみロック対象）",
        "\tbtnHome.Activated:Connect(function()",
        "\t\tif on.home then on.home() end",
        "\tend)",
        "\tbtnKoi.Activated:Connect(function()",
        "\t\tif btnKoi:GetAttribute(\"locked\") then return end",
        "\t\tif on.koikoi then on.koikoi() end",
        "\tend)",
        "\tfinalBtn.Activated:Connect(function()",
        "\t\tif on.final then on.final() end",
        "\tend)",
        "",
        "\t-- 背景クリックでは閉じない（意図的に no-op）",
        "\toverlay.Activated:Connect(function() end)",
        "",
        "\t-------------------------------- API",
        "\tlocal api: any = {}",
        "",
        "\tfunction api:hide()",
        "\t\toverlay.Visible = false",
        "\t\tmodal.Visible = false",
        "\tend",
        "",
        "\t-- 2択（9/10/11/12月のクリア時）",
        "\t-- data: { rewardBank?, titleText?, descText?, nextMonth?, nextGoal? }",
        "\tfunction api:show(data)",
        "\t\tlocal add       = tonumber(data and data.rewardBank) or 2",
        "\t\tlocal nextMonth = tonumber(data and data.nextMonth) or nil",
        "\t\tlocal nextGoal  = tonumber(data and data.nextGoal) or nil",
        "",
        "\t\tlocal titleText = data and data.titleText",
        "\t\t\tor (\"クリアおめでとう！  +%d両\"):format(add)",
        "",
        "\t\tlocal descText = data and data.descText",
        "\t\t\tor (nextMonth and nextGoal)",
        "\t\t\t\tand (\"このまま こいこい で <b>%d月：目標 %s</b> に挑戦しますか？\"):format(nextMonth, tostring(nextGoal))",
        "\t\t\t\tor \"このまま こいこい で続けますか？\"",
        "",
        "\t\tlocal koiLabel = (nextMonth and nextGoal)",
        "\t\t\tand (\"こいこい（%d月：目標 %s）\"):format(nextMonth, tostring(nextGoal))",
        "\t\t\tor \"こいこい\"",
        "",
        "\t\tlocal C = Theme.COLORS",
        "\t\ttitle.TextColor3 = (C and C.TextDefault) or title.TextColor3",
        "\t\tdesc.TextColor3  = (C and C.TextDefault) or desc.TextColor3",
        "",
        "\t\ttitle.Text = titleText",
        "\t\tdesc.Text  = descText",
        "\t\tbtnKoi.Text = koiLabel",
        "",
        "\t\t-- 表示切替：2択オン／ワンボタンオフ",
        "\t\tbtnRow.Visible = true",
        "\t\tfinalBtn.Visible = false",
        "",
        "\t\toverlay.Visible = true",
        "\t\tmodal.Visible = true",
        "\tend",
        "",
        "\t-- 完全終了（12月など）：ワンボタン",
        "\tfunction api:showFinal(titleText: string?, descText: string?, buttonText: string?, onClick: (() -> ())?)",
        "\t\ttitle.Text = titleText or \"クリアおめでとう！\"",
        "\t\tdesc.Text  = descText  or \"このランは終了です。メニューに戻ります。\"",
        "\t\tfinalBtn.Text = buttonText or \"メニューに戻る\"",
        "\t\ton.final = onClick",
        "",
        "\t\t-- 表示切替：2択オフ／ワンボタンオン",
        "\t\tbtnRow.Visible = false",
        "\t\tfinalBtn.Visible = true",
        "",
        "\t\toverlay.Visible = true",
        "\t\tmodal.Visible = true",
        "\tend",
        "",
        "\t-- こいこいボタンのロック設定（救済演出や通信中のガード等に）",
        "\tfunction api:setLocked(koikoiLocked:boolean)",
        "\t\tsetLockedVisual(btnKoi, koikoiLocked and true or false)",
        "\tend",
        "",
        "\t-- ハンドラ設定",
        "\tfunction api:on(handlers: Handlers)",
        "\t\ton.home   = handlers and handlers.home   or on.home"
      ],
      "truncated": true,
      "analysis": {
        "waitForChild": [
          "Config",
          "Theme"
        ],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 1,
          "fromOffset": 0,
          "new": 11
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/client/ui/components/TalismanBoard.lua",
      "ext": "lua",
      "binary": false,
      "size": 6889,
      "mtime": "2025-09-18T16:21:52.372179+00:00",
      "head": [
        "-- src/client/ui/components/TalismanBoard.lua",
        "-- v1.1 RowResponsive: 横一列・比率可変・正方形スロット",
        "--  - props: new(parentGui, { title?, widthScale?, padScale? })",
        "--  - API : setLang(lang), setData(talisman), getInstance(), destroy()",
        "",
        "local RS = game:GetService(\"ReplicatedStorage\")",
        "local Config = RS:FindFirstChild(\"Config\") or RS",
        "",
        "local Theme  = require(Config:WaitForChild(\"Theme\"))",
        "local Locale = require(Config:WaitForChild(\"Locale\"))",
        "",
        "local M = {}",
        "M.__index = M",
        "",
        "--========================================",
        "-- helpers",
        "--========================================",
        "local function colorOr(defaultC3, path1, path2, fallback)",
        "\tlocal ok, c = pcall(function()",
        "\t\treturn Theme.COLORS and Theme.COLORS[path1] and Theme.COLORS[path1][path2]",
        "\tend)",
        "\tif ok and typeof(c) == \"Color3\" then return c end",
        "\tif typeof(fallback) == \"Color3\" then return fallback end",
        "\treturn defaultC3",
        "end",
        "",
        "local function makeSlot(parent, index)",
        "\tlocal f = Instance.new(\"Frame\")",
        "\tf.Name = (\"Slot%d\"):format(index)",
        "\t-- サイズは Grid の UIGridLayout＋AspectRatio が決めるため初期値はダミー",
        "\tf.Size = UDim2.fromScale(0, 1)",
        "\tf.BackgroundColor3 = colorOr(Color3.fromRGB(30,30,30), \"surface\", \"base\", Color3.fromRGB(30,30,30))",
        "\tf.BorderSizePixel = 1",
        "\tf.Parent = parent",
        "",
        "\tlocal uiCorner = Instance.new(\"UICorner\")",
        "\tuiCorner.CornerRadius = UDim.new(0, 8)",
        "\tuiCorner.Parent = f",
        "",
        "\tlocal stroke = Instance.new(\"UIStroke\")",
        "\tstroke.Thickness = 1",
        "\tstroke.Color = Color3.fromRGB(80,80,80)",
        "\tstroke.Enabled = true",
        "\tstroke.Parent = f",
        "",
        "\tlocal label = Instance.new(\"TextLabel\")",
        "\tlabel.Name = \"Label\"",
        "\tlabel.Size = UDim2.fromScale(1,1)",
        "\tlabel.BackgroundTransparency = 1",
        "\tlabel.TextScaled = true",
        "\tlabel.Font = Enum.Font.Gotham",
        "\tlabel.TextColor3 = Color3.fromRGB(220,220,220)",
        "\tlabel.Text = \"\"",
        "\tlabel.Parent = f",
        "",
        "\treturn f, label, stroke",
        "end",
        "",
        "local function defaultData()",
        "\treturn { maxSlots = 6, unlocked = 2, slots = { nil, nil, nil, nil, nil, nil } }",
        "end",
        "",
        "--========================================",
        "-- class",
        "--========================================",
        "-- opts:",
        "--   title?: string",
        "--   widthScale?: number  -- 親幅に対する割合（0〜1、既定=0.6）",
        "--   padScale?: number    -- セル間の横パディング割合（既定=0.01 = 親幅の1%）",
        "function M.new(parentGui: Instance, opts: { title: string?, widthScale: number?, padScale: number? }?)",
        "\tlocal self = setmetatable({}, M)",
        "",
        "\topts = opts or {}",
        "\tlocal widthScale = tonumber(opts.widthScale or 0.6) or 0.6",
        "\tlocal padScale   = math.clamp(tonumber(opts.padScale or 0.01) or 0.01, 0, 0.05) -- 過大な隙間を抑制",
        "\t-- 6スロ・5箇所の隙間 → 各セルの横幅スケール",
        "\tlocal cellScale  = (1 - 5 * padScale) / 6",
        "\t-- 正方形化のため、Grid のアスペクト比 = 1 / cellScale （幅 / 高さ）",
        "\tlocal gridAspect = 1 / cellScale",
        "",
        "\tlocal root = Instance.new(\"Frame\")",
        "\troot.Name = \"TalismanBoard\"",
        "\troot.BackgroundTransparency = 1",
        "\t-- 幅は比率、縦は自動（タイトル高さ + グリッド高さ）",
        "\troot.Size = UDim2.new(widthScale, 0, 0, 0)",
        "\troot.AutomaticSize = Enum.AutomaticSize.Y",
        "\troot.Parent = parentGui",
        "\tself.root = root",
        "",
        "\t-- 縦積み（タイトル→グリッド）",
        "\tlocal vlayout = Instance.new(\"UIListLayout\")",
        "\tvlayout.FillDirection = Enum.FillDirection.Vertical",
        "\tvlayout.Padding = UDim.new(0, 6)",
        "\tvlayout.SortOrder = Enum.SortOrder.LayoutOrder",
        "\tvlayout.Parent = root",
        "",
        "\tlocal title = Instance.new(\"TextLabel\")",
        "\ttitle.Name = \"Title\"",
        "\ttitle.Size = UDim2.new(1, 0, 0, 24)",
        "\ttitle.BackgroundTransparency = 1",
        "\ttitle.TextXAlignment = Enum.TextXAlignment.Left",
        "\ttitle.Font = Enum.Font.GothamBold",
        "\ttitle.TextSize = 18",
        "\ttitle.Text = (opts and opts.title) or \"Talisman\"",
        "\ttitle.TextColor3 = Color3.fromRGB(235,235,235)",
        "\ttitle.LayoutOrder = 1",
        "\ttitle.Parent = root",
        "",
        "\tlocal gridHolder = Instance.new(\"Frame\")",
        "\tgridHolder.Name = \"Grid\"",
        "\tgridHolder.BackgroundTransparency = 1",
        "\t-- 横幅100%、高さはアスペクト比で決まる（下でConstraintを付与）",
        "\tgridHolder.Size = UDim2.new(1, 0, 0, 0)",
        "\tgridHolder.AutomaticSize = Enum.AutomaticSize.Y",
        "\tgridHolder.LayoutOrder = 2",
        "\tgridHolder.Parent = root",
        "",
        "\t-- 正方形を保つための「幅：高さ」制約（高さ = 幅 / gridAspect）",
        "\tlocal ar = Instance.new(\"UIAspectRatioConstraint\")",
        "\tar.AspectRatio = gridAspect",
        "\tar.DominantAxis = Enum.DominantAxis.Width",
        "\tar.Parent = gridHolder",
        "",
        "\t-- 横一列のグリッド",
        "\tlocal layout = Instance.new(\"UIGridLayout\")",
        "\tlayout.FillDirection = Enum.FillDirection.Horizontal",
        "\tlayout.FillDirectionMaxCells = 6",
        "\tlayout.StartCorner = Enum.StartCorner.TopLeft",
        "\tlayout.SortOrder = Enum.SortOrder.LayoutOrder",
        "\tlayout.HorizontalAlignment = Enum.HorizontalAlignment.Center",
        "\tlayout.VerticalAlignment = Enum.VerticalAlignment.Center",
        "\t-- 横は cellScale、縦は100%（Gridの高さ）→ 正方形になる",
        "\tlayout.CellSize = UDim2.new(cellScale, 0, 1, 0)",
        "\tlayout.CellPadding = UDim2.new(padScale, 0, 0, 0)",
        "\tlayout.Parent = gridHolder",
        "",
        "\tself.slots   = {}",
        "\tself.labels  = {}",
        "\tself.strokes = {}",
        "",
        "\tfor i = 1, 6 do",
        "\t\tlocal f, lbl, stroke = makeSlot(gridHolder, i)",
        "\t\tself.slots[i]   = f",
        "\t\tself.labels[i]  = lbl",
        "\t\tself.strokes[i] = stroke",
        "\tend",
        "",
        "\tself._lang = (typeof(Locale.get) == \"function\" and Locale.get()) or \"ja\"",
        "\tself:setLang(self._lang)",
        "",
        "\tself._data = defaultData()",
        "\tself:setData(nil)",
        "",
        "\treturn self",
        "end",
        "",
        "--========================================",
        "-- public",
        "--========================================",
        "function M:setLang(lang: string?)",
        "\tself._lang = (lang == \"en\") and \"en\" or \"ja\"",
        "\tif self.root and self.root:FindFirstChild(\"Title\") then",
        "\t\tself.root.Title.Text = (self._lang == \"ja\") and \"護符ボード\" or \"Talisman Board\"",
        "\tend",
        "end",
        "",
        "-- talisman: { maxSlots=6, unlocked=2, slots={...} }",
        "function M:setData(talisman: any)",
        "\tself._data = talisman or defaultData()",
        "",
        "\tfor i = 1, 6 do",
        "\t\tlocal slot   = self.slots[i]",
        "\t\tlocal lbl    = self.labels[i]",
        "\t\tlocal stroke = self.strokes[i]",
        "",
        "\t\tlocal withinUnlock = i <= (tonumber(self._data.unlocked or 0) or 0)",
        "\t\tlocal id = self._data.slots and self._data.slots[i] or nil",
        "",
        "\t\tif not withinUnlock then",
        "\t\t\t-- 未開放",
        "\t\t\tslot.BackgroundColor3 = Color3.fromRGB(35,35,35)",
        "\t\t\tlbl.Text = \"🔒\"",
        "\t\t\tstroke.Color = Color3.fromRGB(80,80,80)",
        "\t\t\tstroke.Thickness = 1",
        "\t\telseif id == nil then",
        "\t\t\t-- 空",
        "\t\t\tslot.BackgroundColor3 = Color3.fromRGB(50,50,50)",
        "\t\t\tlbl.Text = (self._lang == \"ja\") and \"空\" or \"Empty\"",
        "\t\t\tstroke.Color = Color3.fromRGB(80,80,80)",
        "\t\t\tstroke.Thickness = 1",
        "\t\telse",
        "\t\t\t-- 埋まっている",
        "\t\t\tslot.BackgroundColor3 = Color3.fromRGB(70,70,90)",
        "\t\t\tlbl.Text = tostring(id)",
        "\t\t\tstroke.Color = Color3.fromRGB(120,120,160)",
        "\t\t\tstroke.Thickness = 1",
        "\t\tend",
        "\tend",
        "end",
        "",
        "function M:getInstance()",
        "\treturn self.root",
        "end",
        "",
        "function M:destroy()",
        "\tif self.root then self.root:Destroy() end",
        "end",
        "",
        "return M"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [
          "Theme",
          "Locale"
        ],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 2,
          "fromOffset": 0,
          "new": 5
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 4
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/client/ui/components/TutorialBanner.lua",
      "ext": "lua",
      "binary": false,
      "size": 513,
      "mtime": "2025-09-18T13:53:28.891431+00:00",
      "head": [
        "-- StarterPlayerScripts/UI/components/TutorialBanner.lua",
        "local M = {}",
        "",
        "function M.mount(parent: Instance, text: string)",
        "\tlocal t = Instance.new(\"TextLabel\")",
        "\tt.Name = \"TutorialBanner\"",
        "\tt.Parent = parent",
        "\tt.Size = UDim2.new(1,0,0,28)",
        "\tt.Position = UDim2.new(0,0,0,0)",
        "\tt.BackgroundTransparency = 0.3",
        "\tt.BackgroundColor3 = Color3.fromRGB(20,20,20)",
        "\tt.Text = text",
        "\tt.Font = Enum.Font.GothamMedium",
        "\tt.TextSize = 18",
        "\tt.TextColor3 = Color3.fromRGB(230,230,230)",
        "\tt.ZIndex = 20",
        "\treturn t",
        "end",
        "",
        "return M"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 2
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/client/ui/components/UiKit.lua",
      "ext": "lua",
      "binary": false,
      "size": 1931,
      "mtime": "2025-09-05T13:30:40.030283+00:00",
      "head": [
        "-- StarterPlayerScripts/UI/components/UiKit.lua",
        "local UiKit = {}",
        "",
        "function UiKit.notify(title: string, text: string, duration: number?)",
        "\tpcall(function()",
        "\t\tgame.StarterGui:SetCore(\"SendNotification\", {",
        "\t\t\tTitle = title, Text = text, Duration = duration or 2",
        "\t\t})",
        "\tend)",
        "end",
        "",
        "function UiKit.label(parent: Instance, name: string, text: string, size: UDim2, pos: UDim2, anchor: Vector2?)",
        "\tlocal l = Instance.new(\"TextLabel\")",
        "\tl.Name = name",
        "\tl.Parent = parent",
        "\tl.BackgroundTransparency = 1",
        "\tl.Text = text or \"\"",
        "\tl.TextScaled = true",
        "\tl.Size = size or UDim2.new(0,100,0,24)",
        "\tl.Position = pos or UDim2.new(0,0,0,0)",
        "\tif anchor then l.AnchorPoint = anchor end",
        "\tl.TextXAlignment = Enum.TextXAlignment.Left",
        "\tl.TextYAlignment = Enum.TextYAlignment.Center",
        "\treturn l",
        "end",
        "",
        "function UiKit.button(parent: Instance, txt: string, size: UDim2, pos: UDim2)",
        "\tlocal b = Instance.new(\"TextButton\")",
        "\tb.Parent = parent",
        "\tb.Text = txt",
        "\tb.TextScaled = true",
        "\tb.Size = size or UDim2.fromOffset(120,40)",
        "\tif pos then b.Position = pos end",
        "\tb.AutoButtonColor = true",
        "\tb.BackgroundColor3 = Color3.fromRGB(255,255,255)",
        "\tb.BorderSizePixel = 1",
        "\treturn b",
        "end",
        "",
        "local UiKit = {}",
        "",
        "function UiKit.makeAspectContainer(parent, aspect) -- aspect 例: 16/9",
        "\tlocal frame = Instance.new(\"Frame\")",
        "\tframe.Name = \"PlayArea\"",
        "\tframe.BackgroundTransparency = 1",
        "\tframe.AnchorPoint = Vector2.new(0.5, 0.5)",
        "\tframe.Position = UDim2.fromScale(0.5, 0.5)",
        "\tframe.Size = UDim2.fromScale(1, 1)",
        "\tframe.Parent = parent",
        "",
        "\tlocal ar = Instance.new(\"UIAspectRatioConstraint\")",
        "\tar.AspectRatio = aspect",
        "\tar.DominantAxis = Enum.DominantAxis.Width -- 横幅を基準に高さを決める",
        "\tar.Parent = frame",
        "",
        "\tlocal uis = Instance.new(\"UISizeConstraint\")",
        "\tuis.MinSize = Vector2.new(960, 540) -- 小さすぎ防止（任意）",
        "\t-- uis.MaxSize = Vector2.new(3840, 2160) -- 必要なら上限も",
        "\tuis.Parent = frame",
        "",
        "\treturn frame",
        "end",
        "",
        "return UiKit"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 2,
          "fromOffset": 1,
          "new": 2
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/client/ui/components/YakuPanel.lua",
      "ext": "lua",
      "binary": false,
      "size": 17065,
      "mtime": "2025-09-18T12:31:15.326515+00:00",
      "head": [
        "-- src/client/ui/components/YakuPanel.lua",
        "-- v0.9.7b 役倍率ビュー（前面ポップアップ／開閉API）",
        "-- 変更点:",
        "--  ・Client側で RunDeckUtil を使って祭事Lvを“初期化”しないよう修正",
        "--  ・StatePushの payload に入ってきた matsuri を優先し、未同梱時は既存値を保持",
        "--  ・四光の表示説明を現仕様へ更新（雨四区別なし／任意の光4枚で四光、基礎8文）",
        "",
        "local Players = game:GetService(\"Players\")",
        "local RS      = game:GetService(\"ReplicatedStorage\")",
        "",
        "local Scoring       = require(RS:WaitForChild(\"SharedModules\"):WaitForChild(\"Scoring\"))",
        "-- ★不要化：RunDeckUtil 経由での読み出しは初期化を誘発するため使用しない",
        "-- local RunDeckUtil   = require(RS:WaitForChild(\"SharedModules\"):WaitForChild(\"RunDeckUtil\"))",
        "local CardImageMap  = require(RS:WaitForChild(\"SharedModules\"):WaitForChild(\"CardImageMap\"))",
        "",
        "local Config = RS:FindFirstChild(\"Config\")",
        "local Theme  = Config and Config:FindFirstChild(\"Theme\") and require(Config.Theme)",
        "",
        "local YakuPanel = {}",
        "YakuPanel.__index = YakuPanel",
        "",
        "--==============================",
        "-- レイアウト定数",
        "--==============================",
        "-- 左のアイコン域を右寄せにして、その右に「×N」→ 役名+基本表記 → Lv → 文×点",
        "local ICON_AREA_W = 120     -- 96→120 に拡張（横幅拡張に合わせ余裕を確保）",
        "local REQTEXT_W   = 48      -- 「×N」テキストの幅（42→48）",
        "local NAME_X      = ICON_AREA_W + 8 + REQTEXT_W + 14 -- 役名の開始X",
        "",
        "--==============================",
        "-- 表示順（UI専用の「四光」を含む）",
        "--==============================",
        "local YAKU_CATALOG = {",
        "\t{ id=\"yaku_goko\",        nameJP=\"五光\",           nameEN=\"Five Bright\",        iconCodes={\"0101\",\"0301\",\"0801\",\"1101\",\"1201\"}, reqText=\"\" },",
        "\t{ id=\"yaku_yonko\",       nameJP=\"四光\",           nameEN=\"Four Bright\",        iconCodes={\"0101\"},   reqText=\"×4\" }, -- UIのみ（祭事なし）",
        "\t{ id=\"yaku_sanko\",       nameJP=\"三光\",           nameEN=\"Three Bright\",       iconCodes={\"0101\"},   reqText=\"×3\" },",
        "\t{ id=\"yaku_hanami\",      nameJP=\"花見で一杯\",     nameEN=\"Hanami with Sake\",   iconCodes={\"0301\",\"0901\"}, reqText=\"\" },",
        "\t{ id=\"yaku_tsukimi\",     nameJP=\"月見で一杯\",     nameEN=\"Tsukimi with Sake\",  iconCodes={\"0801\",\"0901\"}, reqText=\"\" },",
        "\t{ id=\"yaku_inoshikacho\", nameJP=\"猪鹿蝶\",         nameEN=\"Inoshikachō\",        iconCodes={\"0701\",\"1001\",\"0601\"}, reqText=\"\" },",
        "\t{ id=\"yaku_tane\",        nameJP=\"タネ\",           nameEN=\"Seeds\",              iconCodes={\"0201\"},   reqText=\"×5\" },",
        "\t{ id=\"yaku_tanzaku\",     nameJP=\"短冊\",           nameEN=\"Tanzaku\",            iconCodes={\"0202\"},   reqText=\"×5\" },",
        "\t{ id=\"yaku_kasu\",        nameJP=\"カス\",           nameEN=\"Kasu\",               iconCodes={\"0103\"},   reqText=\"×10\" },",
        "}",
        "",
        "--==============================",
        "-- 基本点（基礎の「文」）と閾値/超過の説明",
        "-- ※ Scoring.lua の ROLE_MON に合わせる",
        "--==============================",
        "local BASE_INFO = {",
        "\t-- 光系",
        "\tyaku_goko        = { base = 10 },  -- 五光",
        "\t-- ★更新：雨四の区別をしない現仕様。任意4枚で四光＝基礎8文（注記なし）",
        "\tyaku_yonko       = { base =  8 },  -- 四光",
        "\tyaku_sanko       = { base =  5 },  -- 三光",
        "",
        "\t-- 役もの",
        "\tyaku_hanami      = { base =  5 },",
        "\tyaku_tsukimi     = { base =  5 },",
        "\tyaku_inoshikacho = { base =  5 },",
        "",
        "\t-- 枚数系（閾値超過で +1文/枚）",
        "\tyaku_tane        = { base =  1, threshold = 5  },",
        "\tyaku_tanzaku     = { base =  1, threshold = 5  },",
        "\tyaku_kasu        = { base =  1, threshold = 10 },",
        "}",
        "",
        "--==============================",
        "-- ユーティリティ",
        "--==============================",
        "local function getLang(state)",
        "\tlocal lang = \"ja\"",
        "\tif typeof(state)==\"table\" and state.lang then lang = state.lang end",
        "\treturn (lang==\"en\") and \"en\" or \"ja\"",
        "end",
        "",
        "-- ★修正：payload（StatePush）に同梱された値のみを読む。無いときは nil を返す。",
        "local function getMatsuriLevelsFromPayload(state)",
        "\tif typeof(state) ~= \"table\" then return nil end",
        "\t-- 推奨：フラット（StatePush: payload.matsuri）",
        "\tif typeof(state.matsuri) == \"table\" then",
        "\t\treturn state.matsuri",
        "\tend",
        "\t-- 保険：ネスト（state.run.meta.matsuriLevels）が来ている場合",
        "\tlocal run  = state.run",
        "\tlocal meta = run and run.meta",
        "\tlocal lv   = meta and meta.matsuriLevels",
        "\tif typeof(lv) == \"table\" then",
        "\t\treturn lv",
        "\tend",
        "\t-- 未同梱（nilで返す）→ 呼び出し側で「上書きしない」",
        "\treturn nil",
        "end",
        "",
        "local function t(lang, jp, en) return (lang==\"en\") and (en or jp) or jp end",
        "",
        "-- 役名のあとに付ける「（基本点＋超過ルール）」テキスト",
        "local function buildBaseSuffix(lang, yakuId)",
        "\tlocal info = BASE_INFO[yakuId]",
        "\tif not info then return \"\" end",
        "",
        "\t-- 基本点",
        "\tlocal basePart = (lang==\"en\") and (\"base \"..tostring(info.base)..\" mon\") or (\"基本\"..tostring(info.base)..\"文\")",
        "",
        "\t-- 超過ルール（ある場合）",
        "\tlocal extraPart = \"\"",
        "\tif info.threshold then",
        "\t\tif lang==\"en\" then",
        "\t\t\textraPart = string.format(\"; +1 per card over %d\", info.threshold)",
        "\t\telse",
        "\t\t\textraPart = string.format(\"／%d枚超過ごとに+1文\", info.threshold)",
        "\t\tend",
        "\tend",
        "",
        "\t-- 備考（※現仕様で四光は注記なし）",
        "\tlocal note = \"\"",
        "\tif info.noteJP or info.noteEN then",
        "\t\tnote = (lang==\"en\") and (\" \"..(info.noteEN or \"\")) or (\" \"..(info.noteJP or \"\"))",
        "\tend",
        "",
        "\tif lang==\"en\" then",
        "\t\treturn string.format(\" (%s%s)%s\", basePart, extraPart, note)",
        "\telse",
        "\t\treturn string.format(\"（%s%s）%s\", basePart, extraPart, note)",
        "\tend",
        "end",
        "",
        "--==============================",
        "-- 行生成",
        "--==============================",
        "local function createRow(parent, yaku)",
        "\tlocal row = Instance.new(\"Frame\")",
        "\trow.Name = \"Row_\" .. yaku.id",
        "\trow.Size = UDim2.new(1, -10, 0, 58)",
        "\trow.BackgroundColor3 = Color3.fromRGB(30,30,30)",
        "\tdo",
        "\t\tlocal rc = Instance.new(\"UICorner\"); rc.CornerRadius = UDim.new(0,10); rc.Parent = row",
        "\t\tlocal rs = Instance.new(\"UIStroke\"); rs.ApplyStrokeMode = Enum.ApplyStrokeMode.Border; rs.Thickness = 1; rs.Color = Color3.fromRGB(255,255,255); rs.Transparency = 0.85; rs.Parent = row",
        "\tend",
        "",
        "\t-- アイコン列（右寄せ）",
        "\tlocal icons = Instance.new(\"Frame\")",
        "\ticons.Name = \"Icons\"",
        "\ticons.Size = UDim2.new(0, ICON_AREA_W, 1, 0)",
        "\ticons.BackgroundTransparency = 1",
        "\ticons.Parent = row",
        "",
        "\tlocal iconsLayout = Instance.new(\"UIListLayout\")",
        "\ticonsLayout.FillDirection = Enum.FillDirection.Horizontal",
        "\ticonsLayout.VerticalAlignment = Enum.VerticalAlignment.Center",
        "\ticonsLayout.HorizontalAlignment = Enum.HorizontalAlignment.Right",
        "\ticonsLayout.Padding = UDim.new(0, 4)",
        "\ticonsLayout.Parent = icons",
        "",
        "\t-- 「×N」テキスト（任意）",
        "\tlocal reqTextLabel: TextLabel? = nil",
        "\tif yaku.reqText and yaku.reqText ~= \"\" then",
        "\t\treqTextLabel = Instance.new(\"TextLabel\")",
        "\t\treqTextLabel.Name = \"ReqText\"",
        "\t\treqTextLabel.AnchorPoint = Vector2.new(0, 0.5)",
        "\t\treqTextLabel.Position = UDim2.new(0, ICON_AREA_W + 8, 0.5, 0)",
        "\t\treqTextLabel.Size = UDim2.fromOffset(REQTEXT_W, 22)",
        "\t\treqTextLabel.BackgroundTransparency = 1",
        "\t\treqTextLabel.Text = tostring(yaku.reqText)",
        "\t\treqTextLabel.Font = Enum.Font.Gotham",
        "\t\treqTextLabel.TextSize = 14",
        "\t\treqTextLabel.TextXAlignment = Enum.TextXAlignment.Left",
        "\t\treqTextLabel.TextColor3 = Color3.fromRGB(230,230,230)",
        "\t\treqTextLabel.ZIndex = 102",
        "\t\treqTextLabel.Parent = row",
        "\tend",
        "",
        "\t-- 役名（あとに「（基本点/超過）」を付ける）",
        "\tlocal lblName = Instance.new(\"TextLabel\")",
        "\tlblName.Name = \"NameLabel\"",
        "\tlblName.Position = UDim2.fromOffset(NAME_X, 0)",
        "\tlblName.Size = UDim2.new(0.54, 0, 1, 0) -- 横幅拡張に合わせて広げる",
        "\tlblName.TextXAlignment = Enum.TextXAlignment.Left",
        "\tlblName.TextYAlignment = Enum.TextYAlignment.Center",
        "\tlblName.Font = Enum.Font.Gotham",
        "\tlblName.TextSize = 16",
        "\tlblName.TextColor3 = Color3.fromRGB(255,255,255)",
        "\tlblName.BackgroundTransparency = 1",
        "\tlblName.Parent = row",
        "",
        "\t-- Lv 合計",
        "\tlocal lblLv = Instance.new(\"TextLabel\")",
        "\tlblLv.Name = \"LevelLabel\"",
        "\tlblLv.Position = UDim2.new(0.70, 0, 0, 0) -- 右に寄せる（全体横幅拡張に対応）",
        "\tlblLv.Size = UDim2.new(0.10, 0, 1, 0)",
        "\tlblLv.TextXAlignment = Enum.TextXAlignment.Center",
        "\tlblLv.Font = Enum.Font.Gotham",
        "\tlblLv.TextSize = 16",
        "\tlblLv.TextColor3 = Color3.fromRGB(230,230,230)",
        "\tlblLv.BackgroundTransparency = 1",
        "\tlblLv.Parent = row",
        "",
        "\t-- 文×点（祭事で加わる加点の合計）",
        "\tlocal lblStat = Instance.new(\"TextLabel\")",
        "\tlblStat.Name = \"StatLabel\"",
        "\tlblStat.Position = UDim2.new(0.80, 0, 0, 0)",
        "\tlblStat.Size = UDim2.new(0.20, 0, 1, 0)",
        "\tlblStat.TextXAlignment = Enum.TextXAlignment.Right",
        "\tlblStat.Font = Enum.Font.Gotham",
        "\tlblStat.TextSize = 16",
        "\tlblStat.TextColor3 = Color3.fromRGB(230,230,230)",
        "\tlblStat.BackgroundTransparency = 1",
        "\tlblStat.Parent = row",
        "",
        "\t-- アイコン描画",
        "\tlocal added = 0",
        "\tfor _, code in ipairs(yaku.iconCodes or {}) do",
        "\t\tlocal imgId = CardImageMap.get(code)",
        "\t\tif imgId then",
        "\t\t\tlocal img = Instance.new(\"ImageLabel\")",
        "\t\t\timg.BackgroundTransparency = 1",
        "\t\t\timg.Size = UDim2.fromOffset(18,26)",
        "\t\t\timg.Image = imgId",
        "\t\t\timg.Parent = icons",
        "\t\t\tadded += 1",
        "\t\tend",
        "\tend",
        "\tif added == 0 and Theme and Theme.IMAGES and Theme.IMAGES[yaku.id] then",
        "\t\tlocal img = Instance.new(\"ImageLabel\")",
        "\t\timg.BackgroundTransparency = 1",
        "\t\timg.Size = UDim2.fromOffset(18,26)",
        "\t\timg.Image = Theme.IMAGES[yaku.id]",
        "\t\timg.Parent = icons",
        "\t\tadded = 1",
        "\tend",
        "\tif added == 0 then",
        "\t\tlocal txt = Instance.new(\"TextLabel\")",
        "\t\ttxt.BackgroundTransparency = 1",
        "\t\ttxt.Size = UDim2.fromOffset(24,24)",
        "\t\ttxt.Text = \"—\"",
        "\t\ttxt.Font = Enum.Font.Gotham",
        "\t\ttxt.TextSize = 12",
        "\t\ttxt.TextColor3 = Color3.fromRGB(150,150,150)",
        "\t\ttxt.Parent = icons",
        "\tend",
        "",
        "\trow.Parent = parent",
        "\treturn row, {",
        "\t\tnameLabel = lblName,",
        "\t\tlvLabel   = lblLv,",
        "\t\tstatLabel = lblStat,",
        "\t\treqText   = reqTextLabel,",
        "\t}",
        "end",
        "",
        "--==============================",
        "-- mount",
        "--==============================",
        "function YakuPanel.mount(parentGui)",
        "\tlocal self = setmetatable({}, YakuPanel)",
        "",
        "\tlocal parent = parentGui",
        "\tif not parent or not parent:IsA(\"Instance\") then",
        "\t\tparent = Players.LocalPlayer:WaitForChild(\"PlayerGui\")",
        "\tend",
        "",
        "\t-- 前面に出す（RunScreen.DisplayOrder=10 より上）",
        "\tlocal rootGui = Instance.new(\"ScreenGui\")",
        "\trootGui.Name = \"YakuPanel\"",
        "\trootGui.ResetOnSpawn = false",
        "\trootGui.IgnoreGuiInset = true",
        "\trootGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling",
        "\trootGui.DisplayOrder = 100",
        "\trootGui.Parent = parent",
        "\tself._root = rootGui",
        "",
        "\t-- オーバーレイ",
        "\tlocal overlay = Instance.new(\"Frame\")",
        "\toverlay.Name = \"Overlay\"",
        "\toverlay.Visible = false",
        "\toverlay.BackgroundColor3 = Color3.new(0,0,0)",
        "\toverlay.BackgroundTransparency = 0.38",
        "\toverlay.Size = UDim2.fromScale(1,1)",
        "\toverlay.ZIndex = 100",
        "\toverlay.Parent = rootGui",
        "\tself._overlay = overlay",
        "",
        "\t-- カード：横幅を 540→756（約1.4倍）に拡張",
        "\tlocal card = Instance.new(\"Frame\")",
        "\tcard.Name = \"Card\"",
        "\tcard.AnchorPoint = Vector2.new(0.5,0.5)",
        "\tcard.Position = UDim2.fromScale(0.5,0.5)",
        "\tcard.Size = UDim2.fromOffset(756, 600) -- height 少しゆとり",
        "\tcard.Parent = overlay",
        "\tcard.BackgroundColor3 = Color3.fromRGB(24,24,24)",
        "\tcard.ZIndex = 101",
        "\tdo",
        "\t\tlocal uic = Instance.new(\"UICorner\"); uic.CornerRadius = UDim.new(0,16); uic.Parent = card",
        "\t\tlocal stroke = Instance.new(\"UIStroke\"); stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border; stroke.Color = Color3.fromRGB(255,255,255); stroke.Transparency = 0.7; stroke.Thickness = 1; stroke.Parent = card",
        "\tend",
        "",
        "\t-- タイトルバー",
        "\tlocal titleBar = Instance.new(\"Frame\")",
        "\ttitleBar.Name = \"TitleBar\"",
        "\ttitleBar.Size = UDim2.new(1,0,0,44)",
        "\ttitleBar.Parent = card"
      ],
      "truncated": true,
      "analysis": {
        "waitForChild": [
          "SharedModules",
          "Scoring",
          "SharedModules",
          "RunDeckUtil",
          "SharedModules",
          "CardImageMap",
          "PlayerGui"
        ],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 2,
          "fromOffset": 10,
          "new": 13
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 3
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/client/ui/DevLogViewer.client.lua",
      "ext": "lua",
      "binary": false,
      "size": 4635,
      "mtime": "2025-09-26T01:11:43.487150+00:00",
      "head": [
        "-- StarterPlayerScripts/UI/DevLogViewer.client.lua",
        "-- In-game log viewer you can copy from (F10 to toggle)",
        "",
        "local Players      = game:GetService(\"Players\")",
        "local LogService   = game:GetService(\"LogService\")",
        "local CAS          = game:GetService(\"ContextActionService\")",
        "local RunService   = game:GetService(\"RunService\")",
        "",
        "local MAX_LINES = 5000",
        "",
        "-- buffer",
        "local lines = {}",
        "local function push(msgType, message)",
        "\tlocal tag = (typeof(msgType) == \"EnumItem\") and msgType.Name or tostring(msgType)",
        "\tlocal s = string.format(\"[%s] %s\", tag, tostring(message))",
        "\tlines[#lines+1] = s",
        "\tif #lines > MAX_LINES then",
        "\t\ttable.remove(lines, 1)",
        "\tend",
        "end",
        "",
        "-- seed with existing history (if available)",
        "pcall(function()",
        "\tfor _, e in ipairs(LogService:GetLogHistory()) do",
        "\t\tpush(e.messageType, e.message)",
        "\tend",
        "end)",
        "",
        "-- live feed",
        "LogService.MessageOut:Connect(function(message, msgType)",
        "\tpush(msgType, message)",
        "end)",
        "",
        "-- UI",
        "local gui = Instance.new(\"ScreenGui\")",
        "gui.Name = \"DevLogViewer\"",
        "gui.ResetOnSpawn = false",
        "gui.IgnoreGuiInset = true",
        "gui.DisplayOrder = 9999",
        "gui.Enabled = false",
        "gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling",
        "gui.Parent = Players.LocalPlayer:WaitForChild(\"PlayerGui\")",
        "",
        "local modal = Instance.new(\"Frame\")",
        "modal.Name = \"Panel\"",
        "modal.AnchorPoint = Vector2.new(0.5, 0.5)",
        "modal.Position = UDim2.fromScale(0.5, 0.5)",
        "modal.Size = UDim2.fromScale(0.9, 0.8)",
        "modal.BackgroundColor3 = Color3.fromRGB(20, 22, 28)",
        "modal.BorderSizePixel = 0",
        "modal.Parent = gui",
        "",
        "local corner = Instance.new(\"UICorner\")",
        "corner.CornerRadius = UDim.new(0, 10)",
        "corner.Parent = modal",
        "",
        "local stroke = Instance.new(\"UIStroke\")",
        "stroke.Thickness = 1",
        "stroke.Color = Color3.fromRGB(70, 75, 90)",
        "stroke.Parent = modal",
        "",
        "local header = Instance.new(\"TextLabel\")",
        "header.BackgroundTransparency = 1",
        "header.TextXAlignment = Enum.TextXAlignment.Left",
        "header.Font = Enum.Font.GothamBold",
        "header.Text = \"Developer Log (F10 to close) — Ctrl+A → Ctrl+C to copy\"",
        "header.TextSize = 16",
        "header.TextColor3 = Color3.fromRGB(240, 240, 240)",
        "header.Size = UDim2.new(1, -16, 0, 32)",
        "header.Position = UDim2.new(0, 8, 0, 4)",
        "header.Parent = modal",
        "",
        "local box = Instance.new(\"TextBox\")",
        "box.Name = \"LogBox\"",
        "box.MultiLine = true",
        "box.ClearTextOnFocus = false",
        "box.TextEditable = true",
        "box.RichText = false",
        "box.TextXAlignment = Enum.TextXAlignment.Left",
        "box.TextYAlignment = Enum.TextYAlignment.Top",
        "box.Font = Enum.Font.Code",
        "box.TextSize = 14",
        "box.TextColor3 = Color3.fromRGB(225, 225, 225)",
        "box.BackgroundColor3 = Color3.fromRGB(28, 30, 36)",
        "box.Size = UDim2.new(1, -16, 1, -72)",
        "box.Position = UDim2.new(0, 8, 0, 36)",
        "box.TextWrapped = false",
        "box.Parent = modal",
        "",
        "local refreshBtn = Instance.new(\"TextButton\")",
        "refreshBtn.Size = UDim2.new(0, 120, 0, 28)",
        "refreshBtn.Position = UDim2.new(0, 8, 1, -32)",
        "refreshBtn.Text = \"Refresh\"",
        "refreshBtn.Font = Enum.Font.Gotham",
        "refreshBtn.TextSize = 14",
        "refreshBtn.TextColor3 = Color3.fromRGB(20, 22, 28)",
        "refreshBtn.BackgroundColor3 = Color3.fromRGB(180, 190, 210)",
        "refreshBtn.Parent = modal",
        "Instance.new(\"UICorner\", refreshBtn)",
        "",
        "local selectAllBtn = Instance.new(\"TextButton\")",
        "selectAllBtn.Size = UDim2.new(0, 120, 0, 28)",
        "selectAllBtn.Position = UDim2.new(0, 136, 1, -32)",
        "selectAllBtn.Text = \"Select All\"",
        "selectAllBtn.Font = Enum.Font.Gotham",
        "selectAllBtn.TextSize = 14",
        "selectAllBtn.TextColor3 = Color3.fromRGB(20, 22, 28)",
        "selectAllBtn.BackgroundColor3 = Color3.fromRGB(180, 190, 210)",
        "selectAllBtn.Parent = modal",
        "Instance.new(\"UICorner\", selectAllBtn)",
        "",
        "local closeBtn = Instance.new(\"TextButton\")",
        "closeBtn.Size = UDim2.new(0, 120, 0, 28)",
        "closeBtn.Position = UDim2.new(1, -128, 1, -32)",
        "closeBtn.Text = \"Close\"",
        "closeBtn.Font = Enum.Font.Gotham",
        "closeBtn.TextSize = 14",
        "closeBtn.TextColor3 = Color3.fromRGB(240, 240, 240)",
        "closeBtn.BackgroundColor3 = Color3.fromRGB(90, 95, 110)",
        "closeBtn.Parent = modal",
        "Instance.new(\"UICorner\", closeBtn)",
        "",
        "local function fill()",
        "\tbox.Text = table.concat(lines, \"\\n\")",
        "\t-- scroll to bottom",
        "\tRunService.Heartbeat:Wait()",
        "\tbox.CursorPosition = #box.Text + 1",
        "\tbox.SelectionStart = #box.Text + 1",
        "end",
        "",
        "local function toggle()",
        "\tgui.Enabled = not gui.Enabled",
        "\tif gui.Enabled then fill() end",
        "end",
        "",
        "refreshBtn.Activated:Connect(fill)",
        "closeBtn.Activated:Connect(function() gui.Enabled = false end)",
        "selectAllBtn.Activated:Connect(function()",
        "\tlocal txt = box.Text or \"\"",
        "\tbox:CaptureFocus()",
        "\ttask.wait()",
        "\tbox.SelectionStart = 1",
        "\tbox.CursorPosition = #txt + 1",
        "end)",
        "",
        "-- F10 toggle",
        "CAS:BindAction(\"DevLogViewerToggle\", function(_, state)",
        "\tif state == Enum.UserInputState.Begin then",
        "\t\ttoggle()",
        "\tend",
        "end, false, Enum.KeyCode.F10)"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [
          "PlayerGui"
        ],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 2,
          "fromOffset": 0,
          "new": 10
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/client/ui/highlight/MatchHighlighter.lua",
      "ext": "lua",
      "binary": false,
      "size": 5764,
      "mtime": "2025-10-05T10:32:03.554234+00:00",
      "head": [
        "-- StarterPlayerScripts/UI/highlight/MatchHighlighter.lua",
        "-- v1.3  外枠のみ（塗りなし）で“くっきり”ハイライト",
        "-- 依存：ReplicatedStorage/Config/Theme.lua（CARD_HL_* を参照）",
        "",
        "local RS = game:GetService(\"ReplicatedStorage\")",
        "local Theme = require(RS:WaitForChild(\"Config\"):WaitForChild(\"Theme\"))",
        "",
        "local M = {}",
        "",
        "-- 監視対象（RunScreen から渡してもらう）",
        "local handArea = nil",
        "local fieldTop = nil",
        "local fieldBottom = nil",
        "",
        "-- 内部状態",
        "local conns = {}",
        "local handNodes = {}",
        "local fieldNodes = {}",
        "",
        "local function addConn(c) if c then table.insert(conns, c) end end",
        "local function clearConns()",
        "\tfor _, c in ipairs(conns) do",
        "\t\tpcall(function() c:Disconnect() end)",
        "\tend",
        "\tconns = {}",
        "end",
        "",
        "-- ========== HLレイヤ生成（外枠のみ／塗りなし） ==========",
        "local function ensureHL(gui, name, color3, strokeW)",
        "\tif not (gui and gui:IsA(\"GuiObject\")) then return nil end",
        "",
        "\tlocal holder = gui:FindFirstChild(\"HL_Holder\")",
        "\tif not holder then",
        "\t\tholder = Instance.new(\"Folder\")",
        "\t\tholder.Name = \"HL_Holder\"",
        "\t\tholder.Archivable = false",
        "\t\tholder.Parent = gui",
        "\tend",
        "",
        "\tlocal layer = holder:FindFirstChild(name)",
        "\tif not layer then",
        "\t\t-- 透明な全面フレーム（枠線のみ表示）",
        "\t\tlocal frame = Instance.new(\"Frame\")",
        "\t\tframe.Name = name",
        "\t\tframe.Size = UDim2.fromScale(1, 1)",
        "\t\tframe.Position = UDim2.fromScale(0, 0)",
        "\t\tframe.BackgroundTransparency = 1 -- ★ 塗りなし",
        "\t\tframe.BorderSizePixel = 0",
        "\t\tframe.Visible = false",
        "\t\tframe.ZIndex = (gui.ZIndex or 1) + 50 -- 既存UIの上に",
        "\t\tframe.Parent = holder",
        "",
        "\t\tlocal corner = Instance.new(\"UICorner\")",
        "\t\tcorner.CornerRadius = UDim.new(0, 10)",
        "\t\tcorner.Parent = frame",
        "",
        "\t\tlocal stroke = Instance.new(\"UIStroke\")",
        "\t\tstroke.Thickness = strokeW",
        "\t\tstroke.Color = color3",
        "\t\tstroke.Transparency = 0 -- ★ はっきり見せる",
        "\t\tstroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border",
        "\t\tstroke.LineJoinMode = Enum.LineJoinMode.Round",
        "\t\tstroke.Parent = frame",
        "",
        "\t\tlayer = frame",
        "\telse",
        "\t\t-- 既存があれば色/太さだけ最新化",
        "\t\tlocal stroke = layer:FindFirstChildOfClass(\"UIStroke\")",
        "\t\tif stroke then",
        "\t\t\tstroke.Color = color3",
        "\t\t\tstroke.Thickness = strokeW",
        "\t\t\tstroke.Transparency = 0",
        "\t\tend",
        "\t\tif layer:IsA(\"Frame\") then",
        "\t\t\tlayer.BackgroundTransparency = 1",
        "\t\tend",
        "\tend",
        "\treturn layer",
        "end",
        "",
        "local function showHL(node, name, show)",
        "\tif not node then return end",
        "\tlocal color = Theme.CARD_HL_SELF or Color3.fromRGB(40, 120, 90) -- 統一グリーン",
        "\tlocal strokeW = (Theme.CARD_HL_STROKE_W and tonumber(Theme.CARD_HL_STROKE_W)) or 4",
        "\tlocal layer = ensureHL(node, name, color, strokeW)",
        "\tif layer then",
        "\t\tlayer.Visible = show and true or false",
        "\tend",
        "end",
        "",
        "local function clearAllHL()",
        "\tfor _, n in ipairs(handNodes) do",
        "\t\tshowHL(n, \"HL_SELF\", false)",
        "\t\tshowHL(n, \"HL_MATCH\", false)",
        "\tend",
        "\tfor _, n in ipairs(fieldNodes) do",
        "\t\tshowHL(n, \"HL_MATCH\", false)",
        "\tend",
        "end",
        "",
        "-- ========== 月取得（Attributes優先、フォールバック冗長） ==========",
        "local function monthOf(node)",
        "\tif not node then return nil end",
        "\tlocal m = node:GetAttribute(\"month\")",
        "\tif m ~= nil then",
        "\t\treturn tonumber(m)",
        "\tend",
        "\tlocal ok, val = pcall(function()",
        "\t\tif node:FindFirstChild(\"meta\") and node.meta:FindFirstChild(\"month\") then",
        "\t\t\treturn tonumber(node.meta.month.Value)",
        "\t\tend",
        "\t\tif node:FindFirstChild(\"data\") and node.data:FindFirstChild(\"month\") then",
        "\t\t\treturn tonumber(node.data.month.Value)",
        "\t\tend",
        "\t\treturn nil",
        "\tend)",
        "\treturn ok and val or nil",
        "end",
        "",
        "-- ========== ハイライト本体 ==========",
        "local function highlightFromHandNode(handNode)",
        "\tlocal m = monthOf(handNode)",
        "\tif not m then return end",
        "\t-- 自分（外枠）",
        "\tshowHL(handNode, \"HL_SELF\", true)",
        "\t-- 同月の場札（外枠）",
        "\tfor _, f in ipairs(fieldNodes) do",
        "\t\tshowHL(f, \"HL_MATCH\", monthOf(f) == m)",
        "\tend",
        "end",
        "",
        "-- ========== 入力バインド（PC/モバイル） ==========",
        "local function bindInputFor(node)",
        "\tif not (node and (node:IsA(\"ImageButton\") or node:IsA(\"TextButton\"))) then return end",
        "",
        "\taddConn(node.MouseEnter:Connect(function()",
        "\t\tclearAllHL()",
        "\t\thighlightFromHandNode(node)",
        "\tend))",
        "\taddConn(node.MouseLeave:Connect(function()",
        "\t\tclearAllHL()",
        "\tend))",
        "\taddConn(node.InputBegan:Connect(function(input)",
        "\t\tif input.UserInputType == Enum.UserInputType.Touch then",
        "\t\t\tclearAllHL()",
        "\t\t\thighlightFromHandNode(node)",
        "\t\tend",
        "\tend))",
        "\taddConn(node.InputEnded:Connect(function(input)",
        "\t\tif input.UserInputType == Enum.UserInputType.Touch then",
        "\t\t\tclearAllHL()",
        "\t\tend",
        "\tend))",
        "end",
        "",
        "-- ========== 再収集 ==========",
        "local function recollect()",
        "\thandNodes, fieldNodes = {}, {}",
        "",
        "\tif handArea then",
        "\t\tfor _, ch in ipairs(handArea:GetChildren()) do",
        "\t\t\tif ch:IsA(\"ImageButton\") or ch:IsA(\"TextButton\") then",
        "\t\t\t\ttable.insert(handNodes, ch)",
        "\t\t\t\tbindInputFor(ch)",
        "\t\t\tend",
        "\t\tend",
        "\tend",
        "\tlocal function addField(row)",
        "\t\tif not row then return end",
        "\t\tfor _, ch in ipairs(row:GetChildren()) do",
        "\t\t\tif ch:IsA(\"ImageButton\") or ch:IsA(\"TextButton\") then",
        "\t\t\t\ttable.insert(fieldNodes, ch)",
        "\t\t\tend",
        "\t\tend",
        "\tend",
        "\taddField(fieldTop)",
        "\taddField(fieldBottom)",
        "end",
        "",
        "local function watchContainer(inst)",
        "\tif not inst then return end",
        "\taddConn(inst.ChildAdded:Connect(function()",
        "\t\ttask.defer(recollect)",
        "\tend))",
        "\taddConn(inst.ChildRemoved:Connect(function()",
        "\t\ttask.defer(recollect)",
        "\tend))",
        "end",
        "",
        "-- ========== 公開API ==========",
        "function M.init(handArea_, fieldTop_, fieldBottom_)",
        "\tM.shutdown()",
        "",
        "\thandArea, fieldTop, fieldBottom = handArea_, fieldTop_, fieldBottom_",
        "\twatchContainer(handArea)",
        "\twatchContainer(fieldTop)",
        "\twatchContainer(fieldBottom)",
        "\trecollect()",
        "end",
        "",
        "function M.shutdown()",
        "\tclearAllHL()",
        "\tclearConns()",
        "\thandNodes, fieldNodes = {}, {}",
        "\thandArea, fieldTop, fieldBottom = nil, nil, nil",
        "end",
        "",
        "return M"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [
          "Config",
          "Theme"
        ],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 2,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/client/ui/lib/FormatUtil.lua",
      "ext": "lua",
      "binary": false,
      "size": 6281,
      "mtime": "2025-10-03T03:28:11.682758+00:00",
      "head": [
        "-- StarterPlayerScripts/UI/lib/FormatUtil.lua",
        "-- スコア・状態などの整形ユーティリティ（12か月版・言語対応）",
        "-- ・month / monthStr / goal を優先表示（season は互換として括弧付き併記）",
        "-- ・旧フィールド（target, season, seasonStr 等）も吸収",
        "",
        "local RS = game:GetService(\"ReplicatedStorage\")",
        "local Locale = require(RS:WaitForChild(\"Config\"):WaitForChild(\"Locale\"))",
        "",
        "local M = {}",
        "",
        "--==================================================",
        "-- 言語コードの正規化",
        "--==================================================",
        "local function normLang(lang: string?)",
        "\tlocal v = tostring(lang or \"\"):lower()",
        "\tif v == \"jp\" then v = \"ja\" end",
        "\tif v ~= \"ja\" and v ~= \"en\" then v = \"en\" end",
        "\treturn v",
        "end",
        "",
        "--==================================================",
        "-- 役名のローカライズ辞書（\"ja\" を正規キーに）",
        "--==================================================",
        "local ROLE_NAMES = {",
        "\ten = {",
        "\t\tfive_bright      = \"Five Brights\",",
        "\t\tfour_bright      = \"Four Brights\",",
        "\t\train_four_bright = \"Rain Four Brights\",",
        "\t\tthree_bright     = \"Three Brights\",",
        "\t\tinoshikacho      = \"Boar–Deer–Butterfly\",",
        "\t\tred_ribbon       = \"Red Ribbons\",",
        "\t\tblue_ribbon      = \"Blue Ribbons\",",
        "\t\tseeds            = \"Seeds\",",
        "\t\tribbons          = \"Ribbons\",",
        "\t\tchaffs           = \"Chaff\",",
        "\t\thanami           = \"Hanami Sake\",",
        "\t\ttsukimi          = \"Tsukimi Sake\",",
        "\t},",
        "\tja = {",
        "\t\tfive_bright      = \"五光\",",
        "\t\tfour_bright      = \"四光\",",
        "\t\train_four_bright = \"雨四光\",",
        "\t\tthree_bright     = \"三光\",",
        "\t\tinoshikacho      = \"猪鹿蝶\",",
        "\t\tred_ribbon       = \"赤短\",",
        "\t\tblue_ribbon      = \"青短\",",
        "\t\tseeds            = \"たね\",",
        "\t\tribbons          = \"たん\",",
        "\t\tchaffs           = \"かす\",",
        "\t\thanami           = \"花見で一杯\",",
        "\t\ttsukimi          = \"月見で一杯\",",
        "\t}",
        "}",
        "",
        "--==================================================",
        "-- 役集合を「a / b / c」形式の文字列に",
        "-- roles: { [role_key]=true or number } / array でもOK（キーを拾う）",
        "--==================================================",
        "function M.rolesToLines(roles, langOpt)",
        "\tlocal lang = normLang(langOpt or (typeof(Locale.getGlobal)==\"function\" and Locale.getGlobal()) or \"en\")",
        "\tlocal names = ROLE_NAMES[lang] or ROLE_NAMES.en",
        "",
        "\tif typeof(roles) ~= \"table\" then",
        "\t\treturn Locale.t(lang, \"ROLES_NONE\")",
        "\tend",
        "",
        "\tlocal hasAny = false",
        "\tlocal list = {}",
        "",
        "\t-- roles が map でも配列でも対応",
        "\tfor k, v in pairs(roles) do",
        "\t\tlocal key = (typeof(k) == \"string\") and k",
        "\t\t         or (typeof(v) == \"string\") and v",
        "\t\t         or nil",
        "\t\tif key then",
        "\t\t\tlocal disp = names[key] or key",
        "\t\t\ttable.insert(list, disp)",
        "\t\t\thasAny = true",
        "\t\tend",
        "\tend",
        "",
        "\tif not hasAny or #list == 0 then",
        "\t\treturn Locale.t(lang, \"ROLES_NONE\")",
        "\tend",
        "",
        "\ttable.sort(list, function(a, b) return tostring(a) < tostring(b) end)",
        "\treturn table.concat(list, \" / \")",
        "end",
        "",
        "--==================================================",
        "-- 月名 / 季節名（簡易ローカライズ）",
        "--==================================================",
        "local SEASON_JA = {\"春\",\"夏\",\"秋\",\"冬\"}",
        "local SEASON_EN = {\"Spring\",\"Summer\",\"Autumn\",\"Winter\"}",
        "",
        "local function monthLabel(m:number, lang:string): string",
        "\tm = tonumber(m) or 0",
        "\tif m < 1 then m = 1 end",
        "\tif m > 12 then m = 12 end",
        "\t-- monthStr が来ない場合のフォールバック表記",
        "\tif lang == \"ja\" then",
        "\t\treturn tostring(m) .. \"月\"",
        "\telse",
        "\t\treturn \"M\" .. tostring(m)",
        "\tend",
        "end",
        "",
        "local function seasonLabel(s:number, lang:string): string",
        "\tlocal tbl = (lang==\"ja\") and SEASON_JA or SEASON_EN",
        "\tif s>=1 and s<=#tbl then return tbl[s] end",
        "\t-- 不明値を簡易に整形",
        "\treturn (lang==\"ja\") and (\"季節\"..tostring(s)) or (\"S\"..tostring(s))",
        "end",
        "",
        "--==================================================",
        "-- 状態行（英/日対応・12か月対応）",
        "-- 呼び出し側から lang を渡す想定（nilなら \"en\"）",
        "--==================================================",
        "function M.stateLineText(st, langOpt)",
        "\tlocal lang = normLang(langOpt or (typeof(Locale.getGlobal)==\"function\" and Locale.getGlobal()) or \"en\")",
        "",
        "\t-- できるだけ多くのキーに対応（サーバ実装差異の吸収）",
        "\tlocal y     = tonumber(st and (st.year or st.y)) or 0",
        "\tlocal s     = tonumber(st and (st.season or st.s)) or 0",
        "\tlocal m     = tonumber(st and (st.month or (st.run and st.run.month))) or 0",
        "\tlocal goal  = st and (st.goal or st.target)",
        "\tlocal sum   = tonumber(st and (st.sum or st.seasonSum)) or 0",
        "\tlocal handsLeft   = tonumber(st and (st.hands or st.handLeft or st.handsLeft or st.handRemain)) or 0",
        "\tlocal rerollsLeft = tonumber(st and (st.rerolls or st.rerollRemain or st.rerollsLeft)) or 0",
        "\tlocal mult  = tonumber(st and (st.mult or st.multiplier)) or 1",
        "\tlocal bank  = tonumber(st and (st.bank)) or 0",
        "\tlocal deckLeft = tonumber(st and (st.deckLeft or st.deck or st.deckCount)) or 0",
        "\tlocal handCount= tonumber(st and (st.hand or st.handCount)) or 0",
        "",
        "\tlocal yearTxt = (y > 0) and tostring(y) or ((lang==\"ja\") and \"----\" or \"----\")",
        "",
        "\t-- month は文字列優先",
        "\tlocal monthStr = nil",
        "\tif st and typeof(st.monthStr) == \"string\" and st.monthStr ~= \"\" then",
        "\t\tmonthStr = st.monthStr",
        "\telse",
        "\t\tmonthStr = (m > 0) and monthLabel(m, lang) or ((lang==\"ja\") and \"--月\" or \"M--\")",
        "\tend",
        "",
        "\t-- season は互換のため括弧で併記（存在時のみ）",
        "\tlocal seasonStr: string? = nil",
        "\tif st and typeof(st.seasonStr) == \"string\" and st.seasonStr ~= \"\" then",
        "\t\tseasonStr = st.seasonStr",
        "\telseif s > 0 then",
        "\t\tseasonStr = seasonLabel(s, lang)",
        "\tend",
        "\tlocal seasonSuffix = (seasonStr and seasonStr ~= \"\") and (lang==\"ja\" and (\"（\"..seasonStr..\"）\") or (\" (\"..seasonStr..\")\")) or \"\"",
        "",
        "\tif lang == \"ja\" then",
        "\t\treturn string.format(",
        "\t\t\t\"年:%s  月:%s%s  目標:%s  合計:%d  残ハンド:%d  残リロール:%d  倍率:%.1fx  Bank:%d  山:%d  手:%d\",",
        "\t\t\tyearTxt, monthStr, seasonSuffix, tostring(goal or \"—\"), sum, handsLeft, rerollsLeft, mult, bank, deckLeft, handCount",
        "\t\t)",
        "\telse",
        "\t\treturn string.format(",
        "\t\t\t\"Year:%s  Month:%s%s  Goal:%s  Total:%d  Hands:%d  Rerolls:%d  Mult:%.1fx  Bank:%d  Deck:%d  Hand:%d\",",
        "\t\t\tyearTxt, monthStr, seasonSuffix, tostring(goal or \"—\"), sum, handsLeft, rerollsLeft, mult, bank, deckLeft, handCount",
        "\t\t)",
        "\tend",
        "end",
        "",
        "return M"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [
          "Config",
          "Locale"
        ],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 1,
          "ja_literals": 10
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/client/ui/lib/KitoAssets.lua",
      "ext": "lua",
      "binary": false,
      "size": 3974,
      "mtime": "2025-10-04T20:53:12.039724+00:00",
      "head": [
        "-- StarterPlayerScripts/UI/lib/KitoAssets.lua",
        "-- v1.3.2-diag (ShopDefs S3 DOT 対応)",
        "--  - animal 抽出を frontier(%f) 非依存に変更（kito.<animal>_... でも確実にヒット）",
        "--  - 厳格: \"kito.<animal>\" 始まりのみ受理",
        "--  - 揺らぎ: ko→nezumi / usagi→u を吸収",
        "--  - 失敗時は parse-miss / icon-miss を軽量ログ",
        "",
        "local RS = game:GetService(\"ReplicatedStorage\")",
        "",
        "-- Logger（なければ静かに動く）",
        "local Logger do",
        "\tlocal ok, mod = pcall(function()",
        "\t\treturn require(RS:WaitForChild(\"SharedModules\"):WaitForChild(\"Logger\"))",
        "\tend)",
        "\tLogger = ok and mod or { scope=function() return {info=function()end, warn=function()end} end }",
        "end",
        "local LOG = Logger.scope(\"KitoAssets\")",
        "",
        "local M = {}",
        "",
        "-- アイコン割当（提供の定義をそのまま使用）",
        "local ICON = {",
        "\tnezumi = \"rbxassetid://138080758976905\", -- 子（ねずみ）",
        "\tushi   = \"rbxassetid://98072025493160\",  -- 丑",
        "\ttora   = \"rbxassetid://115144405199625\", -- 寅",
        "\tu      = \"rbxassetid://120370272971127\", -- 卯（う・うさぎ）",
        "\ttatsu  = \"rbxassetid://116982196318196\", -- 辰",
        "\tmi     = \"rbxassetid://74939201459038\",  -- 巳（み・へび）",
        "\tuma    = \"rbxassetid://115729062347409\", -- 午",
        "\thitsuji= \"rbxassetid://75272554575317\",  -- 未",
        "\tsaru   = \"rbxassetid://124239193079274\", -- 申",
        "\ttori   = \"rbxassetid://124637162606181\", -- 酉",
        "\tinu    = \"rbxassetid://119847873888690\", -- 戌",
        "\ti      = \"rbxassetid://127826167495847\", -- 亥（い・いのしし）",
        "}",
        "",
        "-- ShopDefs の animal トークン → ICON キーへの正規化",
        "--  ko(=子)→nezumi / usagi→u 以外は 1:1",
        "local ALIAS = {",
        "\tko      = \"nezumi\",",
        "\tusagi   = \"u\",",
        "",
        "\t-- 1:1（明示）",
        "\tushi=\"ushi\", tora=\"tora\", u=\"u\", tatsu=\"tatsu\", mi=\"mi\",",
        "\tuma=\"uma\", hitsuji=\"hitsuji\", saru=\"saru\", tori=\"tori\", inu=\"inu\", i=\"i\",",
        "}",
        "",
        "-- 12支ホワイトリスト（安全のため）",
        "local VALID = {",
        "\tnezumi=true, ushi=true, tora=true, u=true, tatsu=true, mi=true,",
        "\tuma=true, hitsuji=true, saru=true, tori=true, inu=true, i=true,",
        "\tko=true, usagi=true, -- エイリアス側も受理",
        "}",
        "",
        "-- \"kito.<animal>...\" の animal を抽出（%f 使わず堅牢に）",
        "local function parseAnimal(effectId: string): string?",
        "\tif type(effectId) ~= \"string\" then return nil end",
        "\tlocal s = effectId:lower()",
        "\tlocal prefix = \"kito.\"",
        "\tif s:sub(1, #prefix) ~= prefix then",
        "\t\treturn nil",
        "\tend",
        "\t-- \"kito.\" 直後から英字のみを animal として抜き出す",
        "\tlocal rest = s:sub(#prefix + 1)",
        "\tlocal animal = rest:match(\"^([a-z]+)\")",
        "\tif not animal or animal == \"\" then",
        "\t\tLOG.warn(\"[parse-miss] effect=%s (starts with 'kito.' but animal not parsed)\", tostring(effectId))",
        "\t\treturn nil",
        "\tend",
        "\t-- エイリアス正規化",
        "\tlocal key = ALIAS[animal] or animal",
        "\t-- 知らないキーは弾く（将来拡張時は VALID を更新）",
        "\tif not VALID[key] then",
        "\t\tLOG.warn(\"[parse-miss] effect=%s animal=%s (alias=%s) not in VALID\", tostring(effectId), tostring(animal), tostring(key))",
        "\t\treturn nil",
        "\tend",
        "\treturn key",
        "end",
        "",
        "-- effectId（kito.<animal>...）→ rbxassetid（nil 可）",
        "function M.getIcon(effectId: string): string?",
        "\tlocal key = parseAnimal(effectId)",
        "\tif not key then",
        "\t\t-- kito.* 以外 or 解析失敗は静かめに",
        "\t\treturn nil",
        "\tend",
        "\tlocal asset = ICON[key]",
        "\tif not asset then",
        "\t\tLOG.warn(\"[icon-miss] effect=%s animalKey=%s (no ICON mapping)\", tostring(effectId), tostring(key))",
        "\tend",
        "\treturn asset",
        "end",
        "",
        "-- 直接キー取得（\"tora\" 等）。エイリアスも受理",
        "function M.getIconByKey(key: string): string?",
        "\tif type(key) ~= \"string\" or key == \"\" then return nil end",
        "\tlocal k = ALIAS[key:lower()] or key:lower()",
        "\treturn ICON[k]",
        "end",
        "",
        "-- 起動時ダンプ（軽量）",
        "do",
        "\tlocal count=0; for _ in pairs(ICON) do count+=1 end",
        "\tlocal path = nil; pcall(function() path = script and script:GetFullName() end)",
        "\tLOG.info(\"[boot] v1.3.2-diag | animals=%d | module=%s\", count, tostring(path or \"<unknown>\"))",
        "end",
        "",
        "return M"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [
          "SharedModules",
          "Logger"
        ],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": true,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/client/ui/lib/UiUtil.lua",
      "ext": "lua",
      "binary": false,
      "size": 6808,
      "mtime": "2025-09-17T08:26:35.432748+00:00",
      "head": [
        "-- StarterPlayerScripts/UI/lib/UiUtil.lua",
        "-- ラベル作成・子要素クリア・汎用ボタン作成の小物ユーティリティ",
        "-- v0.9.7-P1-4: Theme に完全寄せ（色／角丸／枠線／余白のフォールバック撤去）",
        "-- 既存APIは互換維持（makeLabel / clear / makeTextBtn）。加えて便利関数を少量追加。",
        "",
        "local RS = game:GetService(\"ReplicatedStorage\")",
        "",
        "-- 任意 Theme（あれば使う）",
        "local Theme: any = nil",
        "do",
        "\tlocal cfg = RS:FindFirstChild(\"Config\")",
        "\tif cfg and cfg:FindFirstChild(\"Theme\") then",
        "\t\tlocal ok, t = pcall(function() return require(cfg.Theme) end)",
        "\t\tif ok then Theme = t end",
        "\tend",
        "end",
        "",
        "local C = (Theme and Theme.COLORS) or {}",
        "local S = (Theme and Theme.SIZES)  or {}",
        "local RADIUS = (Theme and Theme.PANEL_RADIUS) or 10",
        "",
        "local U = {}",
        "",
        "--==================================================",
        "-- 内部ヘルパ",
        "--==================================================",
        "local function _addCornerStroke(frame: Instance, radiusPx: number?, strokeColor: Color3?, thickness: number?)",
        "\tlocal corner = Instance.new(\"UICorner\")",
        "\tcorner.CornerRadius = UDim.new(0, radiusPx or RADIUS)",
        "\tcorner.Parent = frame",
        "\tlocal s = Instance.new(\"UIStroke\")",
        "\ts.Thickness = thickness or 1",
        "\ts.Color = strokeColor or C.PanelStroke or Color3.fromRGB(210, 210, 210)",
        "\ts.Transparency = 0",
        "\ts.Parent = frame",
        "\treturn frame",
        "end",
        "",
        "local function _btnPalette(style: string?): (Color3, Color3)",
        "\tstyle = tostring(style or \"neutral\")",
        "\tif style == \"primary\" then",
        "\t\treturn (C.PrimaryBtnBg or Color3.fromRGB(190,50,50)),",
        "\t\t       (C.PrimaryBtnText or Color3.fromRGB(255,245,240))",
        "\telseif style == \"warn\" then",
        "\t\treturn (C.WarnBtnBg or Color3.fromRGB(180,80,40)),",
        "\t\t       (C.WarnBtnText or Color3.fromRGB(255,240,230))",
        "\telseif style == \"info\" then",
        "\t\treturn (C.InfoBtnBg or Color3.fromRGB(120,180,255)),",
        "\t\t       (C.TextDefault or Color3.fromRGB(25,25,25))",
        "\telseif style == \"dev\" then",
        "\t\treturn (C.DevBtnBg or Color3.fromRGB(40,100,60)),",
        "\t\t       (C.DevBtnText or Color3.fromRGB(255,255,255))",
        "\telseif style == \"cancel\" then",
        "\t\treturn (C.CancelBtnBg or Color3.fromRGB(120,130,140)),",
        "\t\t       (C.CancelBtnText or Color3.fromRGB(240,240,240))",
        "\telse -- neutral",
        "\t\treturn (C.CancelBtnBg or Color3.fromRGB(120,130,140)),",
        "\t\t       (C.CancelBtnText or Color3.fromRGB(240,240,240))",
        "\tend",
        "end",
        "",
        "--==================================================",
        "-- ラベル生成（RunScreen の makeLabel と同じ引数順）",
        "--==================================================",
        "function U.makeLabel(parent: Instance, name: string, text: string?, size: UDim2?, pos: UDim2?, anchor: Vector2?, color: Color3?)",
        "\tlocal l = Instance.new(\"TextLabel\")",
        "\tl.Name = name",
        "\tl.Parent = parent",
        "\tl.BackgroundTransparency = 1",
        "\tl.Text = text or \"\"",
        "\tl.TextScaled = true",
        "\tl.Size = size or UDim2.new(0,100,0,24)",
        "\tl.Position = pos or UDim2.new(0,0,0,0)",
        "\tif anchor then l.AnchorPoint = anchor end",
        "\tl.TextXAlignment = Enum.TextXAlignment.Left",
        "\tl.TextYAlignment = Enum.TextYAlignment.Center",
        "\tl.TextColor3 = color or C.TextDefault or Color3.fromRGB(20,20,20)",
        "\treturn l",
        "end",
        "",
        "--==================================================",
        "-- 子要素を全消し",
        "-- exceptNames: {\"KeepThis\",\"AndThat\"} のように残したい子の名前配列（任意）",
        "-- ※ UIListLayout / UIPadding などレイアウト系も**全部**消します（二重生成防止）",
        "--==================================================",
        "function U.clear(container: Instance, exceptNames: {string}? )",
        "\tlocal except = {}",
        "\tif typeof(exceptNames) == \"table\" then",
        "\t\tfor _,n in ipairs(exceptNames) do except[n] = true end",
        "\tend",
        "\tfor _,child in ipairs(container:GetChildren()) do",
        "\t\tif not except[child.Name] then",
        "\t\t\tchild:Destroy()",
        "\t\tend",
        "\tend",
        "end",
        "",
        "--==================================================",
        "-- 汎用テキストボタン（角丸＋UIStroke）",
        "-- size/pos はそのまま渡す（RunScreen 側のレイアウトに合わせる）",
        "-- bgColor が未指定なら Theme の \"neutral(=cancel系)\" を既定採用",
        "--==================================================",
        "function U.makeTextBtn(parent: Instance, text: string, size: UDim2?, pos: UDim2?, bgColor: Color3?)",
        "\tlocal b = Instance.new(\"TextButton\")",
        "\tb.Parent = parent",
        "\tb.Text = text",
        "\tb.TextScaled = true",
        "\tb.AutoButtonColor = true",
        "\tb.Size = size or UDim2.new(0,120,0,math.max(36, S.CONTROLS_H or 36))",
        "\tb.Position = pos or UDim2.new(0,0,0,0)",
        "\tb.BackgroundColor3 = bgColor or (C.CancelBtnBg or Color3.fromRGB(120,130,140))",
        "\tb.BorderSizePixel = 0",
        "\tb.TextColor3 = C.CancelBtnText or Color3.fromRGB(240,240,240)",
        "\tlocal c = Instance.new(\"UICorner\"); c.CornerRadius = UDim.new(0, RADIUS); c.Parent = b",
        "\tlocal s = Instance.new(\"UIStroke\"); s.Color = C.PanelStroke or Color3.fromRGB(210,210,210); s.Thickness = 1; s.Parent = b",
        "\treturn b",
        "end",
        "",
        "--==================================================",
        "-- 追加：ボタンスタイル適用（\"primary\"|\"warn\"|\"cancel\"|\"info\"|\"dev\"|\"neutral\"）",
        "--==================================================",
        "function U.styleButton(btn: TextButton, style: string?)",
        "\tif not (btn and btn:IsA(\"TextButton\")) then return end",
        "\tlocal bg, tx = _btnPalette(style)",
        "\tbtn.BackgroundColor3 = bg",
        "\tbtn.TextColor3 = tx",
        "\t-- 元色も属性に保存（ResultModal 等のロック切替用）",
        "\tbtn:SetAttribute(\"OrigBG3\", bg)",
        "\tbtn:SetAttribute(\"OrigTX3\", tx)",
        "end",
        "",
        "--==================================================",
        "-- 追加：パネル作成（角丸＋枠線つき）",
        "-- size: UDim2（Scale/Offsetどちらでも） / layoutOrder 任意",
        "-- titleText を渡すと左上にタイトルラベルを内包",
        "--==================================================",
        "function U.makePanel(parent: Instance, name: string, size: UDim2, layoutOrder: number?, titleText: string?, titleColor: Color3?)",
        "\tlocal f = Instance.new(\"Frame\")",
        "\tf.Name = name",
        "\tf.Parent = parent",
        "\tf.Size = size",
        "\tf.LayoutOrder = layoutOrder or 1",
        "\tf.BackgroundColor3 = C.PanelBg or Color3.fromRGB(255,255,255)",
        "\t_addCornerStroke(f, RADIUS, C.PanelStroke, 1)",
        "",
        "\tif titleText and titleText ~= \"\" then",
        "\t\tlocal title = U.makeLabel(f, name..\"Title\", titleText, UDim2.new(1, - (S.PAD or 10)*2, 0, 24), UDim2.new(0, (S.PAD or 10), 0, (S.PAD or 10)), nil, titleColor or C.TextDefault)",
        "\t\ttitle.TextScaled = true",
        "\t\ttitle.TextXAlignment = Enum.TextXAlignment.Left",
        "\t\ttitle.ZIndex = f.ZIndex + 1",
        "\tend",
        "\treturn f",
        "end",
        "",
        "--==================================================",
        "-- 追加：共通 Padding（左右PADをThemeから）",
        "--==================================================",
        "function U.addSidePadding(frame: Instance, padPx: number?)",
        "\tlocal p = Instance.new(\"UIPadding\")",
        "\tlocal px = padPx or (S.PAD or 10)",
        "\tp.PaddingLeft  = UDim.new(0, px)",
        "\tp.PaddingRight = UDim.new(0, px)",
        "\tp.Parent = frame",
        "\treturn p",
        "end",
        "",
        "return U"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 6
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/client/ui/ScreenRouter.lua",
      "ext": "lua",
      "binary": false,
      "size": 11873,
      "mtime": "2025-10-03T19:50:20.305701+00:00",
      "head": [
        "-- StarterPlayerScripts/UI/ScreenRouter.lua",
        "-- シンプルな画面ルーター：同じ画面への show は再実行しない（ちらつき対策）",
        "-- v0.9.6 (P1-5):",
        "--  - ★同一画面への show で payload が「空 or langのみ」の場合は setData を呼ばない（状態保護）",
        "--  - ★payload=nil の場合は {} を作らず、そのまま nil を維持（既存状態を壊さない）",
        "--  - current==name では setLang だけ即時反映し、update(nil) で安全に再描画",
        "--  - それ以外の仕様は従来通り（register/ensure/可視制御など）",
        "-- v0.9.7-P1-6:",
        "--  - ★ Remotes.StatePush を購読し、Run 画面（setRerollCounts が定義されている画面）に",
        "--      リロール残回数（場/手）を即時反映する汎用ハンドラを追加",
        "",
        "local Router = {}",
        "",
        "--==================================================",
        "-- 依存・状態",
        "--==================================================",
        "local _map       = nil   -- name -> module (table or function)",
        "local _deps      = nil   -- 共有依存（playerGui や remotes など）",
        "local _instances = {}    -- name -> screen instance",
        "local _current   = nil   -- 現在の画面名",
        "",
        "-- Locale（payload.lang 未指定時の補完やログで使用）",
        "local RS     = game:GetService(\"ReplicatedStorage\")",
        "local Config = RS:WaitForChild(\"Config\")",
        "local Locale = require(Config:WaitForChild(\"Locale\"))",
        "",
        "-- Logger",
        "local Logger = require(RS:WaitForChild(\"SharedModules\"):WaitForChild(\"Logger\"))",
        "local LOG    = Logger.scope(\"ScreenRouter\")",
        "",
        "-- Remotes購読コネクション（重複接続防止）",
        "local _remotesConn : RBXScriptConnection? = nil",
        "",
        "--==================================================",
        "-- ヘルパ：可視状態の安全設定（ScreenGui/GuiObject 両対応）",
        "--==================================================",
        "local function setGuiActive(gui: Instance?, active: boolean)",
        "\tif not gui or typeof(gui) ~= \"Instance\" then return end",
        "\tif gui:IsA(\"ScreenGui\") then",
        "\t\tgui.Enabled = active",
        "\telseif gui:IsA(\"GuiObject\") then",
        "\t\tgui.Visible = active",
        "\tend",
        "end",
        "",
        "--==================================================",
        "-- 内部：StatePush → アクティブ画面へ反映（リロール残）",
        "--==================================================",
        "local function handleStatePush(payload:any)",
        "\t-- 現在の画面インスタンスが setRerollCounts を持っていれば反映",
        "\tlocal inst = _current and _instances[_current] or nil",
        "\tif not inst then return end",
        "\tlocal fn = inst.setRerollCounts",
        "\tif type(fn) ~= \"function\" then return end",
        "",
        "\t-- 新キー優先 → 旧キーへフォールバック",
        "\tlocal fieldLeft = payload.rerollField or payload.rerollFieldLeft or payload.rerolls or 0",
        "\tlocal handLeft  = payload.rerollHand  or payload.rerollHandLeft  or payload.hands   or 0",
        "\tlocal phase     = payload.phase",
        "",
        "\tlocal f = tonumber(fieldLeft or 0) or 0",
        "\tlocal h = tonumber(handLeft  or 0) or 0",
        "",
        "\t-- 例外安全で画面側に流す",
        "\tlocal ok, err = pcall(function() fn(inst, f, h, phase) end)",
        "\tif not ok then",
        "\t\tLOG.warn(\"handleStatePush: setRerollCounts failed: %s\", tostring(err))",
        "\tend",
        "end",
        "",
        "--==================================================",
        "-- 初期化",
        "--==================================================",
        "function Router.init(screenMap)",
        "\t_map = screenMap",
        "\tLOG.info(\"initialized\")",
        "end",
        "",
        "function Router.setDeps(d)",
        "\t_deps = d",
        "\t-- 既に生成済みの画面 GUI が未親付けなら補修",
        "\tif _deps and _deps.playerGui then",
        "\t\tfor _, inst in pairs(_instances) do",
        "\t\t\tif inst and inst.gui and inst.gui.Parent == nil then",
        "\t\t\t\tpcall(function() inst.gui.ResetOnSpawn = false end)",
        "\t\t\t\tinst.gui.Parent = _deps.playerGui",
        "\t\t\tend",
        "\t\tend",
        "\tend",
        "\tLOG.debug(\"deps set (playerGui=%s)\", tostring(_deps and _deps.playerGui))",
        "",
        "\t-- ★ Remotes.StatePush の購読を（まだなら）張る",
        "\tif _remotesConn then",
        "\t\t_remotesConn:Disconnect()",
        "\t\t_remotesConn = nil",
        "\tend",
        "\tlocal remFolder = RS:FindFirstChild(\"Remotes\")",
        "\tif remFolder and remFolder:FindFirstChild(\"StatePush\") then",
        "\t\tlocal ev = remFolder.StatePush",
        "\t\t_remotesConn = ev.OnClientEvent:Connect(handleStatePush)",
        "\t\tLOG.info(\"Remotes.StatePush handler wired\")",
        "\telse",
        "\t\tLOG.warn(\"Remotes.StatePush not found; reroll counters won't auto-update\")",
        "\tend",
        "end",
        "",
        "--==================================================",
        "-- 動的登録",
        "--==================================================",
        "function Router.register(name: string, module)",
        "\tif type(name) ~= \"string\" or name == \"\" then",
        "\t\tLOG.warn(\"register: invalid name: %s\", tostring(name))",
        "\t\treturn false",
        "\tend",
        "\tif module == nil then",
        "\t\tLOG.warn(\"register: module is nil for '%s'\", name)",
        "\t\treturn false",
        "\tend",
        "\t_map = _map or {}",
        "\tlocal existed = _map[name] ~= nil",
        "\t_map[name] = module",
        "\tLOG.debug(\"registered screen '%s'%s\", name, existed and \" (overwrote)\" or \"\")",
        "\treturn true",
        "end",
        "",
        "--==================================================",
        "-- 内部：画面生成",
        "--==================================================",
        "local function instantiate(mod, name)",
        "\t-- table で .new(deps)",
        "\tif typeof(mod) == \"table\" and type(mod.new) == \"function\" then",
        "\t\treturn mod.new(_deps)",
        "\tend",
        "\t-- 関数モジュール function(deps)",
        "\tif type(mod) == \"function\" then",
        "\t\treturn mod(_deps)",
        "\tend",
        "\t-- テーブルをそのままインスタンスとして使う（最低限の互換）",
        "\tif typeof(mod) == \"table\" then",
        "\t\treturn mod",
        "\tend",
        "\terror((\"Screen module '%s' is invalid (need table.new or function or instance table)\"):format(tostring(name)))",
        "end",
        "",
        "local function ensure(name)",
        "\tif _instances[name] then return _instances[name] end",
        "\tlocal mod = _map and _map[name]",
        "\tif not mod then",
        "\t\terror((\"Screen '%s' not registered\"):format(tostring(name)))",
        "\tend",
        "\tlocal inst = instantiate(mod, name)",
        "\t_instances[name] = inst",
        "\t-- 画面のルートGUIを PlayerGui へ",
        "\tif inst.gui and _deps and _deps.playerGui and not inst.gui.Parent then",
        "\t\tpcall(function() inst.gui.ResetOnSpawn = false end)",
        "\t\tinst.gui.Parent = _deps.playerGui",
        "\tend",
        "\treturn inst",
        "end",
        "",
        "--==================================================",
        "-- 内部：payload 正規化（※nilのときはnilのまま返す）",
        "--==================================================",
        "local function normalizePayload(payload)",
        "\tif payload == nil then return nil end",
        "\tif payload.lang == nil then",
        "\t\tif type(Locale.getGlobal) == \"function\" then",
        "\t\t\tpayload.lang = Locale.getGlobal()",
        "\t\telse",
        "\t\t\tpayload.lang = \"en\"",
        "\t\tend",
        "\tend",
        "\treturn payload",
        "end",
        "",
        "-- 「lang 以外の有意なフィールドが存在するか」を判定（汎用）",
        "local function hasNonLangFields(t)",
        "\tif type(t) ~= \"table\" then return false end",
        "\tfor k, _ in pairs(t) do",
        "\t\tif k ~= \"lang\" then return true end",
        "\tend",
        "\treturn false",
        "end",
        "",
        "--==================================================",
        "-- 内部：言語の即時反映（inst.setLang があれば最優先で）",
        "--==================================================",
        "local function applyLangIfPossible(inst, lang)",
        "\tif not inst then return end",
        "\tif lang and type(inst.setLang) == \"function\" then",
        "\t\tinst:setLang(lang)",
        "\tend",
        "\t-- グローバルにも同期しておく（あれば）",
        "\tif lang and type(Locale.setGlobal) == \"function\" then",
        "\t\tLocale.setGlobal(lang)",
        "\tend",
        "end",
        "",
        "--==================================================",
        "-- 内部：更新または再描画を呼ぶ",
        "--==================================================",
        "local function updateOrShow(inst, payloadOrNil)",
        "\tif type(inst.update) == \"function\" then",
        "\t\tlocal ok, err = pcall(function() inst:update(payloadOrNil) end)",
        "\t\tif not ok then LOG.warn(\"update failed: %s\", tostring(err)) end",
        "\telseif type(inst.show) == \"function\" then",
        "\t\tlocal ok, err = pcall(function() inst:show(payloadOrNil) end)",
        "\t\tif not ok then LOG.warn(\"show(as update) failed: %s\", tostring(err)) end",
        "\tend",
        "end",
        "",
        "--==================================================",
        "-- 画面表示",
        "--==================================================",
        "function Router.show(arg, payload)",
        "\t-- 1) 互換：引数形を正規化",
        "\tlocal name",
        "\tif type(arg) == \"table\" and arg.name then",
        "\t\tname = arg.name",
        "\t\tpayload = arg._payload",
        "\telse",
        "\t\tname = arg",
        "\tend",
        "\tif type(name) ~= \"string\" then",
        "\t\tLOG.warn(\"show: invalid name: %s\", typeof(name))",
        "\t\treturn",
        "\tend",
        "",
        "\t-- 2) payload を正規化（※nilのままの場合もある）",
        "\tlocal p = normalizePayload(payload)",
        "\t-- ログ用の lang ヒント",
        "\tlocal langHint = (p and p.lang)",
        "\t\tor (type(Locale.getGlobal) == \"function\" and Locale.getGlobal())",
        "\t\tor \"en\"",
        "\tLOG.debug(\"Router.show -> %s | lang=%s (payload=%s)\", name, tostring(langHint), (p and \"table\") or \"nil\")",
        "",
        "\t-- 3) インスタンス確保",
        "\tlocal inst",
        "\tlocal okEnsure, errEnsure = pcall(function() inst = ensure(name) end)",
        "\tif not okEnsure or type(inst) ~= \"table\" then",
        "\t\tLOG.warn(\"show: ensure failed for %s | %s\", tostring(name), tostring(errEnsure))",
        "\t\treturn",
        "\tend",
        "",
        "\t-- 3.5) GUI 親付けの最終確認",
        "\tif inst.gui and _deps and _deps.playerGui and inst.gui.Parent == nil then",
        "\t\tpcall(function() inst.gui.ResetOnSpawn = false end)",
        "\t\tinst.gui.Parent = _deps.playerGui",
        "\tend",
        "",
        "\t-- ★ 4) current==name：ちらつき防止＆状態保護モード",
        "\tif _current == name then",
        "\t\t-- 言語だけは即反映",
        "\t\tapplyLangIfPossible(inst, langHint)",
        "",
        "\t\t-- payload が「空 or langのみ」なら setData は呼ばない（既存 state を保護）",
        "\t\tif p and hasNonLangFields(p) then",
        "\t\t\tif type(inst.setData) == \"function\" then",
        "\t\t\t\tlocal okSD, errSD = pcall(function() inst:setData(p) end)",
        "\t\t\t\tif not okSD then LOG.warn(\"setData(same-screen) failed: %s\", tostring(errSD)) end",
        "\t\t\tend",
        "\t\t\tupdateOrShow(inst, p)  -- 有意データがあるなら渡す",
        "\t\telse",
        "\t\t\tupdateOrShow(inst, nil) -- 有意データがない → 既存状態で再描画",
        "\t\tend",
        "",
        "\t\tLOG.debug(\"Router.show updated same screen for %s (protected)\", name)",
        "\t\treturn",
        "\tend",
        "",
        "\t-- 5) 全画面を安全に非表示（別画面に切替時のみ）",
        "\tfor _, e in pairs(_instances) do",
        "\t\tif e and e.gui then setGuiActive(e.gui, false) end",
        "\tend",
        "",
        "\t-- 6) 言語は最優先で即時適用",
        "\tapplyLangIfPossible(inst, langHint)",
        "",
        "\t-- 7) setData は payload が有意データを持つ場合のみ",
        "\tif p and hasNonLangFields(p) and type(inst.setData) == \"function\" then",
        "\t\tlocal okSD, errSD = pcall(function() inst:setData(p) end)",
        "\t\tif not okSD then LOG.warn(\"setData failed for %s | %s\", tostring(name), tostring(errSD)) end",
        "\tend",
        "",
        "\t-- 8) 旧画面 hide（メソッドがあれば呼ぶ）",
        "\tif _current and _instances[_current] and type(_instances[_current].hide) == \"function\" then",
        "\t\tlocal prev = _instances[_current]",
        "\t\tlocal okHide, errHide = pcall(function() prev:hide() end)",
        "\t\tif not okHide then LOG.warn(\"hide failed for %s | %s\", tostring(_current), tostring(errHide)) end",
        "\tend",
        "",
        "\t_current = name",
        "",
        "\t-- 9) 画面表示（メソッドがあれば呼ぶ）",
        "\tif type(inst.show) == \"function\" then",
        "\t\tlocal okShow, errShow = pcall(function() inst:show(p) end)",
        "\t\tif not okShow then LOG.warn(\"show method failed for %s | %s\", tostring(name), tostring(errShow)) end",
        "\tend",
        "",
        "\t-- 10) 最終的に可視化を担保"
      ],
      "truncated": true,
      "analysis": {
        "waitForChild": [
          "Config",
          "Locale",
          "SharedModules",
          "Logger"
        ],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 1
      }
    },
    {
      "path": "src/client/ui/screens/HomeScreen.lua",
      "ext": "lua",
      "binary": false,
      "size": 18434,
      "mtime": "2025-10-07T20:18:20.517592+00:00",
      "head": [
        "-- StarterPlayerScripts/UI/screens/HomeScreen.lua",
        "-- v0.9.5-P0-6/10 (landscape only, 1-column menu, relative widths)",
        "--  - 横画面専用（縦想定は撤去）",
        "--  - メニューは常に中央1列 / 幅は相対 + Max 640px（広画面で横に伸びすぎない）",
        "--  - タイトル群を上段に凝縮（JP大/EN小）・余白最適化",
        "--  - BETAバッジは常に1行表示（折返し禁止）",
        "--  - 言語切替（EN/JA）/「同期中…」/START有効化の既存ロジックは維持",
        "",
        "local Home = {}",
        "Home.__index = Home",
        "",
        "--========================",
        "-- Services / Locale",
        "--========================",
        "local Players = game:GetService(\"Players\")",
        "local RS      = game:GetService(\"ReplicatedStorage\")",
        "",
        "local Locale  = require(RS:WaitForChild(\"Config\"):WaitForChild(\"Locale\"))",
        "local PatchNotesModal = require(script.Parent:WaitForChild(\"PatchNotesModal\"))",
        "",
        "-- デバイス幅が極端に広い時のボタン横伸びを抑える上限(px)",
        "local MENU_MAX_W = 640",
        "-- スマホ〜小型画面での最低幅(px)",
        "local MENU_MIN_W = 280",
        "-- 相対ベースの標準幅（画面幅に対する割合）",
        "local MENU_W_SCALE = 0.36  -- 以前より細身に（0.46 → 0.36 目安）",
        "",
        "-- BETA/言語チップの右端安全余白（px）",
        "local RIGHT_SAFE_PAD = 20",
        "",
        "local function detectOSLang()",
        "\tlocal lp  = Players.LocalPlayer",
        "\tlocal lid = (lp and lp.LocaleId) and string.lower(lp.LocaleId) or \"en-us\"",
        "\treturn (string.sub(lid, 1, 2) == \"ja\") and \"ja\" or \"en\"",
        "end",
        "",
        "local function pickLang(forced)",
        "\tif forced == \"ja\" or forced == \"en\" then return forced end",
        "\tif typeof(Locale.pick) == \"function\" then",
        "\t\tlocal ok, v = pcall(Locale.pick)",
        "\t\tif ok and (v == \"ja\" or v == \"en\") then return v end",
        "\tend",
        "\treturn detectOSLang()",
        "end",
        "",
        "local function makeL(dict) return function(k) return dict[k] or k end end",
        "local function Dget(dict, key, fallback) return (dict and dict[key]) or fallback end",
        "",
        "--========================",
        "-- Helpers",
        "--========================",
        "local function setInteractable(btn: TextButton, on: boolean)",
        "\tbtn.AutoButtonColor        = on",
        "\tbtn.Active                 = on",
        "\tbtn.BackgroundTransparency = on and 0 or 0.5",
        "\tbtn.TextTransparency       = on and 0 or 0.4",
        "end",
        "",
        "local function notify(title: string, text: string, duration: number?)",
        "\tpcall(function()",
        "\t\tgame.StarterGui:SetCore(\"SendNotification\", {",
        "\t\t\tTitle    = title,",
        "\t\t\tText     = text,",
        "\t\t\tDuration = duration or 2,",
        "\t\t})",
        "\tend)",
        "end",
        "",
        "local function syncingLabel(lang: string, dict)",
        "\tif lang == \"ja\" then",
        "\t\treturn Dget(dict, \"BTN_SYNCING\", \"同期中…\")",
        "\telse",
        "\t\treturn Dget(dict, \"BTN_SYNCING\", \"Syncing…\")",
        "\tend",
        "end",
        "",
        "--========================",
        "-- Class",
        "--========================",
        "function Home.new(deps)",
        "\tlocal self = setmetatable({}, Home)",
        "\tself.deps = deps",
        "\tself.hasSave = false",
        "",
        "\tself.lang = pickLang(deps and deps.lang)",
        "\tself.Dict = (typeof(Locale.get)==\"function\" and Locale.get(self.lang)) or Locale[self.lang] or Locale.en",
        "\tself._L   = makeL(self.Dict)",
        "\tif typeof(Locale.setGlobal) == \"function\" then",
        "\t\tLocale.setGlobal(self.lang)",
        "\tend",
        "",
        "\t-- ルートGUI（横画面専用）",
        "\tlocal g = Instance.new(\"ScreenGui\")",
        "\tg.Name             = \"HomeScreen\"",
        "\tg.ResetOnSpawn     = false",
        "\tg.IgnoreGuiInset   = true",
        "\tg.DisplayOrder     = 100",
        "\tg.ZIndexBehavior   = Enum.ZIndexBehavior.Sibling",
        "\tg.Enabled          = false",
        "\tself.gui           = g",
        "",
        "\t--================ 背景 =================",
        "\tlocal bg = Instance.new(\"ImageLabel\")",
        "\tbg.Name                   = \"Background\"",
        "\tbg.Size                   = UDim2.fromScale(1,1)",
        "\tbg.BackgroundTransparency = 1",
        "\tbg.Image                  = \"rbxassetid://132353504528822\"",
        "\tbg.ScaleType              = Enum.ScaleType.Crop",
        "\tbg.ZIndex                 = 0",
        "\tbg.Parent                 = g",
        "",
        "\tlocal dim = Instance.new(\"Frame\")",
        "\tdim.Name                   = \"Dimmer\"",
        "\tdim.Size                   = UDim2.fromScale(1,1)",
        "\tdim.BackgroundColor3       = Color3.fromRGB(0,0,0)",
        "\tdim.BackgroundTransparency = 0.32",
        "\tdim.ZIndex                 = 1",
        "\tdim.Parent                 = g",
        "",
        "\tlocal grad = Instance.new(\"UIGradient\")",
        "\tgrad.Rotation   = 90",
        "\tgrad.Color      = ColorSequence.new({",
        "\t\tColorSequenceKeypoint.new(0.00, Color3.fromRGB(0,0,0)),",
        "\t\tColorSequenceKeypoint.new(0.20, Color3.fromRGB(40,40,40)),",
        "\t\tColorSequenceKeypoint.new(0.50, Color3.fromRGB(70,70,70)),",
        "\t\tColorSequenceKeypoint.new(0.80, Color3.fromRGB(40,40,40)),",
        "\t\tColorSequenceKeypoint.new(1.00, Color3.fromRGB(0,0,0)),",
        "\t})",
        "\tgrad.Transparency= NumberSequence.new({",
        "\t\tNumberSequenceKeypoint.new(0.00, 0.48),",
        "\t\tNumberSequenceKeypoint.new(0.20, 0.40),",
        "\t\tNumberSequenceKeypoint.new(0.50, 0.22),",
        "\t\tNumberSequenceKeypoint.new(0.80, 0.40),",
        "\t\tNumberSequenceKeypoint.new(1.00, 0.48),",
        "\t})",
        "\tgrad.Parent = dim",
        "",
        "\t--================ 前景 =================",
        "\tlocal ui = Instance.new(\"Frame\")",
        "\tui.Name                   = \"UIRoot\"",
        "\tui.Size                   = UDim2.fromScale(1,1)",
        "\tui.BackgroundTransparency = 1",
        "\tui.ZIndex                 = 2",
        "\tui.Parent                 = g",
        "",
        "\t-- タイトル群（上段に凝集）",
        "\tlocal titleGroup = Instance.new(\"Frame\")",
        "\ttitleGroup.Name                   = \"TitleGroup\"",
        "\ttitleGroup.AnchorPoint            = Vector2.new(0.5, 0)",
        "\ttitleGroup.Position               = UDim2.fromScale(0.5, 0.05)",
        "\ttitleGroup.Size                   = UDim2.fromScale(0.9, 0) -- 横は90%で中央、縦は自動",
        "\ttitleGroup.BackgroundTransparency = 1",
        "\ttitleGroup.AutomaticSize          = Enum.AutomaticSize.Y",
        "\ttitleGroup.ZIndex                 = 2",
        "\ttitleGroup.Parent                 = ui",
        "",
        "\tlocal tLayout = Instance.new(\"UIListLayout\")",
        "\ttLayout.FillDirection     = Enum.FillDirection.Vertical",
        "\ttLayout.Padding           = UDim.new(0, 6) -- 近めに",
        "\ttLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center",
        "\ttLayout.VerticalAlignment   = Enum.VerticalAlignment.Top",
        "\ttLayout.SortOrder           = Enum.SortOrder.LayoutOrder",
        "\ttLayout.Parent              = titleGroup",
        "",
        "\tself.titleJP = Instance.new(\"TextLabel\")",
        "\tself.titleJP.Name                   = \"TitleJP\"",
        "\tself.titleJP.Size                   = UDim2.new(1, 0, 0, 76)",
        "\tself.titleJP.BackgroundTransparency = 1",
        "\tself.titleJP.Font                   = Enum.Font.GothamBlack",
        "\tself.titleJP.TextScaled             = true",
        "\tself.titleJP.TextColor3             = Color3.fromRGB(245,245,245)",
        "\tself.titleJP.TextStrokeColor3       = Color3.fromRGB(0,0,0)",
        "\tself.titleJP.TextStrokeTransparency = 0.25",
        "\tself.titleJP.ZIndex                 = 2",
        "\tself.titleJP.Parent                 = titleGroup",
        "",
        "\tself.titleEN = Instance.new(\"TextLabel\")",
        "\tself.titleEN.Name                   = \"TitleEN\"",
        "\tself.titleEN.Size                   = UDim2.new(1,0,0,38)",
        "\tself.titleEN.BackgroundTransparency = 1",
        "\tself.titleEN.Font                   = Enum.Font.Gotham",
        "\tself.titleEN.TextScaled             = true",
        "\tself.titleEN.TextColor3             = Color3.fromRGB(235,235,235)",
        "\tself.titleEN.TextStrokeColor3       = Color3.fromRGB(0,0,0)",
        "\tself.titleEN.TextStrokeTransparency = 0.35",
        "\tself.titleEN.ZIndex                 = 2",
        "\tself.titleEN.Parent                 = titleGroup",
        "",
        "\tself.statusLabel = Instance.new(\"TextLabel\")",
        "\tself.statusLabel.Name                   = \"Status\"",
        "\tself.statusLabel.Size                   = UDim2.new(1,0,0,26)",
        "\tself.statusLabel.BackgroundTransparency = 1",
        "\tself.statusLabel.Font                   = Enum.Font.Gotham",
        "\tself.statusLabel.TextSize               = 20",
        "\tself.statusLabel.TextColor3             = Color3.fromRGB(230,230,230)",
        "\tself.statusLabel.TextStrokeColor3       = Color3.fromRGB(0,0,0)",
        "\tself.statusLabel.TextStrokeTransparency = 0.6",
        "\tself.statusLabel.TextXAlignment         = Enum.TextXAlignment.Center",
        "\tself.statusLabel.ZIndex                 = 2",
        "\tself.statusLabel.Parent                 = titleGroup",
        "",
        "\t--================ メニュー（中央1列） =================",
        "\tlocal menu = Instance.new(\"Frame\")",
        "\tmenu.Name                   = \"Menu\"",
        "\tmenu.AnchorPoint            = Vector2.new(0.5, 0)",
        "\tmenu.Position               = UDim2.fromScale(0.5, 0.32) -- タイトルと被らない位置",
        "\tmenu.Size                   = UDim2.new(MENU_W_SCALE, 0, 0, 10) -- 幅=相対、縦は自動",
        "\tmenu.AutomaticSize          = Enum.AutomaticSize.Y",
        "\tmenu.BackgroundTransparency = 1",
        "\tmenu.ZIndex                 = 2",
        "\tmenu.Parent                 = ui",
        "",
        "\t-- 幅の上限/下限で横に伸びすぎない・細すぎない",
        "\tlocal menuSizeLimit = Instance.new(\"UISizeConstraint\")",
        "\tmenuSizeLimit.MaxSize = Vector2.new(MENU_MAX_W, math.huge)",
        "\tmenuSizeLimit.MinSize = Vector2.new(MENU_MIN_W, 0)",
        "\tmenuSizeLimit.Parent  = menu",
        "",
        "\tlocal layout = Instance.new(\"UIListLayout\")",
        "\tlayout.Padding              = UDim.new(0, 10)",
        "\tlayout.HorizontalAlignment  = Enum.HorizontalAlignment.Center",
        "\tlayout.VerticalAlignment    = Enum.VerticalAlignment.Top",
        "\tlayout.SortOrder            = Enum.SortOrder.LayoutOrder",
        "\tlayout.Parent               = menu",
        "",
        "\tlocal function makeBtn(text: string)",
        "\t\tlocal b = Instance.new(\"TextButton\")",
        "\t\t-- 高さは相対 + 上限/下限で制御（端末差吸収）",
        "\t\tb.Size                   = UDim2.new(1, 0, 0.085, 0) -- 親(menu)に対して相対高さ",
        "\t\tlocal bh = Instance.new(\"UISizeConstraint\")",
        "\t\tbh.MinSize = Vector2.new(0, 44)",
        "\t\tbh.MaxSize = Vector2.new(10000, 64)",
        "\t\tbh.Parent  = b",
        "",
        "\t\tb.BackgroundColor3       = Color3.fromRGB(30,34,44)",
        "\t\tb.BackgroundTransparency = 0.12",
        "\t\tb.BorderSizePixel        = 0",
        "\t\tb.AutoButtonColor        = true",
        "\t\tb.Text                   = text",
        "\t\tb.TextColor3             = Color3.fromRGB(235,235,235)",
        "\t\tb.Font                   = Enum.Font.GothamMedium",
        "\t\tb.TextScaled             = true",
        "\t\t-- 文字が大きすぎないように上限",
        "\t\tlocal ts = Instance.new(\"UITextSizeConstraint\"); ts.MaxTextSize = 24; ts.Parent = b",
        "\t\tb.ZIndex                 = 2",
        "\t\tb.Parent                 = menu",
        "",
        "\t\tlocal uic = Instance.new(\"UICorner\"); uic.CornerRadius = UDim.new(0, 12); uic.Parent = b",
        "\t\tlocal stroke = Instance.new(\"UIStroke\"); stroke.Color = Color3.fromRGB(70,75,90); stroke.Thickness = 1; stroke.Parent = b",
        "\t\tlocal shadow = Instance.new(\"UIStroke\"); shadow.Color = Color3.fromRGB(0,0,0); shadow.Thickness = 3; shadow.Transparency = 0.9; shadow.ApplyStrokeMode = Enum.ApplyStrokeMode.Border; shadow.Parent = b",
        "\t\treturn b",
        "\tend",
        "",
        "\tself.btnStart     = makeBtn(\"\")",
        "\tself.btnShrine    = makeBtn(\"\")",
        "\tself.btnItems     = makeBtn(\"\")",
        "\tself.btnSettings  = makeBtn(\"\")",
        "\tself.btnPatch     = makeBtn(\"\")",
        "",
        "\t--================ BETA バッジ（右下・1行固定） =================",
        "\tlocal beta = Instance.new(\"TextLabel\")",
        "\tbeta.Name                   = \"BetaBadge\"",
        "\tbeta.AnchorPoint            = Vector2.new(1,1)",
        "\tbeta.Position               = UDim2.new(1, -(12 + RIGHT_SAFE_PAD), 1, -12)",
        "\tbeta.BackgroundTransparency = 0.25",
        "\tbeta.BackgroundColor3       = Color3.fromRGB(20,22,28)",
        "\tbeta.Font                   = Enum.Font.GothamBold",
        "\tbeta.TextSize               = 16",
        "\tbeta.TextColor3             = Color3.fromRGB(255,255,255)",
        "\tbeta.ZIndex                 = 3",
        "\tbeta.RichText               = false",
        "\tbeta.TextWrapped            = false -- ← 折返し禁止で二列化防止",
        "\tbeta.LineHeight             = 1.0",
        "\tbeta.AutomaticSize          = Enum.AutomaticSize.XY",
        "\tbeta.Parent                 = ui",
        "\tlocal betaCorner = Instance.new(\"UICorner\"); betaCorner.CornerRadius = UDim.new(0, 8); betaCorner.Parent = beta",
        "\tlocal betaPad = Instance.new(\"UIPadding\")",
        "\tbetaPad.PaddingLeft   = UDim.new(0,10)",
        "\tbetaPad.PaddingRight  = UDim.new(0,10)",
        "\tbetaPad.PaddingTop    = UDim.new(0,4)",
        "\tbetaPad.PaddingBottom = UDim.new(0,4)",
        "\tbetaPad.Parent        = beta",
        "\tself.betaLabel = beta",
        "",
        "\t--================ 言語スイッチ（右上・1行固定） =================",
        "\tlocal langBox = Instance.new(\"Frame\")",
        "\tlangBox.Name                   = \"LangBox\"",
        "\tlangBox.AnchorPoint            = Vector2.new(1,0)",
        "\tlangBox.Position               = UDim2.new(1, -(12 + RIGHT_SAFE_PAD), 0, 12)",
        "\tlangBox.BackgroundColor3       = Color3.fromRGB(20,22,28)",
        "\tlangBox.BackgroundTransparency = 0.25",
        "\tlangBox.ZIndex                 = 3",
        "\tlangBox.AutomaticSize          = Enum.AutomaticSize.XY",
        "\tlangBox.Parent                 = ui",
        "\tlocal lbCorner = Instance.new(\"UICorner\"); lbCorner.CornerRadius = UDim.new(0, 10); lbCorner.Parent = langBox",
        "\tlocal lbPad    = Instance.new(\"UIPadding\")",
        "\tlbPad.PaddingLeft   = UDim.new(0,8)",
        "\tlbPad.PaddingRight  = UDim.new(0,8)",
        "\tlbPad.PaddingTop    = UDim.new(0,4)",
        "\tlbPad.PaddingBottom = UDim.new(0,4)"
      ],
      "truncated": true,
      "analysis": {
        "waitForChild": [
          "Config",
          "Locale",
          "PatchNotesModal"
        ],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 6,
          "fromOffset": 0,
          "new": 8
        },
        "locale": {
          "jp_literals": 2,
          "ja_literals": 13
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/client/ui/screens/KitoPickView.lua",
      "ext": "lua",
      "binary": false,
      "size": 18522,
      "mtime": "2025-10-07T16:22:38.363514+00:00",
      "head": [
        "-- StarterPlayerScripts/UI/screens/KitoPickView.lua",
        "-- v0.9.RESP-4 (Header-right buttons / no footer)",
        "--  - Skip / Confirm をヘッダー右上へ（解説と同じ行）",
        "--  - フッター廃止（FOOTER_H=0）/ グリッド領域を拡大",
        "--  - Scroll/Grid は ClipsDescendants=false（説明テキストが隠れない）",
        "--  - 2段×6列の相対グリッドは維持",
        "",
        "local Players    = game:GetService(\"Players\")",
        "local RS         = game:GetService(\"ReplicatedStorage\")",
        "local StarterGui = game:GetService(\"StarterGui\")",
        "local LP         = Players.LocalPlayer",
        "",
        "-- Remotes",
        "local Remotes  = RS:WaitForChild(\"Remotes\")",
        "local EvDecide = Remotes:WaitForChild(\"KitoPickDecide\")",
        "",
        "-- Signals",
        "local ClientSignals = RS:WaitForChild(\"ClientSignals\")",
        "local SigIncoming   = ClientSignals:WaitForChild(\"KitoPickIncoming\")",
        "local SigResult     = ClientSignals:WaitForChild(\"KitoPickResult\")",
        "",
        "-- Logger",
        "local Logger = require(RS:WaitForChild(\"SharedModules\"):WaitForChild(\"Logger\"))",
        "local LOG    = Logger.scope(\"KitoPickView\")",
        "",
        "-- Router",
        "local UI_ROOT = script.Parent and script.Parent.Parent",
        "local ScreenRouter = nil",
        "pcall(function()",
        "\tif UI_ROOT then",
        "\t\tScreenRouter = require(UI_ROOT:WaitForChild(\"ScreenRouter\"))",
        "\tend",
        "end)",
        "",
        "-- Styles（任意）",
        "local Styles do",
        "\tlocal ok, mod = pcall(function()",
        "\t\treturn require(script.Parent.Parent:WaitForChild(\"styles\"):WaitForChild(\"KitoPickStyles\"))",
        "\tend)",
        "\tStyles = ok and mod or nil",
        "end",
        "",
        "-- VM",
        "local VM = require(script.Parent.Parent:WaitForChild(\"viewmodels\"):WaitForChild(\"KitoPickVM\"))",
        "local kindToJp     = assert(VM.kindToJp, \"KitoPickVM.kindToJp missing\")",
        "local reasonToText = assert(VM.reasonToText, \"KitoPickVM.reasonToText missing\")",
        "",
        "-- Renderer",
        "local KitoPickRenderer = require(script.Parent.Parent",
        "\t:WaitForChild(\"components\")",
        "\t:WaitForChild(\"renderers\")",
        "\t:WaitForChild(\"KitoPickRenderer\"))",
        "",
        "-- ShopDefs（祈祷の名称/説明参照）",
        "local okDefs, ShopDefs = pcall(function()",
        "\treturn require(RS:WaitForChild(\"SharedModules\"):WaitForChild(\"ShopDefs\"))",
        "end)",
        "",
        "local function _normId(id)",
        "\tif not id then return nil end",
        "\tid = tostring(id)",
        "\treturn id, (id:gsub(\"%.\", \"_\")), (id:gsub(\"_\", \".\"))",
        "end",
        "",
        "local function findKitoByEffectId(effectId)",
        "\tif not okDefs or not ShopDefs or not ShopDefs.POOLS or not ShopDefs.POOLS.kito then return nil end",
        "\tlocal a,b,c = _normId(effectId)",
        "\tfor _, item in ipairs(ShopDefs.POOLS.kito) do",
        "\t\tlocal eA,eB,eC = _normId(item.effect or item.id)",
        "\t\tif eA==a or eA==b or eA==c or eB==a or eB==b or eB==c or eC==a or eC==b or eC==c then return item end",
        "\t\tlocal iA,iB,iC = _normId(item.id)",
        "\t\tif iA==a or iA==b or iA==c or iB==a or iB==b or iB==c or iC==a or iC==b or iC==c then return item end",
        "\tend",
        "\treturn nil",
        "end",
        "",
        "local function pickDesc(item)",
        "\tif not item then return nil end",
        "\treturn item.descJP or item.descEN or \"\"",
        "end",
        "",
        "-- 状態",
        "local View, ui = {}, nil",
        "local refs, renderer, _uiBuilt = {}, nil, false",
        "local current = {",
        "\tsessionId=nil, effectId=nil, targetKind=\"bright\",",
        "\tlist={}, eligibility={}, selectedUid=nil, busy=false,",
        "}",
        "",
        "--========= レイアウト係数 =========--",
        "local GRID_COLS = 6",
        "local GRID_ROWS = 2",
        "local PAD_X     = 0.008   -- 横ギャップ",
        "local PAD_Y     = 0.012   -- 縦ギャップ",
        "local HEADER_H  = 0.16    -- ヘッダー（左:説明 / 右:ボタン）",
        "local FOOTER_H  = 0.0     -- フッター廃止",
        "local MARGIN_Y  = 0.02",
        "",
        "-- 画面に応じてパネル幅/高さ（相対）を決める：縦を広めに",
        "local function calcPanelWH(viewW, viewH)",
        "\tlocal ar = viewW / math.max(1, viewH)",
        "\tlocal targetW = 0.98",
        "\tlocal targetAR = math.clamp(ar * 0.95, 1.45, 1.85)  -- W/H",
        "\tlocal targetH  = targetW * (ar / targetAR)",
        "\ttargetH = math.clamp(targetH, 0.68, 0.90)",
        "\treturn targetW, targetH",
        "end",
        "",
        "local function _addTextScaledMax(label: TextLabel|TextButton, maxSize:number)",
        "\tlabel.TextScaled = true",
        "\tlocal lim = Instance.new(\"UITextSizeConstraint\")",
        "\tlim.MaxTextSize = maxSize",
        "\tlim.Parent = label",
        "\treturn lim",
        "end",
        "",
        "--========= UI build =========--",
        "local function make(name, className, props, parent)",
        "\tlocal inst = Instance.new(className); inst.Name = name",
        "\tfor k,v in pairs(props or {}) do inst[k] = v end",
        "\tinst.Parent = parent; return inst",
        "end",
        "",
        "local function ensureGui()",
        "\tif not renderer then",
        "\t\tlocal inst = KitoPickRenderer.create(Players.LocalPlayer:WaitForChild(\"PlayerGui\"))",
        "\t\tassert(type(inst) == \"table\", \"KitoPickRenderer.create must return table\")",
        "\t\trenderer = inst; ui = renderer.gui or renderer.root",
        "\t\tassert(ui, \"KitoPickRenderer must expose 'gui' or 'root'\")",
        "\tend",
        "\tif ui and ui.Parent and _uiBuilt and (ui:FindFirstChild(\"Panel\", true) ~= nil) then",
        "\t\treturn ui",
        "\tend",
        "",
        "\tlocal C = Styles and Styles.colors or {}",
        "",
        "\tlocal shade = make(\"Shade\",\"Frame\",{",
        "\t\tBackgroundColor3=C.shade or Color3.new(0,0,0),",
        "\t\tBackgroundTransparency=0.35,",
        "\t\tSize=UDim2.fromScale(1,1)",
        "\t}, ui)",
        "",
        "\tlocal panel = make(\"Panel\",\"Frame\",{",
        "\t\tAnchorPoint=Vector2.new(0.5,0.5),",
        "\t\tPosition=UDim2.fromScale(0.5,0.5),",
        "\t\tSize=UDim2.fromScale(0.98,0.70), -- 初期。後で再計算",
        "\t\tBackgroundColor3=C.panelBg or Color3.fromRGB(24,24,28),",
        "\t\tBorderSizePixel=0,",
        "\t}, shade)",
        "\tmake(\"UICorner\",\"UICorner\",{CornerRadius=UDim.new(0,18)}, panel)",
        "\tmake(\"UIPadding\",\"UIPadding\",{",
        "\t\tPaddingTop=UDim.new(0,12),PaddingBottom=UDim.new(0,12),",
        "\t\tPaddingLeft=UDim.new(0,12),PaddingRight=UDim.new(0,12),",
        "\t}, panel)",
        "",
        "\t-- ===== ヘッダ：左＝説明 / 右＝ボタンバー =====",
        "\tlocal header = make(\"Header\",\"Frame\",{BackgroundTransparency=1}, panel)",
        "",
        "\t-- 左カラム（解説）",
        "\tlocal headLeft = make(\"HeadLeft\",\"Frame\",{BackgroundTransparency=1}, header)",
        "",
        "\tlocal kitoName = make(\"KitoName\",\"TextLabel\",{",
        "\t\tText=\"\",",
        "\t\tFont=Enum.Font.GothamBold,",
        "\t\tTextColor3=C.kitoNameText or Color3.fromRGB(236,236,246),",
        "\t\tBackgroundTransparency=1, TextXAlignment=Enum.TextXAlignment.Left,",
        "\t}, headLeft); _addTextScaledMax(kitoName, 30)",
        "",
        "\tlocal effect = make(\"Effect\",\"TextLabel\",{",
        "\t\tText=\"\",",
        "\t\tFont=Enum.Font.Gotham, TextWrapped=true,",
        "\t\tTextColor3=C.effectText or Color3.fromRGB(200,200,210),",
        "\t\tBackgroundTransparency=1,",
        "\t\tTextXAlignment=Enum.TextXAlignment.Left,",
        "\t\tTextYAlignment=Enum.TextYAlignment.Top,",
        "\t}, headLeft); _addTextScaledMax(effect, 22)",
        "",
        "\t-- 参考表示（選択数など）※ヘッダ左の下辺に薄く",
        "\tlocal pickInfo = make(\"PickInfo\",\"TextLabel\",{",
        "\t\tText=\"Select 1 card\",",
        "\t\tFont=Enum.Font.Gotham,",
        "\t\tTextColor3=C.pickInfoText or Color3.fromRGB(200,200,210),",
        "\t\tBackgroundTransparency=1,",
        "\t\tTextXAlignment=Enum.TextXAlignment.Left,",
        "\t}, headLeft); _addTextScaledMax(pickInfo, 20)",
        "",
        "\t-- 右カラム（ボタンバー）",
        "\tlocal btnRow = make(\"BtnRow\",\"Frame\",{BackgroundTransparency=1}, header)",
        "",
        "\tlocal hlist = Instance.new(\"UIListLayout\")",
        "\thlist.FillDirection = Enum.FillDirection.Horizontal",
        "\thlist.HorizontalAlignment = Enum.HorizontalAlignment.Right",
        "\thlist.VerticalAlignment = Enum.VerticalAlignment.Center",
        "\thlist.Padding = UDim.new(0, 10)",
        "\thlist.Parent = btnRow",
        "",
        "\tlocal skipBtn = make(\"Skip\",\"TextButton\",{",
        "\t\tText=\"Skip\", Font=Enum.Font.GothamBold,",
        "\t\tTextColor3=C.skipText or Color3.fromRGB(230,230,240),",
        "\t\tAutoButtonColor=true, BackgroundColor3=C.skipBg or Color3.fromRGB(70,70,78),",
        "\t\tBackgroundTransparency=0.05,",
        "\t\tSize = UDim2.fromScale(0.48, 0.86),",
        "\t}, btnRow); make(\"UICorner\",\"UICorner\",{CornerRadius=UDim.new(0,10)}, skipBtn); _addTextScaledMax(skipBtn, 26)",
        "",
        "\tlocal confirm = make(\"Confirm\",\"TextButton\",{",
        "\t\tText=\"Confirm\", Font=Enum.Font.GothamBold,",
        "\t\tTextColor3=C.confirmText or Color3.fromRGB(16,16,20),",
        "\t\tAutoButtonColor=true, BackgroundColor3=C.confirmBg or Color3.fromRGB(120,200,120),",
        "\t\tBackgroundTransparency=0.0,",
        "\t\tSize = UDim2.fromScale(0.48, 0.86),",
        "\t}, btnRow); make(\"UICorner\",\"UICorner\",{CornerRadius=UDim.new(0,10)}, confirm); _addTextScaledMax(confirm, 26)",
        "",
        "\t-- ===== グリッド（2段×6列）=====",
        "\tlocal gridHolder = make(\"GridHolder\",\"Frame\",{BackgroundTransparency=1}, panel)",
        "\tlocal scroll = make(\"Scroll\",\"ScrollingFrame\",{",
        "\t\tBackgroundTransparency=1, CanvasSize=UDim2.new(),",
        "\t\tScrollBarThickness=6, BorderSizePixel=0,",
        "\t\tScrollingDirection=Enum.ScrollingDirection.X,",
        "\t\tClipsDescendants=false, -- ★ テキストのクリップ防止",
        "\t}, gridHolder)",
        "\tlocal gridFrame = make(\"Grid\",\"Frame\",{",
        "\t\tBackgroundTransparency=1, Size=UDim2.new(1,0,1,0),",
        "\t\tClipsDescendants=false, -- ★ テキストのクリップ防止",
        "\t}, scroll)",
        "\tlocal layout = make(\"UIGrid\",\"UIGridLayout\",{",
        "\t\tHorizontalAlignment=Enum.HorizontalAlignment.Left,",
        "\t\tSortOrder=Enum.SortOrder.LayoutOrder,",
        "\t\tFillDirection=Enum.FillDirection.Vertical,",
        "\t\tFillDirectionMaxCells=GRID_ROWS,",
        "\t}, gridFrame)",
        "",
        "\trefs.panel      = panel",
        "\trefs.header     = header",
        "\trefs.headLeft   = headLeft",
        "\trefs.kitoName   = kitoName",
        "\trefs.effect     = effect",
        "\trefs.pickInfo   = pickInfo",
        "\trefs.btnRow     = btnRow",
        "\trefs.skipBtn    = skipBtn",
        "\trefs.confirm    = confirm",
        "\trefs.gridHolder = gridHolder",
        "\trefs.scroll     = scroll",
        "\trefs.gridFrame  = gridFrame",
        "\trefs.gridLayout = layout",
        "",
        "\t_uiBuilt = true",
        "\treturn ui",
        "end",
        "",
        "--========= レスポンシブ適用 =========--",
        "local function applyPanelAndGrid()",
        "\tif not (ui and refs.panel and refs.header and refs.gridHolder and refs.btnRow and refs.headLeft) then return end",
        "\tlocal vw, vh = math.max(1, ui.AbsoluteSize.X), math.max(1, ui.AbsoluteSize.Y)",
        "",
        "\tlocal pw, ph = calcPanelWH(vw, vh)",
        "\trefs.panel.Size = UDim2.fromScale(pw, ph)",
        "",
        "\t-- 縦配分",
        "\tlocal headerH = HEADER_H",
        "\tlocal bodyTop = headerH",
        "\tlocal bodyH   = 1 - headerH - FOOTER_H",
        "",
        "\t-- ヘッダー全体",
        "\trefs.header.Position = UDim2.fromScale(0, 0)",
        "\trefs.header.Size     = UDim2.fromScale(1, headerH)",
        "",
        "\t-- ヘッダー左右割り",
        "\tlocal btnWidthScale = 0.42 -- 右のボタンバー幅（好みで）",
        "\trefs.btnRow.AnchorPoint = Vector2.new(1, 0.5)",
        "\trefs.btnRow.Position     = UDim2.fromScale(1, 0.5)",
        "\trefs.btnRow.Size         = UDim2.fromScale(btnWidthScale, 0.9)",
        "",
        "\trefs.headLeft.Position = UDim2.fromScale(0, 0)",
        "\trefs.headLeft.Size     = UDim2.fromScale(1 - btnWidthScale - 0.02, 1)",
        "",
        "\t-- 左内訳（タイトル/説明/補足）",
        "\trefs.kitoName.Position = UDim2.fromScale(0, 0.00)",
        "\trefs.kitoName.Size     = UDim2.fromScale(1, 0.40)",
        "",
        "\trefs.effect.Position   = UDim2.fromScale(0, 0.38)",
        "\trefs.effect.Size       = UDim2.fromScale(1, 0.44)",
        "",
        "\trefs.pickInfo.AnchorPoint = Vector2.new(0,1)",
        "\trefs.pickInfo.Position    = UDim2.fromScale(0, 1)",
        "\trefs.pickInfo.Size        = UDim2.fromScale(1, 0.20)",
        "",
        "\t-- グリッド",
        "\trefs.gridHolder.Position = UDim2.fromScale(0, bodyTop)",
        "\trefs.gridHolder.Size     = UDim2.fromScale(1, bodyH)",
        "",
        "\trefs.scroll.Size = UDim2.new(1, 0, 1, 0) -- フッター無しなので全域",
        "",
        "\t-- 2段×6列のセルサイズ（Scale）",
        "\tlocal cellW = (1 - PAD_X * (GRID_COLS - 1)) / GRID_COLS",
        "\tlocal cellH = (1 - PAD_Y * (GRID_ROWS - 1)) / GRID_ROWS",
        "\trefs.gridLayout.CellSize    = UDim2.new(cellW, 0, cellH, 0)",
        "\trefs.gridLayout.CellPadding = UDim2.new(PAD_X, 0, PAD_Y, 0)",
        "",
        "\t-- CanvasSize 更新",
        "\ttask.defer(function()"
      ],
      "truncated": true,
      "analysis": {
        "waitForChild": [
          "Remotes",
          "KitoPickDecide",
          "ClientSignals",
          "KitoPickIncoming",
          "KitoPickResult",
          "SharedModules",
          "Logger",
          "ScreenRouter",
          "styles",
          "KitoPickStyles",
          "viewmodels",
          "KitoPickVM",
          "components",
          "renderers",
          "KitoPickRenderer",
          "SharedModules",
          "ShopDefs",
          "PlayerGui",
          "PlayerGui"
        ],
        "routerScreens": [
          "kitoPick"
        ],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 20,
          "fromOffset": 1,
          "new": 5
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": true,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/client/ui/screens/PatchNotesModal.lua",
      "ext": "lua",
      "binary": false,
      "size": 9010,
      "mtime": "2025-09-19T10:59:59.205925+00:00",
      "head": [
        "-- StarterPlayerScripts/UI/screens/PatchNotesModal.lua",
        "-- v0.9.7-P2-1  Patch Notes: 前面フルスクリーンモーダル（スクロール）",
        "-- * 外部I/F言語コードを 'ja'/'en' に統一（'jp' 受信時は 'ja' に正規化）",
        "-- * Locale.get() を優先利用（辞書取得の堅牢化）",
        "-- * 言語正規化/初期取得を LocaleUtil に統合",
        "",
        "local Patch = {}",
        "Patch.__index = Patch",
        "",
        "local RS = game:GetService(\"ReplicatedStorage\")",
        "",
        "local Locale        = require(RS:WaitForChild(\"Config\"):WaitForChild(\"Locale\"))",
        "local LocaleUtil    = require(RS:WaitForChild(\"SharedModules\"):WaitForChild(\"LocaleUtil\"))",
        "",
        "-- PatchNotes を安全にロード（任意ファイル）",
        "local function safeLoadPatchNotes()",
        "\tlocal ok, mod = pcall(function()",
        "\t\tlocal cfg = RS:FindFirstChild(\"Config\")",
        "\t\tif not cfg then return nil end",
        "\t\tlocal src = cfg:FindFirstChild(\"PatchNotes\")",
        "\t\treturn src and require(src) or nil",
        "\tend)",
        "\tif ok and type(mod) == \"table\" then",
        "\t\treturn mod",
        "\tend",
        "\treturn nil",
        "end",
        "",
        "local function makeL(dict) return function(k) return dict[k] or k end end",
        "local function Dget(dict, key, fallback) return (dict and dict[key]) or fallback end",
        "",
        "-- \"jp\" を受けたら警告して \"ja\" に、その他は LocaleUtil.norm に委譲",
        "local function normLangJa(v:string?): string",
        "\tlocal raw = tostring(v or \"\"):lower()",
        "\tlocal n = LocaleUtil.norm(raw) or \"en\"",
        "\tif raw == \"jp\" and n == \"ja\" then",
        "\t\twarn(\"[PatchNotesModal] received legacy 'jp'; normalizing to 'ja'\")",
        "\tend",
        "\treturn n",
        "end",
        "",
        "--========================",
        "-- Ctor",
        "--========================",
        "-- opts = { parentGui:ScreenGui, lang:\"ja\"|\"en\" (legacy \"jp\" accepted) }",
        "function Patch.new(opts)",
        "\tlocal self = setmetatable({}, Patch)",
        "",
        "\tself.Locale = Locale",
        "\t-- 指定 > safeGlobal > pickInitial（内部で pick→\"en\" フォールバック）",
        "\tself.lang   = normLangJa((opts and opts.lang) or LocaleUtil.safeGlobal() or LocaleUtil.pickInitial())",
        "",
        "\t-- Locale.get を優先（無ければテーブル直参照 → en フォールバック）",
        "\tlocal dict = (type(self.Locale.get)==\"function\" and self.Locale.get(self.lang))",
        "\t\tor self.Locale[self.lang] or self.Locale.en",
        "\tself.Dict   = dict",
        "\tself._L     = makeL(self.Dict)",
        "\tself.parent = opts and opts.parentGui",
        "",
        "\tself.PatchNotes = safeLoadPatchNotes()",
        "",
        "\t-- ルート（画面全体、最前面）",
        "\tlocal root = Instance.new(\"Frame\")",
        "\troot.Name                   = \"PatchModal\"",
        "\troot.Size                   = UDim2.fromScale(1,1)",
        "\troot.BackgroundColor3       = Color3.fromRGB(0,0,0)",
        "\troot.BackgroundTransparency = 0.35",
        "\troot.ZIndex                 = 50",
        "\troot.Visible                = false",
        "\tif self.parent then root.Parent = self.parent end",
        "\tself.root = root",
        "",
        "\t-- クリック吸収",
        "\tlocal blocker = Instance.new(\"TextButton\")",
        "\tblocker.Name                   = \"Blocker\"",
        "\tblocker.Size                   = UDim2.fromScale(1,1)",
        "\tblocker.BackgroundTransparency = 1",
        "\tblocker.Text                   = \"\"",
        "\tblocker.AutoButtonColor        = false",
        "\tblocker.ZIndex                 = 50",
        "\tblocker.Parent                 = root",
        "",
        "\t-- パネル",
        "\tlocal panel = Instance.new(\"Frame\")",
        "\tpanel.Name                   = \"Panel\"",
        "\tpanel.AnchorPoint            = Vector2.new(0.5, 0.5)",
        "\tpanel.Position               = UDim2.fromScale(0.5, 0.5)",
        "\tpanel.Size                   = UDim2.new(0.84, 0, 0.78, 0)",
        "\tpanel.BackgroundColor3       = Color3.fromRGB(24,26,34)",
        "\tpanel.BackgroundTransparency = 0.05",
        "\tpanel.ZIndex                 = 55",
        "\tpanel.Parent                 = root",
        "\tlocal round = Instance.new(\"UICorner\"); round.CornerRadius = UDim.new(0,16); round.Parent = panel",
        "\tlocal stroke = Instance.new(\"UIStroke\"); stroke.Color = Color3.fromRGB(70,75,90); stroke.Thickness = 1; stroke.Parent = panel",
        "",
        "\t-- ヘッダ（タイトル＋閉じる）",
        "\tlocal header = Instance.new(\"Frame\")",
        "\theader.Name                   = \"Header\"",
        "\theader.Size                   = UDim2.new(1, 0, 0, 52)",
        "\theader.BackgroundTransparency = 1",
        "\theader.ZIndex                 = 56",
        "\theader.Parent                 = panel",
        "",
        "\tlocal title = Instance.new(\"TextLabel\")",
        "\ttitle.Name                   = \"Title\"",
        "\ttitle.Position               = UDim2.new(0, 20, 0, 8)",
        "\ttitle.Size                   = UDim2.new(1, -80, 1, -8)",
        "\ttitle.BackgroundTransparency = 1",
        "\ttitle.Font                   = Enum.Font.GothamBold",
        "\ttitle.TextSize               = 24",
        "\ttitle.TextXAlignment         = Enum.TextXAlignment.Left",
        "\ttitle.TextColor3             = Color3.fromRGB(240,240,240)",
        "\ttitle.ZIndex                 = 56",
        "\ttitle.Parent                 = header",
        "\tself.titleLbl = title",
        "",
        "\tlocal close = Instance.new(\"TextButton\")",
        "\tclose.Name                   = \"Close\"",
        "\tclose.AnchorPoint            = Vector2.new(1,0)",
        "\tclose.Position               = UDim2.new(1, -12, 0, 10)",
        "\tclose.Size                   = UDim2.new(0, 36, 0, 32)",
        "\tclose.BackgroundColor3       = Color3.fromRGB(36,40,52)",
        "\tclose.BackgroundTransparency = 0.1",
        "\tclose.AutoButtonColor        = true",
        "\tclose.Text                   = \"×\"",
        "\tclose.Font                   = Enum.Font.GothamBold",
        "\tclose.TextSize               = 22",
        "\tclose.TextColor3             = Color3.fromRGB(235,235,235)",
        "\tclose.ZIndex                 = 57",
        "\tclose.Parent                 = header",
        "\tlocal cr = Instance.new(\"UICorner\"); cr.CornerRadius = UDim.new(0, 8); cr.Parent = close",
        "\tlocal cs = Instance.new(\"UIStroke\"); cs.Color = Color3.fromRGB(70,75,90); cs.Thickness = 1; cs.Parent = close",
        "\tclose.Activated:Connect(function() self:hide() end)",
        "",
        "\t-- ボディ（スクロール）",
        "\tlocal scroll = Instance.new(\"ScrollingFrame\")",
        "\tscroll.Name                    = \"BodyScroll\"",
        "\tscroll.AnchorPoint            = Vector2.new(0.5, 0)",
        "\tscroll.Position               = UDim2.new(0.5, 0, 0, 56)",
        "\tscroll.Size                   = UDim2.new(1, -24, 1, -66)",
        "\tscroll.BackgroundTransparency = 1",
        "\tscroll.CanvasSize             = UDim2.new(0, 0, 0, 0)",
        "\tscroll.ScrollBarThickness     = 8",
        "\tscroll.AutomaticCanvasSize    = Enum.AutomaticSize.None",
        "\tscroll.ZIndex                 = 55",
        "\tscroll.Parent                 = panel",
        "\tself.scroll = scroll",
        "",
        "\tlocal body = Instance.new(\"TextLabel\")",
        "\tbody.Name                   = \"Body\"",
        "\tbody.Size                   = UDim2.new(1, -20, 0, 0)",
        "\tbody.Position               = UDim2.new(0, 10, 0, 6)",
        "\tbody.BackgroundTransparency = 1",
        "\tbody.Font                   = Enum.Font.Gotham",
        "\tbody.TextSize               = 18",
        "\tbody.TextXAlignment         = Enum.TextXAlignment.Left",
        "\tbody.TextYAlignment         = Enum.TextYAlignment.Top",
        "\tbody.TextWrapped            = true",
        "\tbody.RichText               = true",
        "\tbody.TextColor3             = Color3.fromRGB(235,235,235)",
        "\tbody.ZIndex                 = 55",
        "\tbody.Parent                 = scroll",
        "\tself.bodyLbl = body",
        "",
        "\t-- テキスト変化でリサイズ",
        "\tbody:GetPropertyChangedSignal(\"TextBounds\"):Connect(function()",
        "\t\tlocal h = math.max(0, body.TextBounds.Y)",
        "\t\tbody.Size = UDim2.new(1, -20, 0, h + 8)",
        "\t\tscroll.CanvasSize = UDim2.new(0, 0, 0, h + 20)",
        "\tend)",
        "",
        "\t-- 初期テキスト反映",
        "\tself:_applyText()",
        "",
        "\treturn self",
        "end",
        "",
        "--========================",
        "-- 内部：文字列の決定と適用",
        "--========================",
        "function Patch:_getStrings()",
        "\t-- 既定値（Locale辞書）",
        "\tlocal title = Dget(self.Dict, \"PATCH_TITLE\", \"Patch Notes\")",
        "\tlocal body  = Dget(self.Dict, \"PATCH_BODY\", [[<b>Coming soon...</b>",
        "We’ll post detailed changes here.]])",
        "",
        "\t-- Config/PatchNotes.lua があれば優先",
        "\t-- return { title = {ja=..., en=...}, body={ja=..., en=...} } もしくは title_ja/title_en を想定",
        "\tif self.PatchNotes then",
        "\t\tlocal lang = self.lang -- 'ja' or 'en'",
        "\t\tlocal t = self.PatchNotes.title",
        "\t\tif type(t) == \"table\" and type(t[lang]) == \"string\" then",
        "\t\t\ttitle = t[lang]",
        "\t\telseif type(self.PatchNotes[\"title_\"..lang]) == \"string\" then",
        "\t\t\ttitle = self.PatchNotes[\"title_\"..lang]",
        "\t\tend",
        "\t\tlocal b = self.PatchNotes.body",
        "\t\tif type(b) == \"table\" and type(b[lang]) == \"string\" then",
        "\t\t\tbody = b[lang]",
        "\t\telseif type(self.PatchNotes[\"body_\"..lang]) == \"string\" then",
        "\t\t\tbody = self.PatchNotes[\"body_\"..lang]",
        "\t\tend",
        "\tend",
        "\treturn title, body",
        "end",
        "",
        "function Patch:_applyText()",
        "\tlocal title, body = self:_getStrings()",
        "\tif self.titleLbl then self.titleLbl.Text = title end",
        "\tif self.bodyLbl  then self.bodyLbl.Text  = body  end",
        "\t-- スクロール位置を先頭へ",
        "\tif self.scroll then self.scroll.CanvasPosition = Vector2.new(0,0) end",
        "end",
        "",
        "--========================",
        "-- API",
        "--========================",
        "function Patch:setLanguage(lang)",
        "\tlocal nl = normLangJa(lang)",
        "\tif self.lang == nl then return end",
        "\tself.lang = nl",
        "\t-- Locale.get を優先",
        "\tlocal dict = (type(self.Locale.get)==\"function\" and self.Locale.get(self.lang))",
        "\t\tor self.Locale[self.lang] or self.Locale.en",
        "\tself.Dict = dict",
        "\tself._L   = makeL(self.Dict)",
        "\tself:_applyText()",
        "end",
        "",
        "function Patch:show()",
        "\tif self.root then self.root.Visible = true end",
        "end",
        "",
        "function Patch:hide()",
        "\tif self.root then self.root.Visible = false end",
        "end",
        "",
        "return Patch"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [
          "Config",
          "Locale",
          "SharedModules",
          "LocaleUtil"
        ],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 3,
          "fromOffset": 0,
          "new": 13
        },
        "locale": {
          "jp_literals": 5,
          "ja_literals": 7
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/client/ui/screens/RunScreen.lua",
      "ext": "lua",
      "binary": false,
      "size": 31710,
      "mtime": "2025-10-07T19:44:21.706007+00:00",
      "head": [
        "-- StarterPlayerScripts/UI/screens/RunScreen.lua",
        "-- v0.9.7-P2-12R4 (Responsive pass / single-line buttons + modal ZIndex fix)",
        "--  - buttons が table/Instance どちらでも安全に処理",
        "--  - すべての TextButton を TextScaled + 1行固定（折り返し防止）",
        "--  - GiveUp モーダルは本文(TextLabel)のみ複数行維持、ボタンは1行固定",
        "--  - [FIX-Z] GiveUpConfirm の子要素に明示的な ZIndex を付与（ZIndexBehavior=Global での潜り込み対策）",
        "--  - ほかの挙動は現状維持",
        "",
        "local Run = {}",
        "Run.__index = Run",
        "",
        "local RunService        = game:GetService(\"RunService\")",
        "local ReplicatedStorage = game:GetService(\"ReplicatedStorage\")",
        "local RS                = ReplicatedStorage",
        "",
        "-- Logger",
        "local Logger = require(RS:WaitForChild(\"SharedModules\"):WaitForChild(\"Logger\"))",
        "local LOG    = Logger.scope(\"RunScreen\")",
        "",
        "-- Modules",
        "local Config = RS:WaitForChild(\"Config\")",
        "local Theme  = require(Config:WaitForChild(\"Theme\"))",
        "local Locale = require(Config:WaitForChild(\"Locale\"))",
        "",
        "-- 相対モジュール",
        "local components     = script.Parent.Parent:WaitForChild(\"components\")",
        "local renderersDir   = components:WaitForChild(\"renderers\")",
        "local HandRenderer   = require(renderersDir:WaitForChild(\"HandRenderer\"))",
        "local FieldRenderer  = require(renderersDir:WaitForChild(\"FieldRenderer\"))",
        "local TakenRenderer  = require(renderersDir:WaitForChild(\"TakenRenderer\"))",
        "local ResultModal    = require(components:WaitForChild(\"ResultModal\"))",
        "local Overlay        = require(components:WaitForChild(\"Overlay\"))",
        "local DevTools       = require(components:WaitForChild(\"DevTools\"))",
        "local YakuPanel      = require(components:WaitForChild(\"YakuPanel\"))",
        "local TalismanBoard  = require(components:WaitForChild(\"TalismanBoard\"))",
        "",
        "local lib        = script.Parent.Parent:WaitForChild(\"lib\")",
        "local Format     = require(lib:WaitForChild(\"FormatUtil\"))",
        "",
        "local screensDir = script.Parent",
        "local UIBuilder  = require(screensDir:WaitForChild(\"RunScreenUI\"))",
        "local RemotesCtl = require(screensDir:WaitForChild(\"RunScreenRemotes\"))",
        "",
        "-- ★ 追加：ハイライト機能",
        "local MatchHighlighter = require(screensDir.Parent:WaitForChild(\"highlight\"):WaitForChild(\"MatchHighlighter\"))",
        "",
        "--==================== Responsive helpers ====================",
        "local function _shortSide(w, h) return math.min(math.max(1, w), math.max(1, h)) end",
        "-- 端末係数: 短辺480pxで1.0、小画面ほど1寄り。1000pxで0.0。",
        "local function deviceFactor(w, h)",
        "\tlocal s = _shortSide(w, h)",
        "\tlocal lo, hi = 480, 1000",
        "\tlocal t = 1 - math.clamp((s - lo) / (hi - lo), 0, 1)",
        "\treturn t",
        "end",
        "local function lerp(a,b,t) return a + (b-a)*t end",
        "",
        "-- TextScaled を安全に付ける",
        "-- ※ TextButton は 1行固定（折り返し禁止・はみ出し時は末尾省略）",
        "local function _applyScaled(inst, maxSize)",
        "\tif not (inst and typeof(inst) == \"Instance\" and inst:IsA(\"GuiObject\")) then return end",
        "\tlocal isLabel  = inst:IsA(\"TextLabel\")",
        "\tlocal isButton = inst:IsA(\"TextButton\")",
        "\tif not (isLabel or isButton) then return end",
        "",
        "\tinst.RichText    = inst.RichText and inst.RichText or false",
        "\tinst.TextScaled  = true",
        "\tif isButton then",
        "\t\tinst.TextWrapped  = false",
        "\t\tinst.TextTruncate = Enum.TextTruncate.AtEnd",
        "\t\tinst.LineHeight   = 1.0",
        "\tend",
        "\t-- Label 側は既存レイアウト尊重（Wrapped 指定があれば維持）",
        "",
        "\tlocal lim = inst:FindFirstChildOfClass(\"UITextSizeConstraint\")",
        "\tif not lim then",
        "\t\tlim = Instance.new(\"UITextSizeConstraint\")",
        "\t\tlim.Parent = inst",
        "\tend",
        "\tlim.MaxTextSize = math.max(8, math.floor(maxSize))",
        "\t-- 小さすぎる端末向けの下限（任意）",
        "\tif lim.MinTextSize ~= nil then lim.MinTextSize = 10 end",
        "end",
        "",
        "-- 配下の TextButton / TextLabel に一括適用",
        "local function _scaleTextsUnder(root, titleMax, bodyMax, btnMax)",
        "\tif not (root and typeof(root) == \"Instance\" and root.GetDescendants) then return end",
        "\tfor _, inst in ipairs(root:GetDescendants()) do",
        "\t\tif inst:IsA(\"TextLabel\") then",
        "\t\t\t_applyScaled(inst, bodyMax)",
        "\t\telseif inst:IsA(\"TextButton\") then",
        "\t\t\t_applyScaled(inst, btnMax) -- ←ボタンは1行固定",
        "\t\tend",
        "\tend",
        "end",
        "",
        "--==================================================",
        "-- Lang helpers（最小限）",
        "--==================================================",
        "",
        "local function normLangJa(lang)",
        "\tlocal v = tostring(lang or \"\"):lower()",
        "\tif v == \"jp\" then",
        "\t\tLOG.warn(\"[Locale] received legacy 'jp'; normalize to 'ja'\")",
        "\t\treturn \"ja\"",
        "\telseif v == \"ja\" or v == \"en\" then",
        "\t\treturn v",
        "\tend",
        "\treturn nil",
        "end",
        "",
        "local function mapLangForPanel(lang)",
        "\tlocal n = normLangJa(lang)",
        "\treturn (n == \"ja\") and \"ja\" or \"en\"",
        "end",
        "",
        "local function safeGetGlobalLang()",
        "\tif typeof(Locale.getGlobal) == \"function\" then",
        "\t\tlocal ok, v = pcall(Locale.getGlobal)",
        "\t\tif ok then",
        "\t\t\tlocal n = normLangJa(v)",
        "\t\t\tif n == \"ja\" or n == \"en\" then",
        "\t\t\t\treturn n",
        "\t\t\tend",
        "\t\telse",
        "\t\t\tLOG.debug(\"Locale.getGlobal failed (pcall)\")",
        "\t\tend",
        "\tend",
        "\treturn nil",
        "end",
        "",
        "--==================================================",
        "-- 小さな翻訳ヘルパ（フォールバック付き）",
        "--==================================================",
        "local function T(lang, key, jaFallback, enFallback)",
        "\tlocal txt = nil",
        "\tlocal ok = pcall(function() txt = Locale.t(lang, key) end)",
        "\tif ok and type(txt) == \"string\" and txt ~= \"\" and txt ~= key then",
        "\t\treturn txt",
        "\tend",
        "\tif (lang == \"ja\") then return jaFallback end",
        "\treturn enFallback",
        "end",
        "",
        "--==================================================",
        "-- 情報パネル：シンプル表示（年/月・所持金・山札）",
        "--==================================================",
        "local function simpleInfoText(st, lang)",
        "\tlocal year     = tonumber(st and st.year) or 0",
        "\tlocal month    = tonumber(st and st.month) or 1",
        "\tlocal mon      = tonumber(st and st.mon) or 0",
        "\tlocal deckLeft = tonumber(st and st.deckLeft) or 0",
        "",
        "\tif lang == \"ja\" then",
        "\t\treturn string.format(\"%d年　%d月\\n所持金：%d文\\n山札：%d枚\", year, month, mon, deckLeft)",
        "\telse",
        "\t\treturn string.format(\"Year %d  Month %d\\nCash: %d Mon\\nDeck: %d cards\", year, month, mon, deckLeft)",
        "\tend",
        "end",
        "",
        "--==================================================",
        "-- Class",
        "--==================================================",
        "",
        "function Run.new(deps)",
        "\tlocal self = setmetatable({}, Run)",
        "\tself.deps = deps",
        "\tself._awaitingInitial = false",
        "\tself._resultShown = false",
        "\tself._langConn = nil",
        "\tself._hlInit = false",
        "\tself._respConn = nil -- ★ 追加：リサイズ監視",
        "",
        "\t-- 言語初期値",
        "\tlocal initialLang = safeGetGlobalLang()",
        "\tif not initialLang then",
        "\t\tif type(Locale.pick) == \"function\" then",
        "\t\t\tinitialLang = normLangJa(Locale.pick()) or \"en\"",
        "\t\telse",
        "\t\t\tinitialLang = \"en\"",
        "\t\tend",
        "\tend",
        "\tself._lang = initialLang",
        "\tLOG.info(\"boot | lang=%s\", tostring(initialLang))",
        "",
        "\t-- UI 構築",
        "\tlocal ui = UIBuilder.build(nil, { lang = initialLang })",
        "\tself.gui           = ui.gui",
        "\tself.frame         = ui.root",
        "\tself.info          = ui.info",
        "\tself.goalText      = ui.goalText",
        "\tself.handArea      = ui.handArea",
        "\tself.boardRowTop   = ui.boardRowTop",
        "\tself.boardRowBottom= ui.boardRowBottom",
        "\tself.takenBox      = ui.takenBox",
        "\tself._scoreBox     = ui.scoreBox",
        "\tself.buttons       = ui.buttons   -- ※多くの場合「テーブル」で来る",
        "\tself._ui_setLang   = ui.setLang",
        "\tself._fmtScore     = ui.formatScore or function(score, mons, pts, rolesText)",
        "\t\tif self._lang == \"ja\" then",
        "\t\t\treturn string.format(\"得点：%d\\n文%d×%d点\\n%s\", score or 0, mons or 0, pts or 0, rolesText or \"役：--\")",
        "\t\telse",
        "\t\t\treturn string.format(\"Score: %d\\n%dMon × %dPts\\n%s\", score or 0, mons or 0, pts or 0, rolesText or \"Roles: --\")",
        "\t\tend",
        "\tend",
        "",
        "\t-- Overlay / ResultModal",
        "\tlocal loadingText = Theme.loadingText or \"Loading...\"",
        "\tself._overlay     = Overlay.create(self.frame, loadingText)",
        "\tself._resultModal = ResultModal.create(self.frame)",
        "",
        "\t-- ResultModal → Nav（なければ DecideNext フォールバック）",
        "\tif self.deps and self.deps.Nav and type(self.deps.Nav.next) == \"function\" then",
        "\t\tself._resultModal:bindNav(self.deps.Nav)",
        "\telse",
        "\t\tself._resultModal:on({",
        "\t\t\thome  = function()",
        "\t\t\t\tif self.deps and self.deps.DecideNext then",
        "\t\t\t\t\tself.deps.DecideNext:FireServer(\"home\")",
        "\t\t\t\tend",
        "\t\t\tend,",
        "\t\t\tkoikoi  = function()",
        "\t\t\t\tif self.deps and self.deps.DecideNext then",
        "\t\t\t\t\tself.deps.DecideNext:FireServer(\"next\")",
        "\t\t\t\tend",
        "\t\t\tend,",
        "\t\t\tfinal = function()",
        "\t\t\t\tif self.deps and self.deps.DecideNext then",
        "\t\t\t\t\tself.deps.DecideNext:FireServer(\"home\")",
        "\t\t\t\tend",
        "\t\t\tend,",
        "\t\t})",
        "\tend",
        "",
        "\t-- 役倍率パネル",
        "\tself._yakuPanel = YakuPanel.mount(self.gui)",
        "",
        "\t-- ====== 護符ボード（中央下段） ======",
        "\tdo",
        "\t\tif ui.notice then",
        "\t\t\tlocal nb = ui.notice.Parent",
        "\t\t\tif nb then",
        "\t\t\t\tnb.Size = UDim2.fromScale(1, 0)",
        "\t\t\t\tnb.Visible = false",
        "\t\t\tend",
        "\t\tend",
        "\t\tif ui.help then",
        "\t\t\tlocal tb = ui.help.Parent",
        "\t\t\tif tb then",
        "\t\t\t\ttb.Size = UDim2.fromScale(1, 0)",
        "\t\t\t\ttb.Visible = false",
        "\t\t\tend",
        "\t\tend",
        "",
        "\t\tlocal center = nil",
        "\t\tif ui.handArea then center = ui.handArea.Parent end",
        "",
        "\t\tlocal taliArea = Instance.new(\"Frame\")",
        "\t\ttaliArea.Name = \"TalismanArea\"",
        "\t\ttaliArea.Parent = center",
        "\t\ttaliArea.BackgroundTransparency = 1",
        "\t\ttaliArea.Size = UDim2.fromScale(1, 0)",
        "\t\ttaliArea.AutomaticSize = Enum.AutomaticSize.Y",
        "\t\ttaliArea.LayoutOrder = 5",
        "",
        "\t\tself._taliBoard = TalismanBoard.new(taliArea, {",
        "\t\t\ttitle = (self._lang == \"ja\") and \"護符ボード\" or \"Talisman Board\",",
        "\t\t\twidthScale = 0.9,",
        "\t\t\tpadScale   = 0.01,",
        "\t\t})",
        "\t\tlocal inst = self._taliBoard:getInstance()",
        "\t\tinst.AnchorPoint = Vector2.new(0.5, 0)",
        "\t\tinst.Position    = UDim2.fromScale(0.5, 0)",
        "\t\tinst.ZIndex      = 2",
        "\tend",
        "",
        "\t--- Studio専用 DevTools（維持）",
        "\tif RunService:IsStudio() then",
        "\t\tlocal r = self.deps and self.deps.remotes or nil",
        "\t\tlocal grantRyo  = (self.deps and self.deps.DevGrantRyo) or (r and r.DevGrantRyo)",
        "\t\tlocal grantRole = (self.deps and self.deps.DevGrantRole) or (r and r.DevGrantRole)",
        "\t\tif grantRyo or grantRole then",
        "\t\t\tDevTools.create(",
        "\t\t\t\tself.frame,",
        "\t\t\t\t{ DevGrantRyo = grantRyo, DevGrantRole = grantRole },",
        "\t\t\t\t{ grantRyoAmount = 1000, offsetX = 10, offsetY = 10, width = 160, height = 32 }",
        "\t\t\t)",
        "\t\tend",
        "\tend",
        "",
        "\t-- 内部状態",
        "\tself._selectedHandIdx = nil",
        "\tself._rerollFieldLeft = 0",
        "\tself._rerollHandLeft  = 0",
        "",
        "\t--========================",
        "\t-- レンダラー適用（内部ローカル関数）",
        "\t--========================",
        "\tlocal function renderHand(hand)",
        "\t\tHandRenderer.render(self.handArea, hand, {"
      ],
      "truncated": true,
      "analysis": {
        "waitForChild": [
          "SharedModules",
          "Logger",
          "Config",
          "Theme",
          "Locale",
          "components",
          "renderers",
          "HandRenderer",
          "FieldRenderer",
          "TakenRenderer",
          "ResultModal",
          "Overlay",
          "DevTools",
          "YakuPanel",
          "TalismanBoard",
          "lib",
          "FormatUtil",
          "RunScreenUI",
          "RunScreenRemotes",
          "highlight",
          "MatchHighlighter"
        ],
        "routerScreens": [],
        "fireServerArgs": [
          "home",
          "next",
          "home",
          "home",
          "abandon",
          "abandon"
        ],
        "udim": {
          "fromScale": 18,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 2,
          "ja_literals": 14
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/client/ui/screens/RunScreenRemotes.lua",
      "ext": "lua",
      "binary": false,
      "size": 2068,
      "mtime": "2025-09-05T15:35:13.564453+00:00",
      "head": [
        "-- StarterPlayerScripts/UI/screens/RunScreenRemotes.lua",
        "-- Remote 購読/解除と、UI適用の橋渡し",
        "",
        "local M = {}",
        "",
        "export type Handlers = {",
        "\tonHand: (any)->(),",
        "\tonField: (any)->(),",
        "\tonTaken: (any)->(),",
        "\tonScore: (total:any, roles:any, detail:any)->(),",
        "\tonState: (st:any)->(),",
        "\tonStageResult: (...any)->(),",
        "}",
        "",
        "function M.create(deps: any, h: Handlers)",
        "\tlocal self = {",
        "\t\t_conns = {} :: { RBXScriptConnection },",
        "\t\t_connected = false,",
        "\t\tdeps = deps or {},",
        "\t\th = h or ({} :: any),",
        "\t}",
        "",
        "\t-- 内部：安全に Connect するヘルパ",
        "\tlocal function _tryConnect(signal: any, handler: (...any)->())",
        "\t\tif typeof(signal) == \"Instance\" and signal:IsA(\"RemoteEvent\") then",
        "\t\t\treturn signal.OnClientEvent:Connect(handler)",
        "\t\telseif typeof(signal) == \"RBXScriptSignal\" then",
        "\t\t\t-- もし将来 Bindable/Signal を使う場合の逃げ",
        "\t\t\treturn signal:Connect(handler)",
        "\t\tend",
        "\t\treturn nil",
        "\tend",
        "",
        "\tfunction self:connect()",
        "\t\tif self._connected then return end",
        "\t\tself._connected = true",
        "",
        "\t\t-- 必須系",
        "\t\tlocal c1 = _tryConnect(self.deps.HandPush , self.h.onHand)",
        "\t\tlocal c2 = _tryConnect(self.deps.FieldPush, self.h.onField)",
        "\t\tlocal c3 = _tryConnect(self.deps.TakenPush, self.h.onTaken)",
        "\t\tlocal c4 = _tryConnect(self.deps.ScorePush, self.h.onScore)",
        "\t\tlocal c5 = _tryConnect(self.deps.StatePush, self.h.onState)",
        "",
        "\t\t-- 任意：StageResult",
        "\t\tlocal c6 = nil",
        "\t\tif self.deps.StageResult ~= nil then",
        "\t\t\tc6 = _tryConnect(self.deps.StageResult, function(...) self.h.onStageResult(...) end)",
        "\t\tend",
        "",
        "\t\t-- つながったものだけ蓄積",
        "\t\tif c1 then table.insert(self._conns, c1) end",
        "\t\tif c2 then table.insert(self._conns, c2) end",
        "\t\tif c3 then table.insert(self._conns, c3) end",
        "\t\tif c4 then table.insert(self._conns, c4) end",
        "\t\tif c5 then table.insert(self._conns, c5) end",
        "\t\tif c6 then table.insert(self._conns, c6) end",
        "\tend",
        "",
        "\tfunction self:disconnect()",
        "\t\tfor _, c in ipairs(self._conns) do",
        "\t\t\tpcall(function() c:Disconnect() end)",
        "\t\tend",
        "\t\ttable.clear(self._conns)",
        "\t\tself._connected = false",
        "\tend",
        "",
        "\treturn self",
        "end",
        "",
        "return M"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 1
      }
    },
    {
      "path": "src/client/ui/screens/RunScreenUI.lua",
      "ext": "lua",
      "binary": false,
      "size": 20783,
      "mtime": "2025-10-03T21:17:50.526602+00:00",
      "head": [
        "-- StarterPlayerScripts/UI/screens/RunScreenUI.lua",
        "-- UIビルダーは親付けしない契約（親付けは ScreenRouter の責務）",
        "-- v0.9.7-P1-7:",
        "--   - リロールボタン文言を固定化",
        "--       ja: 「場札入替」 / 「手札入替」",
        "--       en: \"Refresh Board\" / \"Redraw Hand\"",
        "--     （Locale のキーに依存せず、setLang でも追従）",
        "-- v0.9.7-P1-6: ★ リロール（場/手）ボタンの左に残回数バッジを追加",
        "--              （refs.counters.rerollField / refs.counters.rerollHand）＋見た目調整APIを追加",
        "-- v0.9.7-P1-5: 「あきらめる」ボタンを追加（refs.buttons.giveUp）",
        "-- v0.9.7-P1-4: Theme完全デフォルト化（色・画像・透過のUI側フォールバック撤去）",
        "-- v0.9.7-P1-3: Logger導入／言語コードを \"ja\"/\"en\" に統一（入力 \"jp\" は \"ja\" へ正規化）",
        "-- v0.9.6-P0-11 以降：親付け除去／その他の挙動は従来どおり",
        "",
        "local ReplicatedStorage = game:GetService(\"ReplicatedStorage\")",
        "local Config = ReplicatedStorage:WaitForChild(\"Config\")",
        "",
        "-- Logger",
        "local Logger = require(ReplicatedStorage:WaitForChild(\"SharedModules\"):WaitForChild(\"Logger\"))",
        "local LOG    = Logger.scope(\"RunScreenUI\")",
        "",
        "local Theme  = require(Config:WaitForChild(\"Theme\"))",
        "local Locale = require(Config:WaitForChild(\"Locale\"))",
        "",
        "local lib    = script.Parent.Parent:WaitForChild(\"lib\")",
        "local UiUtil = require(lib:WaitForChild(\"UiUtil\"))",
        "",
        "local M = {}",
        "",
        "--=== lang helpers =======================================================",
        "local function normLang(v: string?): string?",
        "\tlocal x = tostring(v or \"\"):lower()",
        "\tif x == \"ja\" or x == \"en\" then return x end",
        "\tif x == \"jp\" then",
        "\t\tLOG.warn(\"[Locale] received legacy 'jp'; normalize to 'ja'\")",
        "\t\treturn \"ja\"",
        "\tend",
        "\treturn nil",
        "end",
        "",
        "local function pickInitialLang(): string",
        "\tlocal g = (typeof(Locale.getGlobal)==\"function\" and Locale.getGlobal()) or nil",
        "\tlocal n = normLang(g)",
        "\tif n then return n end",
        "\tlocal p = (type(Locale.pick)==\"function\" and Locale.pick()) or nil",
        "\treturn normLang(p) or \"en\"",
        "end",
        "--=======================================================================",
        "",
        "--=== helpers ============================================================",
        "local function addCornerStroke(frame: Instance, radius: number?, strokeColor: Color3?, thickness: number?)",
        "\tlocal corner = Instance.new(\"UICorner\")",
        "\tcorner.CornerRadius = UDim.new(0, radius or (Theme.PANEL_RADIUS or 10))",
        "\tcorner.Parent = frame",
        "\tlocal s = Instance.new(\"UIStroke\")",
        "\ts.Thickness = thickness or 1",
        "\tif strokeColor then s.Color = strokeColor end",
        "\ts.Parent = frame",
        "\treturn frame",
        "end",
        "",
        "local function makeList(parent: Instance, dir: Enum.FillDirection, paddingScaleOrPx: number, hAlign, vAlign)",
        "\tlocal l = Instance.new(\"UIListLayout\")",
        "\tl.Parent = parent",
        "\tl.FillDirection = dir",
        "\tlocal isScale = paddingScaleOrPx <= 1",
        "\tl.Padding = isScale and UDim.new(paddingScaleOrPx, 0) or UDim.new(0, paddingScaleOrPx)",
        "\tl.HorizontalAlignment = hAlign or Enum.HorizontalAlignment.Left",
        "\tl.VerticalAlignment   = vAlign or Enum.VerticalAlignment.Top",
        "\tl.SortOrder = Enum.SortOrder.LayoutOrder",
        "\treturn l",
        "end",
        "",
        "local function makePanel(parent: Instance, name: string, sizeScale: Vector2, layoutOrder: number, bgColor: Color3, strokeColor: Color3?, titleText: string?, titleColor: Color3?)",
        "\tlocal p = Instance.new(\"Frame\")",
        "\tp.Name = name",
        "\tp.Parent = parent",
        "\tp.Size = UDim2.fromScale(sizeScale.X, sizeScale.Y)",
        "\tp.LayoutOrder = layoutOrder or 1",
        "\tp.BackgroundColor3 = bgColor",
        "\taddCornerStroke(p, nil, strokeColor, 1)",
        "\tif titleText and titleText ~= \"\" then",
        "\t\tlocal title = UiUtil.makeLabel(p, name..\"Title\", titleText, UDim2.new(1,-12,0,24), UDim2.new(0,6,0,6), nil, titleColor)",
        "\t\ttitle.TextScaled = true",
        "\t\ttitle.TextXAlignment = Enum.TextXAlignment.Left",
        "\t\ttitle.ZIndex = 3 -- 木目より確実に前面へ",
        "\tend",
        "\treturn p",
        "end",
        "",
        "local function makeSideBtn(parent: Instance, name: string, text: string, bg: Color3)",
        "\tlocal btn = Instance.new(\"TextButton\")",
        "\tbtn.Name = name",
        "\tbtn.Parent = parent",
        "\tbtn.Size = UDim2.new(1, 0, 0, 44)",
        "\tbtn.AutoButtonColor = true",
        "\tbtn.Text = text",
        "\tbtn.TextScaled = true",
        "\tbtn.BackgroundColor3 = bg",
        "\tlocal c = Instance.new(\"UICorner\"); c.CornerRadius = UDim.new(0, 8); c.Parent = btn",
        "\treturn btn",
        "end",
        "",
        "-- ▼ 左に残回数バッジ＋右に少し細いボタンのセットを生成",
        "local function makeCounteredButton(parent: Instance, name: string, initialText: string, btnBg: Color3)",
        "\tlocal holder = Instance.new(\"Frame\")",
        "\tholder.Name = name .. \"Holder\"",
        "\tholder.Parent = parent",
        "\tholder.Size = UDim2.new(1, 0, 0, 44)",
        "\tholder.BackgroundTransparency = 1",
        "",
        "\tlocal _ = makeList(holder, Enum.FillDirection.Horizontal, 6, Enum.HorizontalAlignment.Left, Enum.VerticalAlignment.Center)",
        "",
        "\tlocal badge = Instance.new(\"TextLabel\")",
        "\tbadge.Name = name .. \"Count\"",
        "\tbadge.Parent = holder",
        "\tbadge.Size = UDim2.new(0, 40, 1, 0)",
        "\tbadge.BackgroundColor3 = Color3.fromRGB(40, 40, 40)",
        "\tbadge.BackgroundTransparency = 0.25",
        "\tbadge.BorderSizePixel = 0",
        "\tbadge.Text = \"0\"",
        "\tbadge.Font = Enum.Font.GothamBold",
        "\tbadge.TextScaled = true",
        "\tbadge.TextColor3 = Color3.new(1,1,1)",
        "\tlocal badgeCorner = Instance.new(\"UICorner\"); badgeCorner.CornerRadius = UDim.new(0, 8); badgeCorner.Parent = badge",
        "",
        "\tlocal btn = Instance.new(\"TextButton\")",
        "\tbtn.Name = name",
        "\tbtn.Parent = holder",
        "\tbtn.Size = UDim2.new(1, -46, 1, 0) -- 左に40pxバッジ＋6pxパディング",
        "\tbtn.AutoButtonColor = true",
        "\tbtn.Text = initialText",
        "\tbtn.TextScaled = true",
        "\tbtn.BackgroundColor3 = btnBg",
        "\tbtn.BorderSizePixel = 0",
        "\tlocal btnCorner = Instance.new(\"UICorner\"); btnCorner.CornerRadius = UDim.new(0, 8); btnCorner.Parent = btn",
        "",
        "\treturn badge, btn, holder",
        "end",
        "--=======================================================================",
        "",
        "-- 言語：Global → OS 推定（\"jp\" は \"ja\" へ正規化）",
        "local _lang = pickInitialLang()",
        "LOG.debug(\"init _lang=%s\", tostring(_lang))",
        "",
        "-- ▼ 追加：リロールボタンの固定ラベル",
        "local function rerollLabels(lang: string)",
        "\tlang = tostring(lang or \"en\"):lower()",
        "\tif lang == \"ja\" then",
        "\t\treturn { all = \"場札入替\", hand = \"手札入替\" }",
        "\telse",
        "\t\treturn { all = \"Refresh Board\", hand = \"Redraw Hand\" }",
        "\tend",
        "end",
        "",
        "-- ラベル適用",
        "local function applyTexts(tRefs)",
        "\tif not tRefs then return end",
        "\tlocal t = function(key) return Locale.t(_lang, key) end",
        "",
        "\t-- 右カラム：取り札",
        "\tif tRefs.takenPanel and tRefs.takenPanel:FindFirstChild(\"TakenPanelTitle\") then",
        "\t\ttRefs.takenPanel.TakenPanelTitle.Text = t(\"RUN_TAKEN_TITLE\")",
        "\t\ttRefs.takenPanel.TakenPanelTitle.ZIndex = 3",
        "\tend",
        "",
        "\t-- 左カラム：ボタン",
        "\tif tRefs.buttons then",
        "\t\tif tRefs.buttons.confirm then",
        "\t\t\ttRefs.buttons.confirm.Text = t(\"RUN_BTN_CONFIRM\")",
        "\t\tend",
        "",
        "\t\t-- ★ 固定文言（Localeキーに依存しない）",
        "\t\tlocal rl = rerollLabels(_lang)",
        "\t\tif tRefs.buttons.rerollAll  then tRefs.buttons.rerollAll.Text  = rl.all  end",
        "\t\tif tRefs.buttons.rerollHand then tRefs.buttons.rerollHand.Text = rl.hand end",
        "",
        "\t\tif tRefs.buttons.yaku then",
        "\t\t\tlocal lbl = Locale.t(_lang, \"RUN_BTN_YAKU\")",
        "\t\t\tif not lbl or lbl == \"\" or lbl == \"RUN_BTN_YAKU\" then",
        "\t\t\t\tlbl = (_lang == \"en\") and \"Yaku\" or \"役一覧\"",
        "\t\t\tend",
        "\t\t\ttRefs.buttons.yaku.Text = lbl",
        "\t\tend",
        "\t\t-- あきらめる",
        "\t\tif tRefs.buttons.giveUp then",
        "\t\t\tlocal txt = Locale.t(_lang, \"RUN_BTN_GIVEUP\")",
        "\t\t\tif not txt or txt == \"\" or txt == \"RUN_BTN_GIVEUP\" then",
        "\t\t\t\ttxt = (_lang == \"en\") and \"Give Up\" or \"あきらめる\"",
        "\t\t\tend",
        "\t\t\ttRefs.buttons.giveUp.Text = txt",
        "\t\tend",
        "\tend",
        "",
        "\t-- ヘルプ",
        "\tif tRefs.help then",
        "\t\tlocal Tm = Theme",
        "\t\tlocal helpDefault = (Tm and Tm.helpText) and Tm.helpText or t(\"RUN_HELP_LINE\")",
        "\t\ttRefs.help.Text = helpDefault",
        "\tend",
        "",
        "\t-- 情報パネル",
        "\tif tRefs.info then",
        "\t\ttRefs.info.Text = t(\"RUN_INFO_PLACEHOLDER\")",
        "\tend",
        "",
        "\t-- スコア：辞書の初期値",
        "\tif tRefs.scoreBox then",
        "\t\ttRefs.scoreBox.Text = t(\"RUN_SCOREBOX_INIT\")",
        "\tend",
        "end",
        "",
        "--[[",
        "UIビルダーは親付けしない契約に統一：",
        "- 第1引数 parentGui は互換のため受け取るが、**親付けには使用しない**（無視）。",
        "- ScreenGui は生成するが、**Parent を設定しない**。親付けは ScreenRouter が行う。",
        "]]",
        "function M.build(_parentGuiIgnored: Instance?, opts)",
        "\tlocal want = opts and opts.lang or nil",
        "\tlocal n = normLang(want)",
        "\tif n then _lang = n end",
        "\tLOG.debug(\"build lang=%s (opts=%s)\", tostring(_lang), tostring(want))",
        "",
        "\t--=== Theme ===========================================================",
        "\tlocal T       = Theme",
        "\tlocal C       = T.COLORS",
        "\tlocal R       = T.RATIOS",
        "\tlocal IMAGES  = T.IMAGES",
        "\tlocal TRANSP  = T.TRANSPARENCY",
        "",
        "\tlocal ASPECT     = T.ASPECT",
        "\tlocal PAD        = R.CENTER_PAD",
        "\tlocal LEFT_W     = R.LEFT_W",
        "\tlocal RIGHT_W    = R.RIGHT_W",
        "\tlocal BOARD_H    = R.BOARD_H",
        "\tlocal TUTORIAL_H = R.TUTORIAL_H",
        "\tlocal HAND_H     = R.HAND_H",
        "\tlocal ROW_GAP    = 0.035",
        "\tlocal COL_GAP    = R.COL_GAP",
        "",
        "\tlocal ROOM_BG_IMAGE  = IMAGES.ROOM_BG",
        "\tlocal FIELD_BG_IMAGE = IMAGES.FIELD_BG",
        "\tlocal TAKEN_BG_IMAGE = IMAGES.TAKEN_BG",
        "",
        "\tlocal COLOR_TEXT           = C.TextDefault",
        "\tlocal COLOR_RIGHT_BG       = C.RightPaneBg",
        "\tlocal COLOR_RIGHT_STROKE   = C.RightPaneStroke",
        "\tlocal COLOR_PANEL_BG       = C.PanelBg",
        "\tlocal COLOR_PANEL_STROKE   = C.PanelStroke",
        "\tlocal COLOR_NOTICE_BG      = C.NoticeBg   or C.PanelBg",
        "\tlocal COLOR_TUTORIAL_BG    = C.TutorialBg or C.PrimaryBtnBg",
        "\tlocal BTN_PRIMARY_BG       = C.PrimaryBtnBg",
        "\tlocal BTN_WARN_BG          = C.WarnBtnBg",
        "\tlocal BTN_YAKU_BG          = C.InfoBtnBg",
        "",
        "\t--=== ScreenGui（※親付けしない） ======================================",
        "\tlocal g = Instance.new(\"ScreenGui\")",
        "\tg.Name = \"RunScreen\"",
        "\tg.ResetOnSpawn = false",
        "\tg.IgnoreGuiInset = true",
        "\tg.DisplayOrder = 10",
        "\tg.Enabled = true",
        "",
        "\t-- 背景",
        "\tlocal roomBG = Instance.new(\"ImageLabel\")",
        "\troomBG.Name = \"RoomBG\"",
        "\troomBG.Parent = g",
        "\troomBG.Image = ROOM_BG_IMAGE",
        "\troomBG.BackgroundTransparency = 1",
        "\troomBG.Size = UDim2.fromScale(1,1)",
        "\troomBG.ScaleType = Enum.ScaleType.Crop",
        "\troomBG.ZIndex = 0",
        "\troomBG.ImageTransparency = TRANSP.roomBg",
        "",
        "\t-- Root",
        "\tlocal root = Instance.new(\"Frame\")",
        "\troot.Name = \"Root\"",
        "\troot.Parent = g",
        "\troot.Size = UDim2.fromScale(1,1)",
        "\troot.BackgroundTransparency = 1",
        "\troot.Visible = false",
        "\troot.ZIndex = 1",
        "",
        "\tlocal playArea = Instance.new(\"Frame\")",
        "\tplayArea.Name = \"PlayArea\"",
        "\tplayArea.Parent = root",
        "\tplayArea.AnchorPoint = Vector2.new(0.5,0.5)",
        "\tplayArea.Position = UDim2.fromScale(0.5,0.5)",
        "\tplayArea.Size = UDim2.fromScale(1,1)",
        "\tplayArea.BackgroundTransparency = 1",
        "\tplayArea.ZIndex = 1",
        "\tdo",
        "\t\tlocal ar = Instance.new(\"UIAspectRatioConstraint\")",
        "\t\tar.AspectRatio = ASPECT",
        "\t\tar.DominantAxis = Enum.DominantAxis.Width",
        "\t\tar.Parent = playArea",
        "\tend",
        "",
        "\t-- 3カラム",
        "\tlocal left = Instance.new(\"Frame\")"
      ],
      "truncated": true,
      "analysis": {
        "waitForChild": [
          "Config",
          "SharedModules",
          "Logger",
          "Theme",
          "Locale",
          "lib",
          "UiUtil"
        ],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 21,
          "fromOffset": 0,
          "new": 21
        },
        "locale": {
          "jp_literals": 4,
          "ja_literals": 8
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/client/ui/screens/ShopView.lua",
      "ext": "lua",
      "binary": false,
      "size": 32281,
      "mtime": "2025-10-07T15:59:46.396074+00:00",
      "head": [
        "-- StarterPlayerScripts/UI/screens/ShopView.lua",
        "-- v0.9.9-P3-07 header buttons: CloseBtn moved next to Reroll (same size)",
        "--  - CloseBtn をフッターからヘッダー右端に移動（Reroll の右隣、同サイズ）",
        "--  - ヘッダー右側にボタンバー（UIListLayout, Right寄せ, 等間隔）",
        "--  - 既存の nodes.closeBtn / wires は互換維持",
        "--  - Styles 一本化方針は維持（色・角丸・寸法は Styles 参照）",
        "",
        "local Shop = {}",
        "Shop.__index = Shop",
        "",
        "local RS = game:GetService(\"ReplicatedStorage\")",
        "local SharedModules = RS:WaitForChild(\"SharedModules\")",
        "",
        "-- Config（Theme は背景画像用途のみ）",
        "local Config = RS:WaitForChild(\"Config\")",
        "local Locale = require(Config:WaitForChild(\"Locale\"))",
        "local Theme  = require(Config:WaitForChild(\"Theme\"))",
        "",
        "-- Logger",
        "local Logger = require(SharedModules:WaitForChild(\"Logger\"))",
        "local LOG = (typeof(Logger.scope) == \"function\" and Logger.scope(\"ShopView\"))",
        "\tor (typeof(Logger[\"for\"]) == \"function\" and Logger[\"for\"](\"ShopView\"))",
        "\tor { debug=function()end, info=function()end, warn=function(...) warn(...) end }",
        "",
        "-- Styles（UI/styles/ShopStyles）",
        "local Styles do",
        "\tlocal ok, mod = pcall(function()",
        "\t\tlocal uiRoot = script:FindFirstAncestor(\"UI\")",
        "\t\treturn require(uiRoot:WaitForChild(\"styles\"):WaitForChild(\"ShopStyles\"))",
        "\tend)",
        "\tStyles = ok and mod or nil",
        "end",
        "",
        "-- Renderer / Controllers",
        "local uiRoot = script.Parent.Parent",
        "local componentsFolder = uiRoot:WaitForChild(\"components\")",
        "local Renderer      = require(componentsFolder:WaitForChild(\"renderers\"):WaitForChild(\"ShopRenderer\"))",
        "local ShopWires     = require(componentsFolder:WaitForChild(\"controllers\"):WaitForChild(\"ShopWires\"))",
        "local ClientSignals = require(componentsFolder:WaitForChild(\"controllers\"):WaitForChild(\"ClientSignals\"))",
        "local TalismanBoard = require(componentsFolder:WaitForChild(\"TalismanBoard\"))",
        "",
        "-- Shared helpers",
        "local ShopFormat = require(SharedModules:WaitForChild(\"ShopFormat\"))",
        "",
        "--================ types ================",
        "export type Payload = {",
        "\titems: {any}?, stock: {any}?,",
        "\tmon: number?, totalMon: number?,",
        "\trerollCost: number?, canReroll: boolean?,",
        "\tseasonSum: number?, target: number?, rewardMon: number?,",
        "\tlang: string?, notice: string?, currentDeck: any?, state: any?,",
        "}",
        "",
        "--================ utils ================",
        "local function normalizeLang(lang: string?): string",
        "\tlocal v = (typeof(Locale.normalize)==\"function\" and Locale.normalize(lang)) or (lang or \"ja\")",
        "\tif tostring(lang or \"\"):lower() == \"jp\" and v == \"ja\" then",
        "\t\tLOG.warn(\"[Locale] received legacy 'jp'; normalize to 'ja'\")",
        "\tend",
        "\treturn v",
        "end",
        "",
        "local function countItems(p: Payload?): number",
        "\tif not p then return 0 end",
        "\tif typeof(p.items) == \"table\" then return #p.items end",
        "\tif typeof(p.stock) == \"table\" then return #p.stock end",
        "\treturn 0",
        "end",
        "",
        "local function stockSignature(items: {any}?): string",
        "\tif typeof(items) ~= \"table\" then return \"<nil>\" end",
        "\tlocal parts = { tostring(#items) }",
        "\tfor _, it in ipairs(items) do",
        "\t\tlocal id    = (it and it.id) or (it and it.code) or (it and it.sku) or \"\"",
        "\t\tlocal kind  = (it and (it.kind or it.type or it.category)) or \"\"",
        "\t\tlocal price = (it and (it.price or it.cost)) or \"\"",
        "\t\tlocal extra = (it and it.uid) or (it and it.name) or \"\"",
        "\t\tparts[#parts+1] = table.concat({tostring(id), tostring(kind), tostring(price), tostring(extra)}, \":\")",
        "\tend",
        "\treturn table.concat(parts, \"||\")",
        "end",
        "",
        "local function getTalismanFromPayload(p: Payload?)",
        "\treturn (p and p.state and p.state.run and p.state.run.talisman) or nil",
        "end",
        "",
        "local function cloneSlots6(slots)",
        "\tlocal s = slots or {}",
        "\treturn { s[1], s[2], s[3], s[4], s[5], s[6] }",
        "end",
        "",
        "local function cloneTalismanData(t)",
        "\tif typeof(t) ~= \"table\" then return nil end",
        "\treturn { maxSlots=tonumber(t.maxSlots or 6) or 6, unlocked=tonumber(t.unlocked or 0) or 0, slots=cloneSlots6(t.slots) }",
        "end",
        "",
        "local function talismanSignature(t)",
        "\tif typeof(t) ~= \"table\" then return \"<nil>\" end",
        "\tlocal parts = { tostring(tonumber(t.unlocked or 0) or 0) }",
        "\tlocal s = t.slots or {}",
        "\tfor i=1,6 do parts[#parts+1] = tostring(s[i] or \"\") end",
        "\treturn table.concat(parts, \"|\")",
        "end",
        "",
        "local function taliTitleText(lang: string?): string",
        "\tlocal l = lang or \"ja\"",
        "\tlocal s = (typeof(Locale.t)==\"function\" and Locale.t(l, \"SHOP_UI_TALISMAN_BOARD_TITLE\")) or \"護符\"",
        "\tif s == \"SHOP_UI_TALISMAN_BOARD_TITLE\" then",
        "\t\ts = (typeof(Locale.t)==\"function\" and Locale.t(l, \"SHOP_UI_TALISMAN_BOARD\")) or \"護符\"",
        "\tend",
        "\treturn s",
        "end",
        "",
        "-- 安全数値 & 安全 clamp",
        "local function _num(v, default)",
        "\tlocal n = tonumber(v)",
        "\tif n == nil or n ~= n then return default end",
        "\treturn n",
        "end",
        "local function _safeClamp(x, minV, maxV)",
        "\tlocal lo = _num(minV, 0)",
        "\tlocal hi = _num(maxV, 0)",
        "\tif hi < lo then lo, hi = hi, lo end",
        "\tlocal xv = _num(x, lo)",
        "\tif xv < lo then return lo end",
        "\tif xv > hi then return hi end",
        "\treturn xv",
        "end",
        "",
        "--================ View helpers（Stylesのみ参照） ================",
        "local function _styleColor(key, fallback)",
        "\tif Styles and Styles.colors and typeof(Styles.colors[key]) == \"Color3\" then",
        "\t\treturn Styles.colors[key]",
        "\tend",
        "\treturn fallback or Color3.fromRGB(200,200,200)",
        "end",
        "",
        "local function _styleSize(key, fallback)",
        "\tif Styles and Styles.sizes and tonumber(Styles.sizes[key]) then",
        "\t\treturn Styles.sizes[key]",
        "\tend",
        "\treturn fallback",
        "end",
        "",
        "local function addCorner(gui: Instance, radiusPx: number?)",
        "\tlocal ok, _ = pcall(function()",
        "\t\tlocal c = Instance.new(\"UICorner\")",
        "\t\tlocal r = radiusPx or _styleSize(\"panelCorner\", 10)",
        "\t\tc.CornerRadius = UDim.new(0, r)",
        "\t\tc.Parent = gui",
        "\tend)",
        "\treturn ok",
        "end",
        "",
        "local function addStroke(gui: Instance, colorKeyOrColor: any, thickness: number?)",
        "\tlocal ok, _ = pcall(function()",
        "\t\tlocal s = Instance.new(\"UIStroke\")",
        "\t\ts.Thickness = thickness or 1",
        "\t\tlocal col = colorKeyOrColor",
        "\t\tif typeof(colorKeyOrColor) == \"string\" then",
        "\t\t\tcol = _styleColor(colorKeyOrColor, Color3.fromRGB(180,180,180))",
        "\t\tend",
        "\t\ts.Color = col or Color3.fromRGB(180,180,180)",
        "\t\ts.Transparency = 0",
        "\t\ts.Parent = gui",
        "\tend)",
        "\treturn ok",
        "end",
        "",
        "--================ class ==================",
        "local function _bindSelf(self, fn)",
        "\treturn function(_, ...) return fn(self, ...) end",
        "end",
        "",
        "function Shop.new(deps)",
        "\tlocal self = setmetatable({}, Shop)",
        "\tself.deps = deps",
        "\tself._payload = nil",
        "\tself._lang = nil",
        "\tself._rerollBusy = false",
        "\tself._buyBusy = false -- セルクリック即購入の連打防止",
        "\tself._hiddenItems = {}",
        "\tself._stockSig = \"\"",
        "\tself._bg = nil",
        "",
        "\tself._taliBoard = nil",
        "\tself._localBoard = nil",
        "\tself._preview = nil",
        "\tself._lastPlaced = nil",
        "\tself._taliSig = \"<none>\"",
        "",
        "\tself._selectedId = nil",
        "\tself._cellById = {}",
        "",
        "\tself._kitoRefireAt = 0",
        "",
        "\tself:_ensureGui()",
        "",
        "\tShopWires.wireButtons(self)",
        "\tShopWires.applyInfoPlaceholder(self)",
        "",
        "\t-- Remotes（既存互換）",
        "\tself._remotes = RS:WaitForChild(\"Remotes\", 10)",
        "",
        "\tself.show          = _bindSelf(self, Shop.show)",
        "\tself.hide          = _bindSelf(self, Shop.hide)",
        "\tself.update        = _bindSelf(self, Shop.update)",
        "\tself.setData       = _bindSelf(self, Shop.setData)",
        "\tself.setLang       = _bindSelf(self, Shop.setLang)",
        "\tself.attachRemotes = _bindSelf(self, Shop.attachRemotes)",
        "\tself.autoPlace     = _bindSelf(self, Shop.autoPlace)",
        "",
        "\tLOG.info(\"boot(View)\")",
        "\treturn self",
        "end",
        "",
        "--=========== ensureGui() ===========",
        "function Shop:_ensureGui()",
        "\tif self.gui and self._nodes then return end",
        "",
        "\tlocal g = Instance.new(\"ScreenGui\")",
        "\tg.Name = \"ShopView\"",
        "\tg.ResetOnSpawn = false",
        "\tg.IgnoreGuiInset = true",
        "\tg.DisplayOrder = 50",
        "\tg.Enabled = false",
        "\tg.ZIndexBehavior = Enum.ZIndexBehavior.Sibling",
        "\tself.gui = g",
        "",
        "\t-- 背景（※画像のみ Theme 由来：色・寸法は Styles 管理）",
        "\tlocal bg = Instance.new(\"ImageLabel\")",
        "\tbg.Name = \"BgImage\"",
        "\tbg.BackgroundTransparency = 1",
        "\tbg.BorderSizePixel = 0",
        "\tbg.Active = false",
        "\tbg.ScaleType = Enum.ScaleType.Crop",
        "\tbg.AnchorPoint = Vector2.new(0.5, 0.5)",
        "\tbg.Position = UDim2.fromScale(0.5, 0.5)",
        "\tbg.Size = UDim2.fromScale(1, 1)",
        "\tbg.ZIndex = 0",
        "\tbg.Parent = g",
        "\tself._bg = bg",
        "\tself:_ensureBg(true)",
        "",
        "\t-- modal",
        "\tlocal modal = Instance.new(\"Frame\")",
        "\tmodal.Name = \"Modal\"",
        "\tmodal.AnchorPoint = Vector2.new(0.5,0.5)",
        "\tmodal.Position = UDim2.new(0.5,0,0.5,0)",
        "\tmodal.Size = UDim2.new(",
        "\t\t(Styles and Styles.sizes and Styles.sizes.modalWScale) or 0.82, 0,",
        "\t\t(Styles and Styles.sizes and Styles.sizes.modalHScale) or 0.72, 0",
        "\t)",
        "\tmodal.BackgroundColor3 = _styleColor(\"rightPaneBg\", Color3.fromRGB(250,248,240))",
        "\tmodal.BorderSizePixel = 0",
        "\tmodal.ZIndex = 1",
        "\tmodal.Parent = g",
        "\taddCorner(modal, _styleSize(\"panelCorner\", 10))",
        "\taddStroke(modal, \"rightPaneStroke\", 1)",
        "",
        "\t-- header",
        "\tlocal header = Instance.new(\"Frame\")",
        "\theader.Name = \"Header\"",
        "\theader.BackgroundColor3 = _styleColor(\"panelBg\", Color3.fromRGB(252,250,244))",
        "\theader.BorderSizePixel = 0",
        "\theader.Size = UDim2.new(1,0,0,(Styles and Styles.sizes and Styles.sizes.headerH) or 48)",
        "\theader.ZIndex = 2",
        "\theader.Parent = modal",
        "\taddStroke(header, \"panelStroke\", 1)",
        "",
        "\tlocal title = Instance.new(\"TextLabel\")",
        "\ttitle.Name = \"Title\"",
        "\ttitle.BackgroundTransparency = 1",
        "\ttitle.Size = UDim2.new(1,-20,1,0)",
        "\ttitle.Position = UDim2.new(0,10,0,0)",
        "\ttitle.TextXAlignment = Enum.TextXAlignment.Left",
        "\ttitle.Text = \"屋台（View）\"",
        "\ttitle.TextSize = (Styles and Styles.fontSizes and Styles.fontSizes.title) or 20",
        "\ttitle.TextColor3 = _styleColor(\"text\", Color3.fromRGB(25,25,25))",
        "\ttitle.ZIndex = 3",
        "\ttitle.Parent = header",
        "",
        "\t--=== ヘッダー右側：ボタンバー（Right寄せ） ===",
        "\tlocal btnW   = (Styles and Styles.sizes and Styles.sizes.rerollBtnW) or 140",
        "\tlocal btnH   = (Styles and Styles.sizes and Styles.sizes.rerollBtnH) or 32",
        "\tlocal gapPx  = (Styles and Styles.sizes and Styles.sizes.headerBtnGap) or 10",
        "\tlocal barW   = btnW*3 + gapPx*2",
        "",
        "\tlocal btnBar = Instance.new(\"Frame\")",
        "\tbtnBar.Name = \"BtnBar\"",
        "\tbtnBar.BackgroundTransparency = 1",
        "\tbtnBar.AnchorPoint = Vector2.new(1,0.5)",
        "\tbtnBar.Position = UDim2.new(1,-10,0.5,0)",
        "\tbtnBar.Size = UDim2.fromOffset(barW, btnH)",
        "\tbtnBar.ZIndex = 3",
        "\tbtnBar.Parent = header",
        "",
        "\tlocal barList = Instance.new(\"UIListLayout\")",
        "\tbarList.FillDirection = Enum.FillDirection.Horizontal",
        "\tbarList.HorizontalAlignment = Enum.HorizontalAlignment.Right"
      ],
      "truncated": true,
      "analysis": {
        "waitForChild": [
          "SharedModules",
          "Config",
          "Locale",
          "Theme",
          "Logger",
          "styles",
          "ShopStyles",
          "components",
          "renderers",
          "ShopRenderer",
          "controllers",
          "ShopWires",
          "controllers",
          "ClientSignals",
          "TalismanBoard",
          "ShopFormat",
          "PlayerGui"
        ],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 6,
          "fromOffset": 6,
          "new": 31
        },
        "locale": {
          "jp_literals": 2,
          "ja_literals": 10
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/client/ui/screens/ShrineScreen.lua",
      "ext": "lua",
      "binary": false,
      "size": 668,
      "mtime": "2025-08-25T22:05:55.709008+00:00",
      "head": [
        "-- ShrineScreen (ModuleScript)",
        "local Shrine = {}",
        "Shrine.__index = Shrine",
        "",
        "function Shrine.new(deps)",
        "\tlocal self = setmetatable({}, Shrine)",
        "\tself.deps = deps",
        "",
        "\tlocal g = Instance.new(\"ScreenGui\")",
        "\tg.Name = \"ShrineScreen\"",
        "\tg.ResetOnSpawn = false",
        "\tg.IgnoreGuiInset = true",
        "\tg.DisplayOrder = 40",
        "\tg.Enabled = false",
        "\tself.gui = g",
        "",
        "\tlocal label = Instance.new(\"TextLabel\")",
        "\tlabel.Size = UDim2.new(1,0,1,0)",
        "\tlabel.BackgroundTransparency = 1",
        "\tlabel.Text = \"神社（恒久強化）- 準備中\"",
        "\tlabel.Parent = g",
        "",
        "\treturn self",
        "end",
        "",
        "function Shrine:show() self.gui.Enabled = true end",
        "function Shrine:hide() self.gui.Enabled = false end",
        "",
        "return Shrine"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 1
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/client/ui/styles/KitoPickStyles.lua",
      "ext": "lua",
      "binary": false,
      "size": 3073,
      "mtime": "2025-10-06T10:13:03.113256+00:00",
      "head": [
        "-- KitoPickStyles.lua",
        "-- Pass1: 既存見た目そのまま / 値だけ集約",
        "",
        "local Color3 = Color3",
        "local M = {}",
        "",
        "M.colors = {",
        "  shade             = Color3.new(0, 0, 0),",
        "  panelBg           = Color3.fromRGB(24,24,28),",
        "",
        "  -- カード",
        "  cardBg            = Color3.fromRGB(40,42,54),",
        "  cardImgFallback   = Color3.fromRGB(55,57,69),",
        "  cardNameText      = Color3.fromRGB(232,232,240),",
        "  cardInfoText      = Color3.fromRGB(210,210,220),",
        "",
        "  -- テキスト",
        "  titleText         = Color3.fromRGB(230,230,240),",
        "  kitoNameText      = Color3.fromRGB(236,236,246),",
        "  effectText        = Color3.fromRGB(200,200,210),",
        "  pickInfoText      = Color3.fromRGB(200,200,210),",
        "",
        "  -- ボタン",
        "  confirmText       = Color3.fromRGB(16,16,20),",
        "  confirmBg         = Color3.fromRGB(120,200,120),",
        "  skipText          = Color3.fromRGB(230,230,240),",
        "  skipBg            = Color3.fromRGB(70,70,78),",
        "",
        "  -- 選択",
        "  selectedBg        = Color3.fromRGB(70,110,210),",
        "  selectedStroke    = Color3.fromRGB(90,130,230),",
        "",
        "  -- 非対象",
        "  ineligibleMask    = Color3.new(0,0,0),",
        "  ineligibleTitle   = Color3.fromRGB(230,230,240),",
        "  ineligibleSub     = Color3.fromRGB(220,220,230),",
        "}",
        "",
        "M.sizes = {",
        "  -- レイヤ",
        "  shadeTransparency     = 0.35,",
        "",
        "  -- パネル",
        "  panelCorner           = 18,",
        "  panelPadding          = 16,",
        "  panelWidth            = 880,",
        "  panelHeight           = 560,",
        "  panelPosYScale        = 0.52,  -- パネルY（中央より少し下）",
        "",
        "  -- ヘッダ",
        "  titleHeight           = 28,",
        "  headerIcon            = 44,",
        "  headerGap             = 8,",
        "  kitoNameHeight        = 22,",
        "  kitoNameTopGap        = 2,",
        "",
        "  -- 効果説明",
        "  effectTopGap          = 6,",
        "  effectMinHeight       = 22,",
        "  effectInitHeight      = 40,   -- 初期配置用の仮高さ（実際は TextBounds で再レイアウト）",
        "  effectBelowGap        = 8,",
        "",
        "  -- フッタ",
        "  footerHeightReserve   = 84,   -- 下部の確保枠（レイアウト用）",
        "  footerHeight          = 52,",
        "  footerBottomGap       = 8,",
        "",
        "  -- スクロール / グリッド",
        "  scrollBar             = 6,",
        "  gridCellW             = 180,",
        "  gridCellH             = 160,",
        "  gridGap               = 12,",
        "",
        "  -- カード内寸",
        "  cardImgH              = 112,",
        "  cardNameH             = 18,",
        "  cardNameLeft          = 6,",
        "  cardNameTopGap        = 4,",
        "  cardInfoH             = 16,",
        "  cardInfoLeft          = 6,",
        "  cardInfoBottomGap     = 8,",
        "",
        "  -- ボタン",
        "  btnCorner             = 10,",
        "  btnSkipW              = 140,",
        "  btnConfirmW           = 160,",
        "  btnH                  = 44,",
        "  btnGap                = 16,   -- Skip と Confirm の間",
        "  btnRightGap           = 8,    -- Confirm の右余白",
        "",
        "  -- ラベル",
        "  pickInfoRightReserve  = 360,  -- PickInfo右側の確保幅（ボタン領域）",
        "}",
        "",
        "M.fontSizes = {",
        "  title     = 22,",
        "  kitoName  = 20,",
        "  effect    = 18,",
        "  pickInfo  = 18,",
        "  btn       = 20,",
        "  cardName  = 16,",
        "  cardInfo  = 14,",
        "  inelMain  = 18,",
        "  inelSub   = 14,",
        "}",
        "",
        "M.z = {",
        "  panel = 1,",
        "  overlay = 5,",
        "  overlayText = 6,",
        "  headerIcon = 2,",
        "}",
        "",
        "return M"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/client/ui/styles/ShopStyles.lua",
      "ext": "lua",
      "binary": false,
      "size": 1960,
      "mtime": "2025-10-06T16:44:13.701015+00:00",
      "head": [
        "-- src/client/ui/styles/ShopStyles.lua",
        "-- Phase1: Theme をブリッジして Shop の見た目値を一元化",
        "",
        "local RS = game:GetService(\"ReplicatedStorage\")",
        "local Config = RS:WaitForChild(\"Config\")",
        "local Theme = require(Config:WaitForChild(\"Theme\"))",
        "",
        "local M = {}",
        "",
        "-- 色（Theme を既定にブリッジ）",
        "M.colors = {",
        "  rightPaneBg     = Theme.COLORS.RightPaneBg,",
        "  rightPaneStroke = Theme.COLORS.RightPaneStroke,",
        "  panelBg         = Theme.COLORS.PanelBg,",
        "  panelStroke     = Theme.COLORS.PanelStroke,",
        "  text            = Theme.COLORS.TextDefault,",
        "  helpText        = Theme.COLORS.HelpText,",
        "  primaryBtnBg    = Theme.COLORS.PrimaryBtnBg,",
        "  primaryBtnText  = Theme.COLORS.PrimaryBtnText,",
        "  warnBtnBg       = Theme.COLORS.WarnBtnBg,",
        "  warnBtnText     = Theme.COLORS.WarnBtnText,",
        "  badgeBg         = Theme.COLORS.BadgeBg,",
        "  badgeStroke     = Theme.COLORS.BadgeStroke,",
        "  -- セル背景（現行は PanelBg を流用）",
        "  cardBg          = Theme.COLORS.PanelBg,",
        "}",
        "",
        "-- 寸法・角丸・比率",
        "M.sizes = {",
        "  modalWScale   = 0.82,",
        "  modalHScale   = 0.72,",
        "  panelCorner   = Theme.PANEL_RADIUS or 10,",
        "",
        "  headerH       = 48,",
        "  footerH       = 64,",
        "  bodyPad       = 10,",
        "  vlistGap      = 8,",
        "",
        "  -- ヘッダボタン",
        "  deckBtnW      = 140,",
        "  deckBtnH      = 32,",
        "  rerollBtnW    = 140,",
        "  rerollBtnH    = 32,",
        "  btnCorner     = 8,",
        "",
        "  -- グリッド＆スクロール",
        "  gridCellW     = 96,",
        "  gridCellH     = 144,",
        "  gridGap       = 8,",
        "  scrollBar     = 8,",
        "",
        "  -- セル（価格帯など）",
        "  priceBandH    = 20,",
        "",
        "  -- フッタ",
        "  closeBtnW     = 260,",
        "  closeBtnH     = 44,",
        "}",
        "",
        "-- フォントサイズ",
        "M.fontSizes = {",
        "  title         = 20,",
        "  deckTitle     = 18,",
        "  infoTitle     = 18,",
        "  price         = 14,",
        "  cellTextMax   = 24,",
        "}",
        "",
        "-- Z（参考値。既存と同等の並びを維持）",
        "M.z = {",
        "  modal     = 1,",
        "  header    = 2,",
        "  headerTxt = 3,",
        "  cells     = 10,",
        "  price     = 11,",
        "}",
        "",
        "return M"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [
          "Config",
          "Theme"
        ],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/client/ui/viewmodels/KitoPickVM.lua",
      "ext": "lua",
      "binary": false,
      "size": 1397,
      "mtime": "2025-10-07T13:08:18.682708+00:00",
      "head": [
        "-- KitoPickVM.lua",
        "-- KitoPick の ViewModel（View/Renderer から共有する純関数の置き場）",
        "-- 依存：なし（Roblox API 非依存）",
        "",
        "local VM = {}",
        "",
        "-- kind → 表示名",
        "local KIND_JP = {",
        "\tbright = \"光札\",",
        "\tribbon = \"短冊\",",
        "\tseed   = \"タネ\",",
        "\tchaff  = \"カス\",",
        "}",
        "function VM.kindToJp(k)",
        "\treturn KIND_JP[tostring(k or \"\")] or tostring(k or \"?\")",
        "end",
        "",
        "-- month 推定（payload.entry から）",
        "function VM.parseMonth(entry)",
        "\tif not entry then return nil end",
        "\tlocal m = tonumber(entry.month or (entry.meta and entry.meta.month))",
        "\tif m and m>=1 and m<=12 then return m end",
        "\tlocal s = tostring(entry.code or entry.uid or \"\")",
        "\tlocal two = string.match(s, \"^(%d%d)\")",
        "\tif not two then return nil end",
        "\tm = tonumber(two)",
        "\tif m and m>=1 and m<=12 then return m end",
        "\treturn nil",
        "end",
        "",
        "-- サーバ理由の表示文言",
        "local REASON_JP = {",
        "\t[\"already-applied\"]     = \"既に適用済みです\",",
        "\t[\"already-bright\"]      = \"すでに光札です\",",
        "\t[\"already-chaff\"]       = \"すでにカス札です\",",
        "\t[\"month-has-no-bright\"] = \"この月に光札はありません\",",
        "\t[\"not-eligible\"]        = \"対象外です\",",
        "\t[\"same-target\"]         = \"同一カードは選べません\",",
        "\t[\"no-check\"]            = \"対象外（サーバ判定なし）\",",
        "}",
        "function VM.reasonToText(reason)",
        "\treturn REASON_JP[tostring(reason or \"\")] or nil",
        "end",
        "",
        "return VM"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": true,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/config/Balance.lua",
      "ext": "lua",
      "binary": false,
      "size": 5610,
      "mtime": "2025-10-03T18:40:44.607034+00:00",
      "head": [
        "-- ReplicatedStorage/Config/Balance.lua",
        "-- 祈祷（KITO）関連の調整用ノブ集",
        "-- UIは後付け可能なようにフラグで切替え",
        "",
        "local Balance = {}",
        "",
        "----------------------------------------------------------------",
        "-- ▼▼ ステージ（12か月一直線）設定 ここから ▼▼",
        "----------------------------------------------------------------",
        "-- 月関連の基本パラメータ",
        "Balance.STAGE_START_MONTH  = 1     -- ラン開始月",
        "Balance.STAGE_CLEAR_AT     = 9     -- 9月クリアで勝利扱い（その後は任意のEX）",
        "Balance.STAGE_MONTHS_TOTAL = 12    -- 総月数（EX含めた最終は12月）",
        "",
        "-- EX（10〜12月）各月のクリア報酬（両）",
        "Balance.EX_CLEAR_REWARD_RYO = 2",
        "",
        "-- 目標スコア：まずは動作確認用に 1〜12 の連番（後でここだけを調整すればOK）",
        "Balance.GOAL_BY_MONTH = {",
        "\t[1]=1,  [2]=2,  [3]=3,  [4]=4,  [5]=5,  [6]=6,",
        "\t[7]=7,  [8]=8,  [9]=9,  [10]=10, [11]=11, [12]=12,",
        "}",
        "",
        "-- 後方互換（呼び出し側が小文字を参照しても動くようにエイリアスを提供）",
        "Balance.goalByMonth = Balance.GOAL_BY_MONTH",
        "",
        "-- ヘルパ：月→目標スコア（範囲外はクランプ）",
        "function Balance.getGoalForMonth(month)",
        "\tif type(month) ~= \"number\" then return Balance.GOAL_BY_MONTH[1] end",
        "\tif month < 1 then month = 1 end",
        "\tif month > Balance.STAGE_MONTHS_TOTAL then month = Balance.STAGE_MONTHS_TOTAL end",
        "\treturn Balance.GOAL_BY_MONTH[month] or Balance.GOAL_BY_MONTH[1]",
        "end",
        "----------------------------------------------------------------",
        "-- ▲▲ ステージ（12か月一直線）設定 ここまで ▲▲",
        "----------------------------------------------------------------",
        "",
        "----------------------------------------------------------------",
        "-- ▼ リロール回数（Run：場/手の分離）",
        "--   「場のリロール（全体リロール）」と「手札のリロール」の初期回数。",
        "--   既存の「ハンド3」「リロール5」をそれぞれ hand/field に割当てる。",
        "----------------------------------------------------------------",
        "Balance.REROLL_FIELD_INIT = 5  -- 場（Field）のリロール初期回数（旧：リロール5）",
        "Balance.REROLL_HAND_INIT  = 3  -- 手札（Hand）のリロール初期回数（旧：ハンド3）",
        "",
        "-- ※将来、文コストや上限強化を導入する場合は、ここに REROLL_*_COST や",
        "--   REROLL_*_MAX などのノブを追加してサーバ側ロジックで参照してください。",
        "----------------------------------------------------------------",
        "",
        "----------------------------------------------------------------",
        "-- ▼ 将来用ノブ（いまは挙動を変えない“空の変数”）",
        "--   お守り/実績による回数ボーナスは、GameInit 側のフックで合算予定。",
        "--   いまは空や nil のままなので、挙動は変わりません。",
        "----------------------------------------------------------------",
        "-- 上限（未使用なら nil のままでOK）",
        "Balance.REROLL_FIELD_MAX = nil   -- 例: 9 で上限9、nil なら上限なし",
        "Balance.REROLL_HAND_MAX  = nil",
        "",
        "-- お守りボーナス表（id -> { field=?, hand=? }）",
        "Balance.OMAMORI_REROLL_BONUS = Balance.OMAMORI_REROLL_BONUS or {",
        "\t-- 例:",
        "\t-- [\"omamori_reroll_field_1\"] = { field = 1, hand = 0 },",
        "\t-- [\"omamori_reroll_hand_1\"]  = { field = 0, hand = 1 },",
        "\t-- [\"omamori_reroll_both_1\"]  = { field = 1, hand = 1 },",
        "}",
        "",
        "-- 実績ボーナス表（id -> { field=?, hand=? }）",
        "Balance.ACHIEVE_REROLL_BONUS = Balance.ACHIEVE_REROLL_BONUS or {",
        "\t-- 例:",
        "\t-- [\"ach_clear_100_runs\"] = { field = 1, hand = 0 },",
        "\t-- [\"ach_koikoi_master\"]  = { field = 0, hand = 1 },",
        "}",
        "----------------------------------------------------------------",
        "",
        "-- ▼ プールの基本設定",
        "Balance.KITO_POOL_SIZE      = 12  -- サンプル提示枚数（UIなし時も内部で使用）",
        "Balance.KITO_POOL_TTL_SEC   = 45  -- セッション有効秒数（開始→決定の猶予）",
        "",
        "-- ▼ プール生成モード（Core用）",
        "--   \"any12_disable_ineligible\" : ランダム12枚提示 → サーバの canApply で不適格をグレーアウト（新仕様）",
        "--   \"eligible12\"               : 旧互換。適格なものだけから最大N枚を提示（フィルタ済み）",
        "Balance.KITO_POOL_MODE      = \"any12_disable_ineligible\"",
        "",
        "-- ▼ UI導入のトグル",
        "--   false: サーバ自動選択（旧挙動／内部で即確定）",
        "--   true : UIでプレイヤーが選択（Shop購入後に候補を提示）",
        "Balance.KITO_UI_ENABLED     = true",
        "",
        "-- ▼ 本UIを使うため、自動決定は無効化",
        "--   true : 候補受信後にクライアントが自動で1枚決定→Decide送信",
        "--   false: 自動決定をしない（本UIでの手動選択を想定）",
        "Balance.KITO_UI_AUTO_DECIDE = false",
        "",
        "-- ▼ 自動選択モード時の選択枚数（酉：1枚変換などは通常1）",
        "Balance.KITO_AUTO_PICK_COUNT = 1",
        "",
        "-- ▼ UI時に提示する枚数（未指定なら KITO_POOL_SIZE を使用）",
        "Balance.KITO_UI_PICK_COUNT   = Balance.KITO_POOL_SIZE",
        "",
        "-- ▼ 効果バランス（巳：Venom）",
        "--   Venom 適用時に即時付与する文（所持金）の増分",
        "Balance.KITO_VENOM_CASH      = 5",
        "",
        "-- ▼ 互換ノブ（旧Coreが参照していた場合のために残置）",
        "--   \"block\": すでに同種（例: bright）ならプール除外 / \"allow\": 含める",
        "--   新Core（any12 モード）では使用しないが、他所で参照されても破綻しないよう既定を置く",
        "Balance.KITO_SAME_KIND_POLICY = \"block\"  -- legacy / compatibility",
        "",
        "return Balance"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/config/DisplayMode.lua",
      "ext": "lua",
      "binary": false,
      "size": 562,
      "mtime": "2025-09-03T05:37:30.413397+00:00",
      "head": [
        "-- src/config/DisplayMode.lua",
        "local DisplayMode = {}",
        "",
        "DisplayMode.Current = \"2D\"  -- 当面は2D固定",
        "",
        "function DisplayMode:is2D() return self.Current == \"2D\" end",
        "function DisplayMode:is3D() return self.Current == \"3D\" end",
        "",
        "function DisplayMode:set(mode)",
        "\tif mode == \"2D\" then",
        "\t\tself.Current = \"2D\"; return true",
        "\telseif mode == \"3D\" then",
        "\t\twarn(\"[DisplayMode] 3Dは未実装です（当面2D固定）\")",
        "\t\tself.Current = \"2D\"; return false",
        "\telse",
        "\t\twarn(\"[DisplayMode] 不明なモード: \", mode)",
        "\t\treturn false",
        "\tend",
        "end",
        "",
        "return DisplayMode"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/config/FeatureFlags.lua",
      "ext": "lua",
      "binary": false,
      "size": 182,
      "mtime": "2025-10-07T07:33:06.556889+00:00",
      "head": [
        "-- FeatureFlags.lua",
        "-- KitoPick は非依存。必要なら他機能のトグルのみ管理。",
        "local M = {",
        "  REL_UI_RUN_MODAL = false,",
        "  REL_UI_TAKEN     = false,",
        "}",
        "return M"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": true,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/config/Locale.lua",
      "ext": "lua",
      "binary": false,
      "size": 13201,
      "mtime": "2025-09-26T05:50:00.457870+00:00",
      "head": [
        "-- ReplicatedStorage/Config/Locale.lua",
        "-- Home/Run 共通の簡易ローカライズ",
        "-- P0-9: 外部I/Fの言語コードを ja/en に統一。jp は警告を出して ja に正規化。",
        "--  1) Locale.en / Locale.ja を公開（Locale.jp は非推奨 alias）",
        "--  2) Locale.t(lang, key) / Locale.get(lang) / Locale.pick(forced)",
        "--  3) Locale.setGlobal(lang) / Locale.getGlobal() / Locale.changed (Signal)",
        "--  4) jp入力時は warn を一度だけ出す（内部では常に ja に変換）",
        "-- P0-10: OSロケール検出のスタイルを簡素化",
        "",
        "local Locale = {}",
        "",
        "Locale._verbose = false",
        "",
        "-- ===== ログユーティリティ =====",
        "local function L(tag, msg, kv)",
        "\tif not Locale._verbose then return end",
        "\tlocal parts = {}",
        "\tif type(kv)==\"table\" then",
        "\t\tfor k,v in pairs(kv) do table.insert(parts, (tostring(k)..\"=\"..tostring(v))) end",
        "\tend",
        "\tprint((\"[LANG] %-14s | %s%s\"):format(tag, msg or \"\", (#parts>0) and (\" | \"..table.concat(parts,\" \")) or \"\"))",
        "end",
        "",
        "-- ===== jp→ja 統一のための正規化 =====",
        "local _warnedJP = false",
        "local function _warnOnceJP(where)",
        "\tif _warnedJP then return end",
        "\t_warnedJP = true",
        "\twarn((\"[Locale] '%s': language code 'jp' is DEPRECATED; using 'ja' instead.\"):format(where or \"norm\"))",
        "end",
        "",
        "local function _norm(lang:string?)",
        "\tlocal s = tostring(lang or \"\"):lower()",
        "\tif s == \"jp\" then",
        "\t\t_warnOnceJP(\"norm\")",
        "\t\treturn \"ja\"",
        "\tend",
        "\tif s == \"ja\" then return \"ja\" end",
        "\tif s == \"en\" then return \"en\" end",
        "\treturn nil",
        "end",
        "",
        "-- ===== OS言語検出 =====",
        "local Players = game:GetService(\"Players\")",
        "",
        "local function detectLang()",
        "\tlocal lp = Players.LocalPlayer",
        "\tif lp and lp.LocaleId then",
        "\t\tlocal lid = string.lower(lp.LocaleId)",
        "\t\tlocal res = (string.sub(lid, 1, 2) == \"ja\") and \"ja\" or \"en\"",
        "\t\tL(\"detectLang\", \"OS locale detected\", {LocaleId=lid, resolved=res})",
        "\t\treturn res",
        "\tend",
        "\tL(\"detectLang\", \"OS locale fallback to EN\", {hasLocalPlayer=tostring(lp ~= nil)})",
        "\treturn \"en\"",
        "end",
        "",
        "function Locale.pick(forced)",
        "\tlocal normalized = _norm(forced)",
        "\tlocal resolved = normalized or detectLang()",
        "\tL(\"pick\", \"pick language\", {forced=forced, normalized=normalized, resolved=resolved})",
        "\treturn resolved",
        "end",
        "",
        "--=== 辞書 ===============================================================",
        "local en = {",
        "\t-- Home",
        "\tMAIN_TITLE   = \"Gokurakuchou\",",
        "\tSUBTITLE     = \"Hanafuda Rogue\",",
        "\tSTATUS_FMT   = \"Year:%s  Ryo:%d  Progress: %d/3 Clears\",",
        "\tBETA_BADGE   = \"BETA TEST\",",
        "",
        "\tBTN_START    = \"Start Game\",",
        "\tBTN_SHRINE   = \"Shrine (WIP)\",",
        "\tBTN_ITEMS    = \"Inventory (WIP)\",",
        "\tBTN_SETTINGS = \"Settings (WIP)\",",
        "\tBTN_PATCH    = \"PATCH NOTES\",",
        "\tBTN_CONT     = \"CONTINUE (WIP)\",",
        "\tBTN_SYNCING  = \"Syncing…\",",
        "",
        "\tNOTIFY_SHRINE_TITLE   = \"Shrine\",",
        "\tNOTIFY_SHRINE_TEXT    = \"Work in progress: Permanent upgrades\",",
        "\tNOTIFY_ITEMS_TITLE    = \"Inventory\",",
        "\tNOTIFY_ITEMS_TEXT     = \"Work in progress: Items\",",
        "\tNOTIFY_SETTINGS_TITLE = \"Settings\",",
        "\tNOTIFY_SETTINGS_TEXT  = \"Work in progress: Sound/UI/Controls\",",
        "",
        "\tCONTINUE_STUB_TITLE = \"CONTINUE\",",
        "\tCONTINUE_STUB_TEXT  = \"Coming next (Save not implemented yet)\",",
        "\tUNSET_YEAR          = \"----\",",
        "",
        "\t-- RunScreen",
        "\tRUN_GOAL_TITLE       = \"Goal\",",
        "\tRUN_SCORE_TITLE      = \"Current Score\",",
        "\tRUN_TAKEN_TITLE      = \"Taken Cards\",",
        "\tRUN_BTN_CONFIRM      = \"Confirm\",",
        "\tRUN_BTN_REROLL_ALL   = \"Reroll (All)\",",
        "\tRUN_BTN_REROLL_HAND  = \"Reroll (Hand)\",",
        "\tRUN_BTN_YAKU         = \"Yaku\",",
        "\tRUN_HELP_LINE        = \"Click hand → field to take. Confirm to finish.\",",
        "\tRUN_INFO_PLACEHOLDER = \"Year:----  Season:--  Target:--  Total:--  Hands:--  Rerolls:--  Mult:--  Bank:--\",",
        "\tRUN_SCOREBOX_INIT    = \"Score: 0\\n0Mon × 0Pts\\nRoles: --\",",
        "\t-- ★ Abandon（ラン放棄）",
        "\tRUN_BTN_ABANDON      = \"Give Up Run\",",
        "\tABANDON_TITLE        = \"Give up this run?\",",
        "\tABANDON_DESC         = \"This will discard your current progress and return to Home. This action cannot be undone.\",",
        "\tABANDON_CONFIRM      = \"Yes, give up\",",
        "\tABANDON_CANCEL       = \"No\",",
        "",
        "\t-- Result",
        "\tRESULT_FINAL_TITLE = \"Congrats!\",",
        "\tRESULT_FINAL_DESC  = \"Run finished. Returning to menu.\",",
        "\tRESULT_FINAL_BTN   = \"Back to Menu\",",
        "",
        "\t-- Toast",
        "\tTOAST_TITLE = \"Notice\",",
        "",
        "\t-- 空役（P0-8）",
        "\tROLES_NONE = \"No roles\",",
        "",
        "\t-- ===== Shop: Items (Locale-first) =====",
        "\tSHOP_ITEM_kito_ushi_NAME = \"Ox: Double Mon\",",
        "\tSHOP_ITEM_kito_ushi_DESC = \"Double your current mon immediately (capped).\",",
        "",
        "\tSHOP_ITEM_kito_tora_NAME = \"Tiger: +1 point on taken cards\",",
        "\tSHOP_ITEM_kito_tora_DESC = \"Permanent: taken cards score +1 (stackable).\",",
        "",
        "\tSHOP_ITEM_kito_tori_NAME = \"Rooster: Convert to Bright\",",
        "\tSHOP_ITEM_kito_tori_DESC = \"Convert one non-bright in run config to Bright (or queue +1 for next season).\",",
        "",
        "\tSHOP_ITEM_sai_kasu_NAME  = \"Kasu Festival\",",
        "\tSHOP_ITEM_sai_kasu_DESC  = \"Festival: Kasu +1 level (scoring +1x and +1pt per Lv).\",",
        "",
        "\tSHOP_ITEM_sai_tanzaku_NAME = \"Tanzaku Festival\",",
        "\tSHOP_ITEM_sai_tanzaku_DESC = \"Festival: Tanzaku +1 level (scoring +1x and +3pt per Lv).\",",
        "",
        "\tSHOP_ITEM_spectral_blackhole_NAME = \"Black Hole\",",
        "\tSHOP_ITEM_spectral_blackhole_DESC = \"Instant: All festival levels +1.\",",
        "",
        "\tSHOP_ITEM_tali_dev_plus1_NAME       = \"Talisman: +1 pt\",",
        "\tSHOP_ITEM_tali_dev_plus1_DESC       = \"After scoring, add +1 point (dev).\",",
        "\tSHOP_ITEM_tali_dev_gokou_plus5_NAME = \"Talisman: Gokou +5\",",
        "\tSHOP_ITEM_tali_dev_gokou_plus5_DESC = \"+5 points only when Gokou triggers (dev).\",",
        "\tSHOP_ITEM_tali_dev_sake_plus3_NAME  = \"Talisman: Sake +3\",",
        "\tSHOP_ITEM_tali_dev_sake_plus3_DESC  = \"+3 points when Sake is involved (dev).\",",
        "",
        "\t-- ===== Shop: UI (migrated from ShopI18n) =====",
        "\tSHOP_UI_TITLE                 = \"Shop (MVP)\",",
        "\tSHOP_UI_VIEW_DECK             = \"View Deck\",",
        "\tSHOP_UI_HIDE_DECK             = \"Hide Deck\",",
        "\tSHOP_UI_REROLL_FMT            = \"Reroll (-%d)\",",
        "\tSHOP_UI_INFO_TITLE            = \"Item Info\",",
        "\tSHOP_UI_INFO_PLACEHOLDER      = \"(Hover or click an item)\",",
        "\tSHOP_UI_DECK_TITLE_FMT        = \"Current Deck (%d cards)\",",
        "\tSHOP_UI_DECK_EMPTY            = \"(no cards)\",",
        "\tSHOP_UI_CLOSE_BTN             = \"Close shop and next season\",",
        "\tSHOP_UI_SUMMARY_CLEARED_FMT   = \"Cleared! Total:%d / Target:%d\\nReward: %d mon (Have: %d)\\n\",",
        "\tSHOP_UI_SUMMARY_ITEMS_FMT     = \"Items: %d\",",
        "\tSHOP_UI_SUMMARY_MONEY_FMT     = \"Money: %d mon\",",
        "\tSHOP_UI_LABEL_CATEGORY        = \"Category: %s\",",
        "\tSHOP_UI_LABEL_PRICE           = \"Price: %s\",",
        "\tSHOP_UI_NO_DESC               = \"(no description)\",",
        "\tSHOP_UI_INSUFFICIENT_SUFFIX   = \" (insufficient)\",",
        "",
        "\t-- Extra (for Talisman UI / toasts)",
        "\tSHOP_UI_TALISMAN_BOARD_TITLE  = \"Talisman Board\",",
        "\tSHOP_UI_NO_EMPTY_SLOT         = \"No empty slot available\",",
        "}",
        "",
        "local ja = {",
        "\t-- Home",
        "\tMAIN_TITLE   = \"極楽蝶\",",
        "\tSUBTITLE     = \"Hanafuda Rogue\",",
        "\tSTATUS_FMT   = \"年:%s  両:%d  進捗: 通算 %d/3 クリア\",",
        "\tBETA_BADGE   = \"BETA TEST\",",
        "",
        "\tBTN_START    = \"スタートゲーム\",",
        "\tBTN_SHRINE   = \"神社（開発中）\",",
        "\tBTN_ITEMS    = \"持ち物（開発中）\",",
        "\tBTN_SETTINGS = \"設定（開発中）\",",
        "\tBTN_PATCH    = \"パッチノート\",",
        "\tBTN_CONT     = \"CONTINUE（開発中）\",",
        "\tBTN_SYNCING  = \"同期中…\",",
        "",
        "\tNOTIFY_SHRINE_TITLE   = \"神社\",",
        "\tNOTIFY_SHRINE_TEXT    = \"開発中：恒久強化ショップ\",",
        "\tNOTIFY_ITEMS_TITLE    = \"持ち物\",",
        "\tNOTIFY_ITEMS_TEXT     = \"開発中：所持品一覧\",",
        "\tNOTIFY_SETTINGS_TITLE = \"設定\",",
        "\tNOTIFY_SETTINGS_TEXT  = \"開発中：サウンド/UI/操作\",",
        "",
        "\tCONTINUE_STUB_TITLE = \"CONTINUE\",",
        "\tCONTINUE_STUB_TEXT  = \"次回対応（セーブ未実装）\",",
        "\tUNSET_YEAR          = \"----\",",
        "",
        "\t-- RunScreen",
        "\tRUN_GOAL_TITLE       = \"目標スコア\",",
        "\tRUN_SCORE_TITLE      = \"現在スコア\",",
        "\tRUN_TAKEN_TITLE      = \"取り札\",",
        "\tRUN_BTN_CONFIRM      = \"この手で勝負\",",
        "\tRUN_BTN_REROLL_ALL   = \"全体リロール\",",
        "\tRUN_BTN_REROLL_HAND  = \"手札だけリロール\",",
        "\tRUN_BTN_YAKU         = \"役一覧\",",
        "\tRUN_HELP_LINE        = \"手札→場札をクリックで取得。Confirmで確定。\",",
        "\tRUN_INFO_PLACEHOLDER = \"年:----  季節:--  目標:--  合計:--  残ハンド:--  残リロール:--  倍率:--  Bank:--\",",
        "\tRUN_SCOREBOX_INIT    = \"得点：0\\n文0×0点\\n役：--\",",
        "\t-- ★ Abandon（ラン放棄）",
        "\tRUN_BTN_ABANDON      = \"ランをあきらめる\",",
        "\tABANDON_TITLE        = \"このランをあきらめますか？\",",
        "\tABANDON_DESC         = \"現在の進行状況は破棄され、ホームに戻ります。この操作は取り消せません。\",",
        "\tABANDON_CONFIRM      = \"はい、あきらめる\",",
        "\tABANDON_CANCEL       = \"いいえ\",",
        "",
        "\t-- Result",
        "\tRESULT_FINAL_TITLE = \"クリアおめでとう！\",",
        "\tRESULT_FINAL_DESC  = \"このランは終了です。メニューに戻ります。\",",
        "\tRESULT_FINAL_BTN   = \"メニューに戻る\",",
        "",
        "\t-- Toast",
        "\tTOAST_TITLE = \"通知\",",
        "",
        "\t-- 空役（P0-8）",
        "\tROLES_NONE = \"役なし\",",
        "",
        "\t-- ===== Shop: Items (Locale-first) =====",
        "\tSHOP_ITEM_kito_ushi_NAME = \"丑：所持文を2倍\",",
        "\tSHOP_ITEM_kito_ushi_DESC = \"所持文を即時2倍（上限あり）。\",",
        "",
        "\tSHOP_ITEM_kito_tora_NAME = \"寅：取り札の得点+1\",",
        "\tSHOP_ITEM_kito_tora_DESC = \"以後、取り札の得点+1（恒常バフ／スタック可）。\",",
        "",
        "\tSHOP_ITEM_kito_tori_NAME = \"酉：1枚を光札に変換\",",
        "\tSHOP_ITEM_kito_tori_DESC = \"ラン構成の非brightを1枚brightへ（対象無しなら次季に+1繰越）。\",",
        "",
        "\tSHOP_ITEM_sai_kasu_NAME  = \"カス祭り\",",
        "\tSHOP_ITEM_sai_kasu_DESC  = \"カス役に祭事レベル+1（採点時に倍率+1/Lv、点+1/Lv）。\",",
        "",
        "\tSHOP_ITEM_sai_tanzaku_NAME = \"短冊祭り\",",
        "\tSHOP_ITEM_sai_tanzaku_DESC = \"短冊役に祭事レベル+1（採点時に倍率+1/Lv、点+3/Lv）。\",",
        "",
        "\tSHOP_ITEM_spectral_blackhole_NAME = \"黒天\",",
        "\tSHOP_ITEM_spectral_blackhole_DESC = \"即時：すべての祭事レベルを+1。\",",
        "",
        "\tSHOP_ITEM_tali_dev_plus1_NAME       = \"護符：+1点\",",
        "\tSHOP_ITEM_tali_dev_plus1_DESC       = \"採点後、常時+1点を加算（開発用）。\",",
        "\tSHOP_ITEM_tali_dev_gokou_plus5_NAME = \"護符：五光+5\",",
        "\tSHOP_ITEM_tali_dev_gokou_plus5_DESC = \"五光成立時のみ、+5点（開発用）。\",",
        "\tSHOP_ITEM_tali_dev_sake_plus3_NAME  = \"護符：酒+3\",",
        "\tSHOP_ITEM_tali_dev_sake_plus3_DESC  = \"酒が関与したとき、+3点（開発用）。\",",
        "",
        "\t-- ===== Shop: UI (migrated from ShopI18n) =====",
        "\tSHOP_UI_TITLE                 = \"屋台（MVP）\",",
        "\tSHOP_UI_VIEW_DECK             = \"デッキを見る\",",
        "\tSHOP_UI_HIDE_DECK             = \"デッキを隠す\",",
        "\tSHOP_UI_REROLL_FMT            = \"リロール（-%d 文）\",",
        "\tSHOP_UI_INFO_TITLE            = \"アイテム情報\",",
        "\tSHOP_UI_INFO_PLACEHOLDER      = \"（アイテムにマウスを乗せるか、クリックしてください）\",",
        "\tSHOP_UI_DECK_TITLE_FMT        = \"現在のデッキ（%d 枚）\",",
        "\tSHOP_UI_DECK_EMPTY            = \"(カード無し)\",",
        "\tSHOP_UI_CLOSE_BTN             = \"屋台を閉じて次の季節へ\",",
        "\tSHOP_UI_SUMMARY_CLEARED_FMT   = \"達成！ 合計:%d / 目標:%d\\n報酬：%d 文（所持：%d 文）\\n\",",
        "\tSHOP_UI_SUMMARY_ITEMS_FMT     = \"商品数: %d 点\",",
        "\tSHOP_UI_SUMMARY_MONEY_FMT     = \"所持文: %d 文\",",
        "\tSHOP_UI_LABEL_CATEGORY        = \"カテゴリ: %s\",",
        "\tSHOP_UI_LABEL_PRICE           = \"価格: %s\",",
        "\tSHOP_UI_NO_DESC               = \"(説明なし)\",",
        "\tSHOP_UI_INSUFFICIENT_SUFFIX   = \"（不足）\",",
        "",
        "\t-- Extra (for Talisman UI / toasts)",
        "\tSHOP_UI_TALISMAN_BOARD_TITLE  = \"護符ボード\",",
        "\tSHOP_UI_NO_EMPTY_SLOT         = \"空きスロットがありません\",",
        "}",
        "",
        "Locale._data = { en = en, ja = ja }",
        "Locale.en = en",
        "Locale.ja = ja",
        "",
        "-- ▼ 非推奨 alias: Locale.jp",
        "do",
        "\tlocal proxy = {}",
        "\tsetmetatable(proxy, {",
        "\t\t__index = function(_, k)",
        "\t\t\t_warnOnceJP(\"Locale.jp.__index\")",
        "\t\t\treturn ja[k]",
        "\t\tend,",
        "\t\t__newindex = function(_, k, v)",
        "\t\t\t_warnOnceJP(\"Locale.jp.__newindex\")",
        "\t\t\tja[k] = v",
        "\t\tend,",
        "\t\t__pairs = function()",
        "\t\t\t_warnOnceJP(\"Locale.jp.__pairs\")",
        "\t\t\treturn next, ja, nil",
        "\t\tend,",
        "\t})",
        "\tLocale.jp = proxy",
        "end",
        "",
        "--=== 共有言語と変更通知 ================================================",
        "local _current = nil",
        "local _changed = Instance.new(\"BindableEvent\")"
      ],
      "truncated": true,
      "analysis": {
        "waitForChild": [],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 2,
          "ja_literals": 6
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/config/PatchNotes.lua",
      "ext": "lua",
      "binary": false,
      "size": 15803,
      "mtime": "2025-10-07T20:27:12.442518+00:00",
      "head": [
        "-- ReplicatedStorage/Config/PatchNotes.lua",
        "-- 公開向けパッチノート（RichText対応）",
        "-- PatchNotesModal は title/body を読むだけ。このファイルを更新するだけでUIに反映されます。",
        "",
        "local M = {}",
        "",
        "-- ========= 注意書き（JA/EN） =========",
        "local NOTICE = {",
        "\tja = [[<b>⚠ 注意（開発中）</b><br/>",
        "<font transparency=\"0.08\">",
        "現在この作品は開発中です。プレイは可能ですが、難易度やバランスは暫定です。",
        "不具合の発生、仕様の予告ない変更、到達履歴やセーブデータのリセットが行われる場合があります。",
        "ご了承のうえお楽しみください。",
        "</font>]],",
        "\ten = [[<b>⚠ Notice (In Development)</b><br/>",
        "<font transparency=\"0.08\">",
        "The game is in active development. It is playable, but difficulty and balance are provisional.",
        "Bugs may occur, features may change without notice, and progress/save data may be reset.",
        "Thank you for your understanding.",
        "</font>]],",
        "}",
        "",
        "-- 先頭が最新。新バージョンは配列の「先頭」に追加していく。",
        "local ENTRIES = {",
        "\t-- ★ 0.9.7.1（外部向け）",
        "\t{",
        "\t\tver  = \"v0.9.7.1\",",
        "\t\tdate = \"2025-10-08\",",
        "\t\tchanges = {",
        "\t\t\t{",
        "\t\t\t\tja = \"描写ロジックを分割し、表示の安定性と今後の拡張性を向上。\",",
        "\t\t\t\ten = \"Split rendering logic to improve stability and future extensibility.\"",
        "\t\t\t},",
        "\t\t\t{",
        "\t\t\t\tja = \"UIの改善と細かな調整を実施。\",",
        "\t\t\t\ten = \"Various UI improvements and fine-tuning.\"",
        "\t\t\t},",
        "\t\t\t{",
        "\t\t\t\tja = \"携帯や多様な画面サイズに対応する相対レイアウトへ移行（まだ不十分ですが、携帯でも遊べる程度まで対応）。\",",
        "\t\t\t\ten = \"Moved to responsive, relative layouts for phones and diverse screen sizes (still a work in progress, but now reasonably playable on mobile).\"",
        "\t\t\t},",
        "\t\t}",
        "\t},",
        "",
        "\t-- ★ 0.9.7.0（外部向け）",
        "\t{",
        "\t\tver  = \"v0.9.7.0\",",
        "\t\tdate = \"2025-10-04\",",
        "\t\tchanges = {",
        "\t\t\t{",
        "\t\t\t\tja = \"1ゲームの最長を12か月に設定。9月クリアで通常クリア、10月以降はEX扱いになります。\",",
        "\t\t\t\ten = \"Set a game’s maximum length to 12 months. Clearing September counts as a normal clear; October and beyond are treated as EX.\"",
        "\t\t\t},",
        "\t\t\t{",
        "\t\t\t\tja = \"リロールを「ハンド」と「場」に分離し、それぞれ別の回数制限に。UIもそれに合わせて更新しました。\",",
        "\t\t\t\ten = \"Split Reroll into “Hand” and “Field,” each with its own attempt limit. Updated the UI accordingly.\"",
        "\t\t\t},",
        "\t\t\t{",
        "\t\t\t\tja = \"祈祷（干支）のイメージを追加しました。\",",
        "\t\t\t\ten = \"Added visual images for Kito (zodiac) effects.\"",
        "\t\t\t},",
        "\t\t}",
        "\t},",
        "",
        "\t-- ★ 0.9.6.6（外部向け）",
        "\t{",
        "\t\tver  = \"v0.9.6.6\",",
        "\t\tdate = \"2025-09-28\",",
        "\t\tchanges = {",
        "\t\t\t{ ja = \"ギブアップボタンを実装。現在のランを安全に終了できます。\",",
        "\t\t\t  en = \"Implemented a Give Up button to safely end the current run.\" },",
        "",
        "\t\t\t{ ja = \"祈祷を拡充：子・未・巳・午・卯・亥・戌を追加（子=最後の祈祷を再発火／未=圧縮：山札から1枚削除／巳=カス化／午=タネ化／卯=短冊化／亥=酒化／戌=2枚カス化）。\",",
        "\t\t\t  en = \"Expanded Kito: added Ko (re-fire last Kito), Hitsuji (prune: remove 1 from deck), Mi (venom: convert to Kasu), Uma (seed: convert to Seed), Usagi (ribbon: convert to Ribbon), I (sake: convert to Sake), and Inu (two-chaff: convert 2 to Kasu).\" },",
        "",
        "\t\t\t{ ja = \"祈祷に関する不具合をいくつか修正（選択フロー／再発火／メッセージ整合など）。\",",
        "\t\t\t  en = \"Fixed several Kito-related issues (selection flow, re-fire behavior, and messaging consistency).\" },",
        "\t\t}",
        "\t},",
        "",
        "\t-- ★ 0.9.6.5（Deck Reforge / 外部向け）",
        "\t{",
        "\t\tver  = \"v0.9.6.5\",",
        "\t\tdate = \"2025-09-26\",",
        "\t\tchanges = {",
        "\t\t\t{ ja = \"デッキの土台を作り直し、“強化・変身・付与”などカード変化系の効果を今後スムーズに追加できるようにしました。\",",
        "\t\t\t  en = \"Reforged the deck foundation so evolve/transform/augment-type card effects can be added smoothly.\" },",
        "",
        "\t\t\t{ ja = \"今回のプレイ感はキープ（得点計算や難易度の変更はありません）。\",",
        "\t\t\t  en = \"No balance change this update; scoring and difficulty remain the same.\" },",
        "",
        "\t\t\t{ ja = \"対象カードの選び方を統一し、選択が分かりやすくなりました（12枚候補から選ぶ流れ）。\",",
        "\t\t\t  en = \"Target selection is clearer and more consistent (unified 12-card choice flow).\" },",
        "",
        "\t\t\t{ ja = \"反映の信頼性を向上（カード変化が即時かつ一度だけ適用されます）。\",",
        "\t\t\t  en = \"Improved reliability: card changes now apply instantly and only once.\" },",
        "\t\t}",
        "\t},",
        "",
        "\t-- ★ 0.9.6.3（外部向け・簡潔）",
        "\t{",
        "\t\tver  = \"v0.9.6.3\",",
        "\t\tdate = \"2025-09-21\",",
        "\t\tchanges = {",
        "\t\t\t{ ja = \"護符の自動配置と表示同期を改善。購入後すぐに反映され、状況がより分かりやすくなりました。\",",
        "\t\t\t  en = \"Improved Talisman auto-placement and sync. Purchases now reflect instantly with clearer feedback.\" },",
        "\t\t\t{ ja = \"言語設定を調整（ja/en に統一）。英語モード時、情報パネルなどの表記が正しく英語で表示されます。\",",
        "\t\t\t  en = \"Language handling refined (standardized to ja/en). Info panels now correctly show English when selected.\" },",
        "\t\t\t{ ja = \"祭事を拡充：カス／短冊に加え、タネ・赤短・青短・猪鹿蝶・花見・月見・三光・四光・五光を追加。採点時に効果が加算されます。\",",
        "\t\t\t  en = \"Expanded Festivals: added Seed, Akatan, Aotan, Inoshikacho, Hanami, Tsukimi, Sanko, Yonkou, and Gokou (scores gain additional bonuses during tally).\" },",
        "\t\t\t{ ja = \"屋台の表示更新を微調整し、購入・リロール後の見た目の安定性を向上。\",",
        "\t\t\t  en = \"Minor Shop polish for more stable visuals after purchase and reroll.\" },",
        "\t\t}",
        "\t},",
        "",
        "\t-- ★ 0.9.6.1（外部向け）",
        "\t{",
        "\t\tver  = \"v0.9.6.1\",",
        "\t\tdate = \"2025-09-19\",",
        "\t\tchanges = {",
        "\t\t\t{ ja = \"護符（Talisman）を屋台に追加。購入するとボードに自動配置され、状態が画面に分かりやすく反映されます。\",",
        "\t\t\t  en = \"Added Talisman to the Shop. Buying one now auto-places it on your board with clear on-screen feedback.\" },",
        "\t\t\t{ ja = \"護符ボードを横一列・比率可変の表示に刷新。端末サイズに合わせてスロットが見やすく並びます（現段階では表示のみ）。\",",
        "\t\t\t  en = \"Refreshed the Talisman Board: single-row, responsive layout for consistent viewing across devices (display-only for now).\" },",
        "\t\t\t{ ja = \"購入した商品は屋台から即時に非表示に。リロール時は品揃えがクリーンに更新されます。\",",
        "\t\t\t  en = \"Purchased items now disappear from the Shop immediately. Reroll updates the lineup cleanly.\" },",
        "\t\t\t{ ja = \"屋台更新時のちらつきや一時的な表示ズレを軽減し、操作感を安定化。\",",
        "\t\t\t  en = \"Reduced flicker and transient layout shifts during Shop updates for a smoother experience.\" },",
        "\t\t\t{ ja = \"採点（スコア計算）の挙動は今回変更なし。護符の実効果は今後のアップデートで段階的に追加予定です。\",",
        "\t\t\t  en = \"No scoring changes this update. Talisman effects will roll out in future releases.\" },",
        "\t\t}",
        "\t},",
        "",
        "\t-- ここから下は既存（変更なし）",
        "\t{",
        "\t\tver  = \"v0.9.6\",",
        "\t\tdate = \"2025-09-17\",",
        "\t\tchanges = {",
        "\t\t\t{ ja = \"Fix-All P0 を完了（P0-1〜P0-12）。UI遷移・表記・入力安定性を全体的に改善。\",",
        "\t\t\t  en = \"Completed Fix-All P0 (P0-1 to P0-12). Broad improvements to navigation, text, and input stability.\" },",
        "\t\t\t{ ja = \"画面遷移を Nav.next(\\\"home\\\"|\\\"next\\\"|\\\"save\\\") に統一（内部は DecideNext）。\",",
        "\t\t\t  en = \"Unified navigation to Nav.next(\\\"home\\\"|\\\"next\\\"|\\\"save\\\") with a single DecideNext remote inside.\" },",
        "\t\t\t{ ja = \"同一画面の再表示でちらつかないよう Router を最適化。\",",
        "\t\t\t  en = \"Optimized Router to avoid flicker when re-showing the same screen.\" },",
        "\t\t\t{ ja = \"UI の表示切替を型安全化（ScreenGui.Enabled / GuiObject.Visible を自動判別）。\",",
        "\t\t\t  en = \"Hardened UI toggling (auto-select ScreenGui.Enabled vs GuiObject.Visible safely).\" },",
        "\t\t\t{ ja = \"Run：目標スコアは payload の数値 goal を参照（文字列パースを撤廃）。\",",
        "\t\t\t  en = \"Run: Goal now taken from numeric payload field 'goal' (removed string parsing).\" },",
        "\t\t\t{ ja = \"Shop：価格帯の二重クリックを解消（価格帯はラベル化・1クリック=1送信）。\",",
        "\t\t\t  en = \"Shop: Removed double-activation by making price band a label; one click = one send.\" },",
        "\t\t\t{ ja = \"トースト＆結果モーダルの文言を i18n 化（英語フォールバック対応）。\",",
        "\t\t\t  en = \"Localized Toast title & Final modal strings with English fallback.\" },",
        "\t\t\t{ ja = \"言語コードを外部 I/F で ja/en に統一（jp は警告の上 ja に正規化）。\",",
        "\t\t\t  en = \"Standardized external language codes to ja/en (normalize legacy 'jp' → 'ja' with warning).\" },",
        "\t\t}",
        "\t},",
        "\t{",
        "\t\tver  = \"v0.9.5\",",
        "\t\tdate = \"2025-09-14\",",
        "\t\tchanges = {",
        "\t\t\t{ ja = \"屋台UIの構造を整理し、操作の一貫性と安定性を向上。\", ",
        "\t\t\t  en = \"Streamlined Shop UI structure for more consistent and stable interactions.\" },",
        "\t\t\t{ ja = \"屋台の見た目を微調整（角丸・淡い枠・価格帯の視認性・ホバー強調）。\",",
        "\t\t\t  en = \"Visual polish in the Shop (rounded corners, subtle borders, clearer price bands, hover emphasis).\" },",
        "\t\t\t{ ja = \"言語テキストの取り回しを改善。将来的な多言語対応に備えた下地を追加。\",",
        "\t\t\t  en = \"Improved string handling in preparation for future multi-language support.\" },",
        "\t\t\t{ ja = \"画面切替の最適化により、屋台更新時のちらつきを軽減。\",",
        "\t\t\t  en = \"Optimized screen transitions to reduce flicker when the Shop updates.\" },",
        "\t\t\t{ ja = \"リロールは“1文でいつでも”に整理（暫定）。残回数の表示は当面省略。\",",
        "\t\t\t  en = \"Reroll clarified to 'anytime for 1 mon' (temporary). Remaining-count UI omitted for now.\" },",
        "\t\t\t{ ja = \"一部環境で発生していた屋台UIの読み込み不具合を修正。\",",
        "\t\t\t  en = \"Fixed a Shop UI loading issue observed in certain environments.\" },",
        "\t\t\t{ ja = \"購入/リロール後の通知を調整し、結果が分かりやすくなるよう改善。\",",
        "\t\t\t  en = \"Tuned notifications after purchases and rerolls for clearer feedback.\" },",
        "\t\t}",
        "\t},",
        "\t{",
        "\t\tver  = \"v0.9.4\",",
        "\t\tdate = \"2025-09-13\",",
        "\t\tchanges = {",
        "\t\t\t{ ja = \"ホームからパッチノートを開けるように改善。\", ",
        "\t\t\t  en = \"Patch Notes are now accessible from Home.\" },",
        "\t\t\t{ ja = \"短冊の定義を見直し、役判定が期待通りになるよう修正。\",",
        "\t\t\t  en = \"Reviewed ribbon definitions to ensure expected yaku detection.\" },",
        "\t\t\t{ ja = \"役：赤短・青短の判定を実装（各+5文）。\",",
        "\t\t\t  en = \"Implemented Akatan and Aotan yaku (+5 mon each).\" },",
        "\t\t\t{ ja = \"こいこい式の“超過文”を導入（カス/タネ/短冊の閾値超過で+1文）。\",",
        "\t\t\t  en = \"Introduced koi-koi style overflow mon (+1 per extra Kasu/Seed/Ribbon).\" },",
        "\t\t\t{ ja = \"干支：寅の効果を“基本点に+1/レベル”で確定。\",",
        "\t\t\t  en = \"Kito (Tiger) finalized as +1 to base points per level.\" },",
        "\t\t\t{ ja = \"内部のバランス調整作業を効率化（将来の調整速度を向上）。\",",
        "\t\t\t  en = \"Improved internal balancing workflow for faster future tuning.\" },",
        "\t\t}",
        "\t},",
        "\t{",
        "\t\tver  = \"v0.9.3\",",
        "\t\tdate = \"2025-09-12\",",
        "\t\tchanges = {",
        "\t\t\t{ ja = \"ホームのパッチノート導線を追加（前面モーダル）。\",",
        "\t\t\t  en = \"Added Patch Notes entry on Home (front modal).\" },",
        "\t\t\t{ ja = \"スコア算出の端ケースを見直し、想定値に合わせて調整。\",",
        "\t\t\t  en = \"Reviewed edge cases in scoring and aligned with expected values.\" },",
        "\t\t\t{ ja = \"言語切替の反映を改善し、画面間の一貫性を向上。\",",
        "\t\t\t  en = \"Improved language propagation for consistent UI across screens.\" },",
        "\t\t\t{ ja = \"オプション準備：クラシックこいこい互換の“文のみ”モード。\",",
        "\t\t\t  en = \"Preparation for an optional classic koi-koi 'mon-only' mode.\" },",
        "\t\t}",
        "\t},",
        "\t{",
        "\t\tver  = \"v0.9.2\",",
        "\t\tdate = \"2025-09-11\",",
        "\t\tchanges = {",
        "\t\t\t{ ja = \"スタート導線を整理（NEW/CONTINUEの統合）。\",",
        "\t\t\t  en = \"Unified start flow (NEW/CONTINUE integration).\" },",
        "\t\t\t{ ja = \"言語チップ（EN/JP）を追加。保存言語を優先、無ければOS言語で初期化。\",",
        "\t\t\t  en = \"Added EN/JP language chips. Prefer saved language; fallback to OS locale.\" },",
        "\t\t\t{ ja = \"屋台にレア枠を追加。全祭事に影響する強力な効果を実装。\",",
        "\t\t\t  en = \"Added a rare Shop category with a powerful effect impacting all festivals.\" },",
        "\t\t\t{ ja = \"効果処理の安定性を向上（将来拡張に備えた土台）。\",",
        "\t\t\t  en = \"Hardened effect handling to support future expansions.\" },",
        "\t\t}",
        "\t},",
        "\t{",
        "\t\tver  = \"v0.9.1\",",
        "\t\tdate = \"2025-09-10\",",
        "\t\tchanges = {",
        "\t\t\t{ ja = \"干支の効果を追加：丑（所持文2倍）／寅（取り札の得点+1, スタック可）／酉（1枚を光札化）。\",",
        "\t\t\t  en = \"Added Kito effects: Ushi (double current mon) / Tora (+1 taken pts, stackable) / Tori (convert one card to bright).\" },",
        "\t\t\t{ ja = \"屋台の品揃えに上記効果を追加。\",",
        "\t\t\t  en = \"These effects are now available in the Shop lineup.\" },",
        "\t\t}",
        "\t},",
        "\t{",
        "\t\tver  = \"v0.9.0\",",
        "\t\tdate = \"2025-09-06\",",
        "\t\tchanges = {",
        "\t\t\t{ ja = \"基礎採点を実装：役→文、札→点。総スコア＝文×点。\",",
        "\t\t\t  en = \"Implemented base scoring: yaku → mon, cards → pts. Total = mon × pts.\" },",
        "\t\t\t{ ja = \"祭事ボーナスと役→祭事の紐づけを追加。\",",
        "\t\t\t  en = \"Added festival bonuses and yaku-to-festival mapping.\" },",
        "\t\t\t{ ja = \"デッキ定義と内部ツールを整備（安定性と測定性の向上）。\",",
        "\t\t\t  en = \"Refined deck definitions and internal tooling for stability and measurability.\" },",
        "\t\t\t{ ja = \"屋台効果の処理を堅牢化。\",",
        "\t\t\t  en = \"Hardened Shop effect processing.\" },",
        "\t\t}",
        "\t},",
        "}",
        "",
        "-- lang 正規化（'jp' を受けたら 'ja' に正規化し警告）",
        "local function normLang(lang)",
        "\tlocal s = tostring(lang or \"\"):lower()",
        "\tif s == \"jp\" then",
        "\t\twarn(\"[PatchNotes] received legacy 'jp'; normalizing to 'ja'\")",
        "\t\treturn \"ja\"",
        "\tend",
        "\tif s == \"ja\" or s == \"en\" then return s end",
        "\treturn \"en\"",
        "end",
        "",
        "-- RichText本文を生成。言語に合わせて箇条書き記号を切替（JA: ・ / EN: –）",
        "local function build(lang)",
        "\tlang = normLang(lang)",
        "\tlocal bullet = (lang == \"ja\") and \"・\" or \"– \"",
        "\tlocal lines = {}",
        "",
        "\t-- ① 注意書きを先頭に",
        "\ttable.insert(lines, NOTICE[lang])",
        "\ttable.insert(lines, '<font transparency=\"0.6\">────────────</font>')",
        "\ttable.insert(lines, \"\") -- 空行",
        "",
        "\t-- ② 変更履歴（最新→古い）",
        "\tfor _, e in ipairs(ENTRIES) do",
        "\t\ttable.insert(lines, string.format(\"<b>%s</b>  <font transparency=\\\"0.25\\\">%s</font>\", e.ver, e.date))",
        "\t\tfor _, ch in ipairs(e.changes or {}) do",
        "\t\t\tlocal t = ch[lang] or ch.en or \"\"",
        "\t\t\ttable.insert(lines, bullet .. t)",
        "\t\tend",
        "\t\ttable.insert(lines, \"\") -- 空行",
        "\tend",
        "",
        "\treturn table.concat(lines, \"<br/>\")",
        "end",
        "",
        "-- PatchNotesModal が読むフィールド（互換インタフェース）",
        "M.title = { ja = \"パッチノート\", en = \"Patch Notes\" }",
        "M.body  = { ja = build(\"ja\"),   en = build(\"en\") }",
        "",
        "-- 生データ（管理・テスト用）",
        "M.entries = ENTRIES",
        "M.notice  = NOTICE",
        "",
        "return M"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 4,
          "ja_literals": 7
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/config/Theme.lua",
      "ext": "lua",
      "binary": false,
      "size": 5507,
      "mtime": "2025-10-05T10:21:06.364611+00:00",
      "head": [
        "-- ReplicatedStorage/Config/Theme.lua",
        "-- v0.9.7-P1-5: Theme を単一情報源に（UIフォールバック撤去用の既定値を追加）",
        "--              + SHOP_BG（屋台背景）を追加",
        "",
        "local Theme = {}",
        "",
        "--==================================================",
        "-- 画像ID（畳・毛氈・木目・屋台など）",
        "--==================================================",
        "Theme.IMAGES = {",
        "\tROOM_BG  = \"rbxassetid://134603580471930\",   -- 和室：背景（最背面）",
        "\tFIELD_BG = \"rbxassetid://112698123788404\",   -- 毛氈：場札エリア（現行の既定IDを尊重）",
        "\tTAKEN_BG = \"rbxassetid://93059114972102\",    -- 木目：取り札エリア",
        "",
        "\t-- ▼ 追加：ショップ（屋台）背景",
        "\tSHOP_BG  = \"rbxassetid://98985791814763\",",
        "}",
        "",
        "--==================================================",
        "-- 背景透過度（視認性調整用）",
        "--==================================================",
        "Theme.TRANSPARENCY = {",
        "\troomBg  = 0.15, -- 和室背景は少し淡く",
        "\tboardBg = 0.15, -- 毛氈はほんのり",
        "\ttakenBg = 0.15, -- 木目もほんのり",
        "",
        "\t-- ▼ 追加：ショップ背景のデフォルト透過",
        "\tshopBg  = 0.12,",
        "}",
        "-- Overlay等の半透明（UI側が使う場合あり）",
        "Theme.overlayBgT = 0.35",
        "",
        "-- 右ペインの透過（既存UIが T.rightPaneBgT を読むのでデフォルトを用意）",
        "Theme.rightPaneBgT = 0",
        "",
        "-- ヘルプ既定文（Localeが取れない/未ロード時の最終フォールバック）",
        "Theme.helpText = \"札を選んで場の札と合わせよう！Rerollで手札を入れ替え可能。\"",
        "",
        "--==================================================",
        "-- 横基準のプレイエリア縦横比",
        "--==================================================",
        "Theme.ASPECT = 16/9",
        "",
        "--==================================================",
        "-- 比率レイアウト用の定数",
        "--==================================================",
        "Theme.RATIOS = {",
        "\tPAD        = 0.02,",
        "\tCENTER_PAD = 0.02,",
        "",
        "\tLEFT_W     = 0.18,",
        "\tRIGHT_W    = 0.33, -- 広め右ペイン",
        "",
        "\tBOARD_H    = 0.50,",
        "\tTUTORIAL_H = 0.08,",
        "\tHAND_H     = 0.28,",
        "",
        "\tCONTROLS_H = 0.10,",
        "\tCOL_GAP    = 0.015,",
        "",
        "\t-- 取り札の横重なり比（0〜1）",
        "\tTAKEN_OVERLAP = 0.33,",
        "}",
        "",
        "--==================================================",
        "-- 絶対値サイズ",
        "--==================================================",
        "Theme.SIZES = {",
        "\tPAD        = 10,",
        "\tBOARD_H    = 340,",
        "\tCONTROLS_H = 44,",
        "\tHELP_H     = 22,",
        "\tHAND_H     = 168,",
        "\tRIGHT_W    = 495, -- 比率と揃う広めレイアウト",
        "\tROW_GAP    = 12,",
        "",
        "\t-- ▼ 追加：UIフォールバック排除用",
        "\tHandSelectStrokeW = 3,   -- 手札選択枠の太さ",
        "\tTAKEN_TAG_W       = 110, -- 取り札セクションのタグ幅",
        "}",
        "",
        "--==================================================",
        "-- 見た目（色・角丸）",
        "--==================================================",
        "Theme.COLORS = {",
        "\tTextDefault        = Color3.fromRGB(25, 25, 25),",
        "\tHelpText           = Color3.fromRGB(60, 40, 20),",
        "",
        "\t-- パネル系（和紙風に寄せたオフホワイト）",
        "\tRightPaneBg        = Color3.fromRGB(250, 248, 240),",
        "\tRightPaneStroke    = Color3.fromRGB(210, 200, 190),",
        "\tPanelBg            = Color3.fromRGB(252, 250, 244),",
        "\tPanelStroke        = Color3.fromRGB(220, 210, 200),",
        "",
        "\t-- カードバッジ帯",
        "\tBadgeBg            = Color3.fromRGB(25, 28, 36),",
        "\tBadgeStroke        = Color3.fromRGB(60, 65, 80),",
        "",
        "\t-- 手札エリアの装飾",
        "\tHandHolderBg       = Color3.fromRGB(245, 248, 252),",
        "\tHandHolderStroke   = Color3.fromRGB(210, 220, 230),",
        "",
        "\t-- ボタン",
        "\tPrimaryBtnBg       = Color3.fromRGB(190, 50, 50),",
        "\tPrimaryBtnText     = Color3.fromRGB(255, 245, 240),",
        "",
        "\tWarnBtnBg          = Color3.fromRGB(180, 80, 40),",
        "\tWarnBtnText        = Color3.fromRGB(255, 240, 230),",
        "",
        "\tCancelBtnBg        = Color3.fromRGB(120, 130, 140),",
        "\tCancelBtnText      = Color3.fromRGB(240, 240, 240),",
        "",
        "\tDevBtnBg           = Color3.fromRGB(40, 100, 60),",
        "\tDevBtnText         = Color3.fromRGB(255, 255, 255),",
        "",
        "\t-- UI側フォールバックを消すために追加（役一覧ボタン等）",
        "\tInfoBtnBg          = Color3.fromRGB(120, 180, 255),",
        "",
        "\t-- ▼ 追加：RunScreenUI/Taken/HandRenderer で参照されうる既定",
        "\tNoticeBg           = Color3.fromRGB(240, 246, 255), -- Noticeバー",
        "\tTutorialBg         = Color3.fromRGB(255, 153, 0),   -- Tutorialバー",
        "\tOverlayBg          = Color3.fromRGB(0, 0, 0),       -- Overlay下地",
        "",
        "\t-- 既存の“選択枠”系グリーン（これをハイライトにも統一利用）",
        "\tHandSelectStroke   = Color3.fromRGB(40, 120, 90),",
        "}",
        "",
        "Theme.PANEL_RADIUS = 10",
        "",
        "-- 影の濃さ（HandRenderer が参照）",
        "Theme.HandShadowOnT  = 0.45",
        "Theme.HandShadowOffT = 0.70",
        "",
        "--==================================================",
        "-- 役種に応じたバッジ文字色",
        "--==================================================",
        "function Theme.colorForKind(kind: string)",
        "\tif kind == \"bright\" then",
        "\t\treturn Color3.fromRGB(255, 230, 140)",
        "\telseif kind == \"seed\" then",
        "\t\treturn Color3.fromRGB(200, 240, 255)",
        "\telseif kind == \"ribbon\" then",
        "\t\treturn Color3.fromRGB(255, 200, 220)",
        "\telse",
        "\t\treturn Color3.fromRGB(235, 235, 235)",
        "\tend",
        "end",
        "",
        "--==================================================",
        "-- ハイライト色（統一グリーン）※COLORS.HandSelectStroke を流用",
        "--==================================================",
        "Theme.CARD_HL_SELF         = Theme.COLORS.HandSelectStroke",
        "Theme.CARD_HL_MATCH        = Theme.COLORS.HandSelectStroke",
        "Theme.CARD_HL_TRANSPARENCY = 0.70",
        "",
        "return Theme"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/server/GameInit.server.lua",
      "ext": "lua",
      "binary": false,
      "size": 17628,
      "mtime": "2025-10-03T18:44:49.585488+00:00",
      "head": [
        "-- ServerScriptService/GameInit.server.lua",
        "-- エントリポイント：Remotes生成／各Service初期化／永続（SaveService）連携",
        "-- v0.9.2 → v0.9.2-langfix2 (+P1-3 logger) → v0.9.3-effects-bootstrap",
        "--  - STARTGAME に統合（セーブがあればCONTINUE / なければNEW）",
        "--  - SaveService.activeRun（季節開始/屋台入場）スナップからの復帰に対応",
        "--  - HomeOpen.hasSave を正しく反映",
        "--  - 言語保存 ReqSetLang を実装",
        "--  - ★ 言語コードを外部公開 \"ja/en\" に統一（\"jp\" は受け取ったら \"ja\" に正規化）",
        "--  - ★ 冬クリア→HOME/保存→HOME 時は“春スナップ”を残さない（hasSave=false を返す）",
        "--  - ★ P1-1: DecideNext の実装を NavServer に一本化（本ファイルは初期化のみ）",
        "--  - ★ P1-3: Logger 導入（print/warn を LOG.* に置換）",
        "--  - ★ P2-10: ラン終了後は強制NEW（_forceNewOnNextStart フラグを尊重）",
        "--  - ★ v0.9.3: Deck/EffectsRegistry の一括登録を起動時に実行",
        "--              ＋ 酉UI用 Remotes（KitoPickStart/KitoPickDecide）を正式に生やす",
        "--  - ★ v0.9.3-fix: ShopDone 時に DeckRegistry の最新スナップショットを次シーズンへ明示伝播",
        "--                  （変更されたデッキを直後のシーズンで必ず使用）",
        "--  - ★ v0.9.3-reroll-hooks: 場/手リロールの初期化フックを追加（挙動は従来どおり）",
        "",
        "-- ServerScriptService/GameInit.server.lua",
        "-- （前略：ヘッダコメントは省略）",
        "",
        "local Players = game:GetService(\"Players\")",
        "local RS      = game:GetService(\"ReplicatedStorage\")",
        "local SSS     = game:GetService(\"ServerScriptService\")",
        "",
        "local Logger = require(RS:WaitForChild(\"SharedModules\"):WaitForChild(\"Logger\"))",
        "local LOG    = Logger.scope(\"GameInit\")",
        "Logger.configure({",
        "\tlevel = Logger.INFO,",
        "\ttimePrefix = true,",
        "\tdupWindowSec = 0.5,",
        "})",
        "",
        "LOG.info(\"boot\")",
        "",
        "local SaveService = require(SSS:WaitForChild(\"SaveService\"))",
        "",
        "local function ensureRemote(name: string)",
        "\tlocal rem = RS:FindFirstChild(\"Remotes\")",
        "\tif not rem then",
        "\t\trem = Instance.new(\"Folder\")",
        "\t\trem.Name = \"Remotes\"",
        "\t\trem.Parent = RS",
        "\tend",
        "\tlocal e = rem:FindFirstChild(name)",
        "\tif not e then",
        "\t\te = Instance.new(\"RemoteEvent\")",
        "\t\te.Name = name",
        "\t\te.Parent = rem",
        "\tend",
        "\treturn e",
        "end",
        "",
        "local Remotes = {",
        "\tHandPush      = ensureRemote(\"HandPush\"),",
        "\tFieldPush     = ensureRemote(\"FieldPush\"),",
        "\tTakenPush     = ensureRemote(\"TakenPush\"),",
        "\tScorePush     = ensureRemote(\"ScorePush\"),",
        "\tStatePush     = ensureRemote(\"StatePush\"),",
        "\tStageResult   = ensureRemote(\"StageResult\"),",
        "\tDecideNext    = ensureRemote(\"DecideNext\"),",
        "\tReqPick       = ensureRemote(\"ReqPick\"),",
        "\tConfirm       = ensureRemote(\"Confirm\"),",
        "\tReqRerollAll  = ensureRemote(\"ReqRerollAll\"),",
        "\tReqRerollHand = ensureRemote(\"ReqRerollHand\"),",
        "\tShopOpen      = ensureRemote(\"ShopOpen\"),",
        "\tShopDone      = ensureRemote(\"ShopDone\"),",
        "\tBuyItem       = ensureRemote(\"BuyItem\"),",
        "\tShopReroll    = ensureRemote(\"ShopReroll\"),",
        "\tReqSyncUI     = ensureRemote(\"ReqSyncUI\"),",
        "\tKitoPickStart  = ensureRemote(\"KitoPickStart\"),",
        "\tKitoPickDecide = ensureRemote(\"KitoPickDecide\"),",
        "}",
        "local HomeOpen        = ensureRemote(\"HomeOpen\")",
        "local ReqStartNewRun  = ensureRemote(\"ReqStartNewRun\")",
        "local ReqContinueRun  = ensureRemote(\"ReqContinueRun\")",
        "local ReqStartGame    = ensureRemote(\"ReqStartGame\")",
        "local RoundReady      = ensureRemote(\"RoundReady\")",
        "local ReqSetLang      = ensureRemote(\"ReqSetLang\")",
        "Remotes.HomeOpen        = HomeOpen",
        "Remotes.ReqStartNewRun  = ReqStartNewRun",
        "Remotes.ReqContinueRun  = ReqContinueRun",
        "Remotes.ReqStartGame    = ReqStartGame",
        "Remotes.RoundReady      = RoundReady",
        "Remotes.ReqSetLang      = ReqSetLang",
        "",
        "local StateHub = require(RS.SharedModules.StateHub)",
        "local Scoring  = require(RS.SharedModules.Scoring)",
        "local Round        = require(RS.SharedModules.RoundService)",
        "local PickService  = require(RS.SharedModules.PickService)",
        "local Reroll       = require(RS.SharedModules.RerollService)",
        "local Score        = require(RS.SharedModules.ScoreService)",
        "local ShopService  = require(RS.SharedModules.ShopService)",
        "local NavServer    = require(SSS:WaitForChild(\"NavServer\"))",
        "",
        "local KitoPickServer do",
        "\tlocal ok, mod = pcall(function() return require(SSS:WaitForChild(\"KitoPickServer\")) end)",
        "\tif ok and type(mod) == \"table\" then",
        "\t\tKitoPickServer = mod",
        "\telse",
        "\t\tKitoPickServer = nil",
        "\tend",
        "end",
        "",
        "local DeckRegistry do",
        "\tlocal ok, mod = pcall(function()",
        "\t\treturn require(RS:WaitForChild(\"SharedModules\"):WaitForChild(\"Deck\"):WaitForChild(\"DeckRegistry\"))",
        "\tend)",
        "\tDeckRegistry = ok and mod or nil",
        "end",
        "",
        "local Balance do",
        "\tlocal ok, mod = pcall(function()",
        "\t\treturn require(RS:WaitForChild(\"Config\"):WaitForChild(\"Balance\"))",
        "\tend)",
        "\tBalance = ok and mod or { STAGE_START_MONTH = 1, REROLL_FIELD_INIT = 5, REROLL_HAND_INIT = 3 }",
        "end",
        "",
        "local function bootstrapEffects()",
        "\tlocal ok, err = pcall(function()",
        "\t\trequire(RS:WaitForChild(\"SharedModules\"):WaitForChild(\"Deck\"):WaitForChild(\"EffectsRegisterAll\"))",
        "\tend)",
        "\tif ok then",
        "\t\tLOG.info(\"[Effects] EffectsRegistry initialized (Deck/EffectsRegisterAll)\")",
        "\telse",
        "\t\tLOG.warn(\"[Effects] initialization failed: %s\", tostring(err))",
        "\tend",
        "end",
        "",
        "local DevGrantRyo  = ensureRemote(\"DevGrantRyo\")",
        "local DevGrantRole = ensureRemote(\"DevGrantRole\")",
        "",
        "DevGrantRyo.OnServerEvent:Connect(function(plr, amount)",
        "\tamount = tonumber(amount) or 1000",
        "\tlocal s = StateHub.get(plr); if not s then return end",
        "\ts.bank = (s.bank or 0) + amount",
        "\tStateHub.pushState(plr)",
        "\tSaveService.addBank(plr, amount)",
        "\tLOG.debug(\"DevGrantRyo | user=%s amount=%d bank=%d\", plr.Name, amount, s.bank or -1)",
        "end)",
        "",
        "local function ensureTable(t) return (type(t)==\"table\") and t or {} end",
        "local function takeByPredOrStub(s, pred, stub)",
        "\ts.board = ensureTable(s.board); s.taken = ensureTable(s.taken)",
        "\tfor i,card in ipairs(s.board) do",
        "\t\tif pred(card) then",
        "\t\t\ttable.insert(s.taken, card); table.remove(s.board, i); return",
        "\t\tend",
        "\tend",
        "\tlocal c = table.clone(stub)",
        "\tc.id = c.id or (\"dev_\"..(c.name or (\"m\"..(c.month or 0))))",
        "\tc.tags = c.tags or {}",
        "\ttable.insert(s.taken, c)",
        "end",
        "",
        "DevGrantRole.OnServerEvent:Connect(function(plr)",
        "\tlocal s = StateHub.get(plr); if not s then return end",
        "\ttakeByPredOrStub(s,",
        "\t\tfunction(c) return c.month==9 and ((c.tags and table.find(c.tags,\"sake\")) or c.name==\"盃\") end,",
        "\t\t{month=9, kind=\"seed\", name=\"盃\", tags={\"thing\",\"sake\"}}",
        "\t)",
        "\ttakeByPredOrStub(s, function(c) return c.month==8 and c.kind==\"bright\" end, {month=8, kind=\"bright\", name=\"芒に月\"})",
        "\ttakeByPredOrStub(s, function(c) return c.month==3 and c.kind==\"bright\" end, {month=3, kind=\"bright\", name=\"桜に幕\"})",
        "",
        "\tlocal total, roles, detail = Scoring.evaluate(s.taken or {}, s)",
        "\ts.lastScore = { total = total or 0, roles = roles, detail = detail }",
        "\tStateHub.pushState(plr)",
        "\tLOG.debug(\"DevGrantRole | user=%s total=%s\", plr.Name, tostring(total))",
        "end)",
        "",
        "local function normLang(v:string?): string?",
        "\tv = tostring(v or \"\"):lower()",
        "\tif v == \"ja\" or v == \"jp\" then return \"ja\" end",
        "\tif v == \"en\" then return \"en\" end",
        "\treturn nil",
        "end",
        "",
        "bootstrapEffects()",
        "StateHub.init(Remotes)",
        "",
        "if PickService and typeof(PickService.bind) == \"function\" then",
        "\tPickService.bind(Remotes)",
        "else",
        "\tLOG.warn(\"PickService.bind が見つかりません\")",
        "end",
        "if Reroll and typeof(Reroll.bind) == \"function\" then",
        "\tReroll.bind(Remotes)",
        "else",
        "\tLOG.warn(\"Reroll.bind が見つかりません\")",
        "end",
        "if Score and typeof(Score.bind) == \"function\" then",
        "\tScore.bind(Remotes, { openShop = ShopService and ShopService.open })",
        "else",
        "\tLOG.warn(\"Score.bind が見つかりません\")",
        "end",
        "if ShopService and typeof(ShopService.init) == \"function\" then",
        "\tShopService.init(",
        "\t\tfunction(plr) return StateHub.get(plr) end,",
        "\t\tfunction(plr) StateHub.pushState(plr) end",
        "\t)",
        "else",
        "\tLOG.warn(\"ShopService.init が見つかりません\")",
        "end",
        "if KitoPickServer and typeof(KitoPickServer.bind) == \"function\" then",
        "\tKitoPickServer.bind(Remotes)",
        "\tLOG.info(\"[KitoPickServer] ready (handlers wiring)\")",
        "end",
        "",
        "NavServer.init({",
        "\tStateHub    = StateHub,",
        "\tRound       = Round,",
        "\tShopService = ShopService,",
        "\tSaveService = SaveService,",
        "\tHomeOpen    = HomeOpen,",
        "\tDecideNext  = Remotes.DecideNext,",
        "})",
        "",
        "-- ────────────────────────────────────────────────────────────",
        "-- ★ ここから：リロール（場/手）— フック（今は挙動を変えない）",
        "-- ────────────────────────────────────────────────────────────",
        "",
        "-- 旧データ移行：単一カウンタや hand-only を新構造へ寄せる",
        "local function initOrMigrateReroll(s:any)",
        "\ts.run = s.run or {}",
        "\tif type(s.run.reroll) == \"number\" then",
        "\t\ts.run.reroll = {",
        "\t\t\tfield = tonumber(s.run.reroll) or Balance.REROLL_FIELD_INIT,",
        "\t\t\thand  = Balance.REROLL_HAND_INIT,",
        "\t\t}",
        "\tend",
        "\tif type(s.run.hand) == \"number\" then",
        "\t\tlocal prevHand = tonumber(s.run.hand) or Balance.REROLL_HAND_INIT",
        "\t\ts.run.reroll = {",
        "\t\t\tfield = Balance.REROLL_FIELD_INIT,",
        "\t\t\thand  = prevHand,",
        "\t\t}",
        "\t\ts.run.hand = nil",
        "\tend",
        "\tif type(s.run.reroll) ~= \"table\"",
        "\t\tor type(s.run.reroll.field) ~= \"number\"",
        "\t\tor type(s.run.reroll.hand)  ~= \"number\" then",
        "\t\ts.run.reroll = {",
        "\t\t\tfield = Balance.REROLL_FIELD_INIT,",
        "\t\t\thand  = Balance.REROLL_HAND_INIT,",
        "\t\t}",
        "\tend",
        "end",
        "",
        "-- 将来実装用：装備/実績のボーナス合算フック（現状は常に 0,0 を返す）",
        "local function __sumRerollBonusesStub(s:any, Balance:any)",
        "\t-- 例：s.equip.omamori / s.unlocks.achievements を見て",
        "\t--     Balance.OMAMORI_REROLL_BONUS / ACHIEVE_REROLL_BONUS を加算、など",
        "\treturn 0, 0",
        "end",
        "",
        "-- ラウンド開始時の初期回数をセット（現状は base=5/3 のまま）",
        "local function initRerollForNewRound(plr: Player, s:any)",
        "\tinitOrMigrateReroll(s)",
        "",
        "\tlocal baseField = Balance.REROLL_FIELD_INIT or 5",
        "\tlocal baseHand  = Balance.REROLL_HAND_INIT  or 3",
        "",
        "\tlocal addField, addHand = __sumRerollBonusesStub(s, Balance) -- いまは 0,0",
        "\tlocal maxField = Balance.REROLL_FIELD_MAX or math.huge",
        "\tlocal maxHand  = Balance.REROLL_HAND_MAX  or math.huge",
        "",
        "\ts.run.reroll.field = math.min(maxField, baseField + addField)",
        "\ts.run.reroll.hand  = math.min(maxHand,  baseHand  + addHand)",
        "",
        "\tStateHub.set(plr, s)",
        "end",
        "",
        "-- ────────────────────────────────────────────────────────────",
        "",
        "Players.PlayerAdded:Connect(function(plr)",
        "\tLOG.info(\"PlayerAdded | begin load profile | user=%s userId=%d\", plr.Name, plr.UserId)",
        "",
        "\tlocal prof = SaveService.load(plr)",
        "\tLOG.debug(\"Profile loaded | user=%s bank=%s year=%s asc=%s clears=%s lang=%s\",",
        "\t\tplr.Name,",
        "\t\ttostring(prof and prof.bank), tostring(prof and prof.year),",
        "\t\ttostring(prof and prof.asc),  tostring(prof and prof.clears),",
        "\t\ttostring(prof and prof.lang)",
        "\t)",
        "",
        "\tlocal s = StateHub.get(plr) or {}",
        "\tlocal savedLang = normLang(SaveService.getLang(plr)) or \"en\"",
        "\ts.bank        = prof.bank   or 0",
        "\ts.year        = prof.year   or 0",
        "\ts.totalClears = prof.clears or 0",
        "\ts.lang        = savedLang",
        "\ts._forceNewOnNextStart = false",
        "\tStateHub.set(plr, s)",
        "",
        "\tLOG.debug(\"State set | user=%s lang=%s bank=%d year=%d clears=%d\",",
        "\t\tplr.Name, s.lang, s.bank or 0, s.year or 0, s.totalClears or 0",
        "\t)",
        "",
        "\tlocal hasSave = SaveService.getActiveRun(plr) ~= nil",
        "\tLOG.info(\"HomeOpen → C | user=%s lang=%s hasSave=%s bank=%d year=%d clears=%d\","
      ],
      "truncated": true,
      "analysis": {
        "waitForChild": [
          "SharedModules",
          "Logger",
          "SaveService",
          "NavServer",
          "KitoPickServer",
          "SharedModules",
          "Deck",
          "DeckRegistry",
          "Config",
          "Balance",
          "SharedModules",
          "Deck",
          "EffectsRegisterAll"
        ],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 2,
          "ja_literals": 3
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/server/KitoPickCore.lua",
      "ext": "lua",
      "binary": false,
      "size": 11433,
      "mtime": "2025-09-29T12:38:20.237215+00:00",
      "head": [
        "-- ServerScriptService/KitoPickCore.lua",
        "-- v0.9.7 KITO Pick Core (anyK + canApply eligibility, UID-first, EN-only)",
        "-- Purpose:",
        "--   - Build and send a K-card candidate pool for the picker UI (always K if available; K = KITO_UI_PICK_COUNT or KITO_POOL_SIZE)",
        "--   - Attach server-authoritative eligibility (can/cannot apply + reason) per card",
        "--   - Keep/expire a simple session",
        "-- Policy:",
        "--   - UID-first (entries[*].uid is the single source of truth; legacy decks may use code as fallback)",
        "--   - NO pre-filtering by month/kind here: pool is random (anyK). Eligibility decides gray-out.",
        "--   - POOL_MODE fallback: Balance.KITO_POOL_MODE = \"eligible12\" for legacy behavior (optional)",
        "--   - Server is the only source of truth; client displays what server says",
        "",
        "local RS = game:GetService(\"ReplicatedStorage\")",
        "",
        "-- Config / Logger",
        "local Balance    = require(RS:WaitForChild(\"Config\"):WaitForChild(\"Balance\"))",
        "local Logger     = require(RS:WaitForChild(\"SharedModules\"):WaitForChild(\"Logger\"))",
        "local LOG        = Logger.scope(\"KitoPickCore\")",
        "",
        "-- Shared deps",
        "local Shared        = RS:WaitForChild(\"SharedModules\")",
        "local CardEngine    = require(Shared:WaitForChild(\"CardEngine\"))",
        "local DeckReg       = require(Shared:WaitForChild(\"Deck\"):WaitForChild(\"DeckRegistry\"))",
        "local DeckSampler   = require(Shared:WaitForChild(\"DeckSampler\"))",
        "local Effects       = require(Shared:WaitForChild(\"Deck\"):WaitForChild(\"EffectsRegistry\"))",
        "",
        "-- 🔧 Optional bootstrap: auto-scan Deck/Effects and register handlers/canApply if available",
        "local function tryRequire(inst: Instance?)",
        "\tif not inst or not inst:IsA(\"ModuleScript\") then return end",
        "\tlocal ok, err = pcall(require, inst)",
        "\tif not ok then",
        "\t\tLOG.warn(\"[EffectsBootstrap] require failed: %s\", tostring(err))",
        "\tend",
        "end",
        "do",
        "\tlocal deckFolder = Shared:FindFirstChild(\"Deck\")",
        "\tif deckFolder then",
        "\t\ttryRequire(deckFolder:FindFirstChild(\"EffectsRegisterAll\"))",
        "\tend",
        "end",
        "",
        "-- Remotes",
        "local Remotes  = RS:WaitForChild(\"Remotes\")",
        "local EvStart  = Remotes:WaitForChild(\"KitoPickStart\") -- RemoteEvent",
        "",
        "-- Card image resolver (optional)",
        "local CardImageMap do",
        "\tlocal ok, mod = pcall(function()",
        "\t\treturn require(Shared:WaitForChild(\"CardImageMap\"))",
        "\tend)",
        "\tif ok and type(mod) == \"table\" then",
        "\t\tCardImageMap = mod",
        "\telse",
        "\t\tCardImageMap = { get = function(_) return nil end }",
        "\t\tLOG.debug(\"CardImageMap not found; images will be omitted\")",
        "\tend",
        "end",
        "",
        "local Core = {}",
        "",
        "--─────────────────────────────────────────────────────────────",
        "-- Session store (simple)",
        "--─────────────────────────────────────────────────────────────",
        "local sessions: {[number]: any} = {}",
        "",
        "local function headList(list, n)",
        "\tlocal out = {}",
        "\tif type(list) == \"table\" then",
        "\t\tfor i = 1, math.min(#list, n) do out[#out+1] = tostring(list[i]) end",
        "\tend",
        "\treturn table.concat(out, \",\")",
        "end",
        "",
        "local function now() return os.time() end",
        "local function ttlSec()",
        "\treturn tonumber(Balance.KITO_POOL_TTL_SEC or 45) or 45",
        "end",
        "",
        "local function put(userId: number, sess: any)",
        "\tsessions[userId] = sess",
        "end",
        "",
        "function Core.peek(userId: number)",
        "\tlocal s = sessions[userId]",
        "\tLOG.debug(\"[Peek] userId=%s has=%s sid=%s\", tostring(userId), tostring(s~=nil), s and tostring(s.id) or \"-\")",
        "\treturn s",
        "end",
        "",
        "function Core.consume(userId: number)",
        "\tlocal s = sessions[userId]",
        "\tif s then",
        "\t\tLOG.debug(\"[Consume] userId=%s take sid=%s\", tostring(userId), tostring(s.id))",
        "\telse",
        "\t\tLOG.debug(\"[Consume] userId=%s no-session\", tostring(userId))",
        "\tend",
        "\tsessions[userId] = nil",
        "\treturn s",
        "end",
        "",
        "--─────────────────────────────────────────────────────────────",
        "-- Helpers",
        "--─────────────────────────────────────────────────────────────",
        "local function resolveRunId(runCtx:any)",
        "\tif type(runCtx) ~= \"table\" then return nil end",
        "\t-- direct",
        "\tlocal direct = runCtx.runId or runCtx.deckRunId or runCtx.id or runCtx.deckRunID or runCtx.runID",
        "\tif direct then return direct end",
        "\t-- nested",
        "\tlocal run = runCtx.run",
        "\tif type(run) == \"table\" then",
        "\t\treturn run.runId or run.deckRunId or run.id or run.deckRunID or run.runID",
        "\tend",
        "\treturn nil",
        "end",
        "",
        "local function resolveImage(code:string?)",
        "\tlocal ok, got = pcall(function()",
        "\t\tif type(CardImageMap.get) == \"function\" then return CardImageMap.get(code) end",
        "\tend)",
        "\tif ok and got ~= nil then return got end",
        "\treturn nil",
        "end",
        "",
        "local function parseMonth(entry:any): number?",
        "\tif type(entry) ~= \"table\" then return nil end",
        "\tlocal m = tonumber(entry.month)",
        "\tif m and m>=1 and m<=12 then return m end",
        "\tlocal s = tostring(entry.code or entry.uid or \"\")",
        "\tlocal two = string.match(s, \"^(%d%d)\")",
        "\treturn (two and tonumber(two)) or nil",
        "end",
        "",
        "local function toSummary(entry:any)",
        "\tif type(entry) ~= \"table\" then return nil end",
        "\tlocal sum = {",
        "\t\tuid   = entry.uid or entry.code,   -- UID is the truth; fallback to code for very old entries",
        "\t\tcode  = entry.code,",
        "\t\tname  = entry.name or entry.code,",
        "\t\tkind  = entry.kind,",
        "\t\tmonth = parseMonth(entry),",
        "\t}",
        "\tlocal img = resolveImage(entry.code)",
        "\tif type(img) == \"string\" then",
        "\t\tsum.image = img",
        "\telseif type(img) == \"number\" or tonumber(img) then",
        "\t\tsum.imageId = tonumber(img)",
        "\tend",
        "\treturn sum",
        "end",
        "",
        "local function buildUidMap(entries:{any}): {[string]: any}",
        "\tlocal m = {}",
        "\tfor _, e in ipairs(entries) do",
        "\t\tlocal uid = e and e.uid",
        "\t\tif typeof(uid) == \"string\" and #uid > 0 then",
        "\t\t\tm[uid] = e",
        "\t\telseif e and e.code then",
        "\t\t\t-- legacy fallback",
        "\t\t\tm[tostring(e.code)] = e",
        "\t\tend",
        "\tend",
        "\treturn m",
        "end",
        "",
        "-- eligibility per UID using Effects.canApply",
        "local function computeEligibility(effectId: string, uidMap:{[string]:any}, uids:{string}): ({[string]:{ok:boolean, reason:string?}}, number)",
        "\tlocal ctx = { DeckStore = true, DeckOps = true, CardEngine = CardEngine } -- minimal stub; Effects.canApply側で不足補完あり",
        "\tlocal elig = {}",
        "\tlocal okCount = 0",
        "\tfor _, uid in ipairs(uids) do",
        "\t\tlocal card = uidMap[uid]",
        "\t\tlocal ok, reason = Effects.canApply(effectId, card, ctx)",
        "\t\telig[uid] = { ok = ok == true, reason = reason }",
        "\t\tif ok == true then okCount += 1 end",
        "\tend",
        "\treturn elig, okCount",
        "end",
        "",
        "-- pick anyK using DeckSampler with a synthetic state",
        "local function sampleAnyFromStore(runId:any, store:any, K:number): {string}",
        "\tlocal state = { runId = runId, deck = store and store.entries or {} }",
        "\t-- DeckSampler internally ensures UIDs via RunDeckUtil.ensureUids(state)",
        "\treturn DeckSampler.sampleUids(state, K)",
        "end",
        "",
        "-- legacy mode: pick only eligible candidates up to N",
        "local function sampleEligible(effectId:string, entries:{any}, N:number): {string}",
        "\tlocal uids = {}",
        "\tfor _, e in ipairs(entries) do",
        "\t\tlocal card = e",
        "\t\tlocal ok = select(1, Effects.canApply(effectId, card, { CardEngine = CardEngine }))",
        "\t\tif ok == true then",
        "\t\t\tuids[#uids+1] = e.uid or e.code",
        "\t\tend",
        "\tend",
        "\t-- shuffle uids and take first N",
        "\tlocal seed = math.floor((os.clock() % 1) * 1e9)",
        "\tlocal rng  = Random.new(seed)",
        "\tfor i = #uids, 2, -1 do",
        "\t\tlocal j = rng:NextInteger(1, i)",
        "\t\tuids[i], uids[j] = uids[j], uids[i]",
        "\tend",
        "\tlocal out = {}",
        "\tfor i=1, math.min(N, #uids) do out[i] = uids[i] end",
        "\treturn out",
        "end",
        "",
        "--─────────────────────────────────────────────────────────────",
        "-- Public: build & send K-card pool (generic effectId)",
        "--─────────────────────────────────────────────────────────────",
        "-- effectId: e.g. \"kito.tori_brighten\", \"kito.mi_venom\" ...",
        "-- targetKind param is ignored (kept for compatibility)",
        "function Core.startFor(player: Player, runCtx:any, effectId: string, targetKind: string?)",
        "\tif Balance.KITO_UI_ENABLED ~= true then",
        "\t\tLOG.debug(\"[StartFor] UI disabled; ignored | user=%s\", player and player.Name or \"?\")",
        "\t\treturn false",
        "\tend",
        "\tif type(effectId) ~= \"string\" or #effectId == 0 or not Effects.has(effectId) then",
        "\t\tLOG.debug(\"[StartFor] unsupported effect=%s | user=%s\", tostring(effectId), player and player.Name or \"?\")",
        "\t\treturn false",
        "\tend",
        "",
        "\t-- Resolve runId and ensure deck entries",
        "\tlocal runId = resolveRunId(runCtx)",
        "\tif not runId then",
        "\t\tlocal hasRun = (type(runCtx)==\"table\" and type(runCtx.run)==\"table\")",
        "\t\tLOG.info(\"[StartFor] missing runId; aborted | user=%s hasRun=%s\", player and player.Name or \"?\", tostring(hasRun))",
        "\t\treturn false",
        "\tend",
        "\tDeckReg.ensureFromContext(runCtx)",
        "\tlocal store = DeckReg.read(runId)",
        "\tif typeof(store) ~= \"table\" or typeof(store.entries) ~= \"table\" or #store.entries == 0 then",
        "\t\tLOG.info(\"[StartFor] no deck entries; aborted | user=%s run=%s\", player and player.Name or \"?\", tostring(runId))",
        "\t\treturn false",
        "\tend",
        "",
        "\t-- K は UI_PICK_COUNT 優先（未設定なら POOL_SIZE）",
        "\tlocal pickN = tonumber(Balance.KITO_UI_PICK_COUNT or Balance.KITO_POOL_SIZE or 12) or 12",
        "\tlocal mode  = tostring(Balance.KITO_POOL_MODE or \"any12_disable_ineligible\") -- \"any12_disable_ineligible\" | \"eligible12\"",
        "",
        "\t-- Build pool (UID list)",
        "\tlocal uids",
        "\tif mode == \"eligible12\" then",
        "\t\tuids = sampleEligible(effectId, store.entries, pickN)",
        "\telse",
        "\t\t-- ✅ anyK: UI_PICK_COUNT を確実に反映",
        "\t\tuids = sampleAnyFromStore(runId, store, pickN)",
        "\tend",
        "\tif #uids == 0 then",
        "\t\tLOG.info(\"[StartFor] empty pool; aborted | user=%s run=%s\", player and player.Name or \"?\", tostring(runId))",
        "\t\treturn false",
        "\tend",
        "",
        "\t-- To summaries for UI (code/kind/month/image)",
        "\tlocal uidMap = buildUidMap(store.entries)",
        "\tlocal list = {}",
        "\tfor _, uid in ipairs(uids) do",
        "\t\tlocal e = uidMap[uid]",
        "\t\tlocal s = e and toSummary(e)",
        "\t\tif s then list[#list+1] = s end",
        "\tend",
        "\tif #list == 0 then",
        "\t\tLOG.info(\"[StartFor] no summaries; aborted | user=%s run=%s\", player and player.Name or \"?\", tostring(runId))",
        "\t\treturn false",
        "\tend",
        "",
        "\t-- Eligibility per UID（server-authoritative）",
        "\tlocal eligibility, okCount = computeEligibility(effectId, uidMap, uids)",
        "",
        "\t-- Session",
        "\tlocal sess = {",
        "\t\tid        = string.format(\"kito-%d-%d\", player.UserId, now()),",
        "\t\tversion   = \"v3\",",
        "\t\tcreatedAt = now(),",
        "\t\texpiresAt = now() + ttlSec(),",
        "\t\trunId     = runId,",
        "\t\teffectId  = effectId,",
        "\t\tuids      = uids,",
        "\t}",
        "\tput(player.UserId, sess)",
        "",
        "\t-- Client payload（list + poolUids + eligibility）",
        "\t-- list: [{uid,code,name,kind,month,image?/imageId?}]",
        "\t-- eligibility: { [uid] = { ok:boolean, reason?:string } }",
        "\tlocal payload = {",
        "\t\tsessionId   = sess.id,",
        "\t\tversion     = sess.version,",
        "\t\texpiresAt   = sess.expiresAt,",
        "\t\teffectId    = effectId,",
        "\t\tlist        = list,",
        "\t\tpoolUids    = uids,",
        "\t\teligibility = eligibility,",
        "\t\teffect      = \"Select one target\", -- simple EN label; UI側でi18n可",
        "\t}",
        "\tEvStart:FireClient(player, payload)",
        "",
        "\t-- Log summary",
        "\tlocal gray = #uids - okCount",
        "\tLOG.info(\"[StartFor] user=%s sid=%s size=%d ok=%d gray=%d head5=[%s] mode=%s\",",
        "\t\tplayer and player.Name or \"?\","
      ],
      "truncated": true,
      "analysis": {
        "waitForChild": [
          "Config",
          "Balance",
          "SharedModules",
          "Logger",
          "SharedModules",
          "CardEngine",
          "Deck",
          "DeckRegistry",
          "DeckSampler",
          "Deck",
          "EffectsRegistry",
          "Remotes",
          "KitoPickStart",
          "CardImageMap"
        ],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/server/KitoPickServer.server.lua",
      "ext": "lua",
      "binary": false,
      "size": 13612,
      "mtime": "2025-10-01T02:39:55.314182+00:00",
      "head": [
        "-- ServerScriptService/KitoPickServer.lua",
        "-- v0.9.16 KITO Pick Server",
        "--  - server canApply + safe monDelta→mon + robust reopen + notice(+N文) + msg/bankDelta normalize",
        "--  - ★ADD: UI経由の適用成功時に Kito.recordFromPick(...) を呼んで kito_last を記録（子 ko 再発火用）",
        "",
        "local RS  = game:GetService(\"ReplicatedStorage\")",
        "local SSS = game:GetService(\"ServerScriptService\")",
        "",
        "-- Logger / Config",
        "local Logger  = require(RS:WaitForChild(\"SharedModules\"):WaitForChild(\"Logger\"))",
        "local LOG     = Logger.scope(\"KitoPickServer\")",
        "local Balance = require(RS:WaitForChild(\"Config\"):WaitForChild(\"Balance\"))",
        "",
        "-- Core / Registry / State",
        "local Shared       = RS:WaitForChild(\"SharedModules\")",
        "local KitoCore     = require(SSS:WaitForChild(\"KitoPickCore\"))",
        "local DeckRegistry = require(Shared:WaitForChild(\"Deck\"):WaitForChild(\"DeckRegistry\"))",
        "local StateHub     = require(Shared:WaitForChild(\"StateHub\"))",
        "local CardEngine   = require(Shared:WaitForChild(\"CardEngine\"))",
        "",
        "-- Remotes",
        "local Remotes  = RS:WaitForChild(\"Remotes\")",
        "local EvDecide = Remotes:WaitForChild(\"KitoPickDecide\")",
        "local EvCancel = Remotes:FindFirstChild(\"KitoPickCancel\")",
        "local EvResult = Remotes:FindFirstChild(\"KitoPickResult\") -- 任意/トースト用",
        "",
        "-- ─ Utility: safe require",
        "local function tryRequire(inst: Instance?)",
        "\tif not inst or not inst:IsA(\"ModuleScript\") then return nil end",
        "\tlocal ok, modOrErr = pcall(function() return require(inst) end)",
        "\tif ok then return modOrErr end",
        "\tLOG.warn(\"[KitoPickServer] require failed for %s: %s\", inst:GetFullName(), tostring(modOrErr))",
        "\treturn nil",
        "end",
        "",
        "-- EffectsRegistry",
        "local EffectsRegistry =",
        "\ttryRequire(Shared:FindFirstChild(\"Deck\") and Shared.Deck:FindFirstChild(\"EffectsRegistry\"))",
        "\tor tryRequire(Shared:FindFirstChild(\"EffectsRegistry\"))",
        "\tor tryRequire(SSS:FindFirstChild(\"EffectsRegistry\"))",
        "",
        "local EffectsBootstrap = tryRequire(Shared:FindFirstChild(\"Deck\") and Shared.Deck:FindFirstChild(\"EffectsRegisterAll\"))",
        "",
        "if EffectsRegistry then",
        "\tLOG.info(\"[KitoPickServer] EffectsRegistry wired\")",
        "else",
        "\tLOG.warn(\"[KitoPickServer] EffectsRegistry not found; KITO effects unavailable\")",
        "end",
        "",
        "-- ★ Kito（kito_last 記録フック用）",
        "local Kito = tryRequire(SSS:FindFirstChild(\"ShopEffects\") and SSS.ShopEffects:FindFirstChild(\"Kito\"))",
        "\t\tor tryRequire(SSS:FindFirstChild(\"Kito\"))",
        "",
        "-- ShopService 解決（複数シグネチャに対応）",
        "local function resolveShopService()",
        "\tlocal inst =",
        "\t\tSSS:FindFirstChild(\"ShopService\")",
        "\t\tor (Shared:FindFirstChild(\"Shop\") and Shared.Shop:FindFirstChild(\"ShopService\"))",
        "\t\tor Shared:FindFirstChild(\"ShopService\")",
        "\t\tor RS:FindFirstChild(\"ShopService\")",
        "\t\tor (RS:FindFirstChild(\"SharedModules\") and RS.SharedModules:FindFirstChild(\"ShopService\"))",
        "",
        "\tlocal mod = tryRequire(inst)",
        "\tif mod then",
        "\t\tLOG.info(\"[KitoPickServer] ShopService wired from %s\", inst:GetFullName())",
        "\telse",
        "\t\tLOG.warn(\"[KitoPickServer] ShopService not found; reopen will be skipped\")",
        "\tend",
        "\treturn mod",
        "end",
        "local ShopService = resolveShopService()",
        "",
        "-- runId 解決",
        "local function resolveRunId(ctx:any)",
        "\tif type(ctx) ~= \"table\" then return nil end",
        "\treturn ctx.runId or ctx.deckRunId or ctx.id or ctx.runID or ctx.deckRunID",
        "\t\tor (type(ctx.run)==\"table\" and (ctx.run.runId or ctx.run.deckRunId or ctx.run.id or ctx.run.runID or ctx.run.deckRunID))",
        "end",
        "",
        "-- ショップ再オープン（在庫維持）",
        "local function reopenShopSnapshot(plr: Player, opts:any?)",
        "\tif not ShopService then",
        "\t\tLOG.warn(\"[ReopenShop] ShopService missing; skip\")",
        "\t\treturn false, \"no-shopservice\"",
        "\tend",
        "\tlocal state    = StateHub.get(plr) or {}",
        "\tlocal notice   = opts and opts.notice or \"変換が完了しました\"",
        "\tlocal preserve = (opts and opts.preserve) ~= false",
        "\tlocal tried = {}",
        "\tlocal function tryCall(desc, f)",
        "\t\tlocal t0 = os.clock()",
        "\t\tlocal ok, err = pcall(f)",
        "\t\ttable.insert(tried, { desc = desc, ok = ok, err = ok and \"\" or tostring(err), ms = (os.clock()-t0)*1000 })",
        "\t\treturn ok, err",
        "\tend",
        "\tif type(ShopService.openFor) == \"function\" then",
        "\t\tif select(1, tryCall(\"openFor(plr,state,opts)\", function()",
        "\t\t\treturn ShopService.openFor(plr, state, { notice = notice, preserve = preserve, reason = \"kito_pick_done\" })",
        "\t\tend)) then LOG.info(\"[ReopenShop] via openFor(plr,state,opts) in %.2fms\", tried[#tried].ms); return true end",
        "\t\tif select(1, tryCall(\"openFor(plr,{state,...})\", function()",
        "\t\t\treturn ShopService.openFor(plr, { state = state, notice = notice, preserve = preserve, reason = \"kito_pick_done\" })",
        "\t\tend)) then LOG.info(\"[ReopenShop] via openFor(plr,{state,...}) in %.2fms\", tried[#tried].ms); return true end",
        "\tend",
        "\tif type(ShopService.open) == \"function\" then",
        "\t\tif select(1, tryCall(\"open(plr,state,opts)\", function()",
        "\t\t\treturn ShopService.open(plr, state, { notice = notice, preserve = preserve, reason = \"kito_pick_done\" })",
        "\t\tend)) then LOG.info(\"[ReopenShop] via open(plr,state,opts) in %.2fms\", tried[#tried].ms); return true end",
        "\t\tif select(1, tryCall(\"open(plr,{state,...})\", function()",
        "\t\t\treturn ShopService.open(plr, { state = state, notice = notice, preserve = preserve, reason = \"kito_pick_done\" })",
        "\t\tend)) then LOG.info(\"[ReopenShop] via open(plr,{state,...}) in %.2fms\", tried[#tried].ms); return true end",
        "\tend",
        "\tfor _, t in ipairs(tried) do if not t.ok then LOG.warn(\"[ReopenShop] tried %s → failed: %s (%.2fms)\", t.desc, t.err, t.ms) end end",
        "\treturn false, \"no-matching-signature\"",
        "end",
        "",
        "--─────────────────────────────────────────────────────────────",
        "-- ★ monDelta を安全に適用（所持文）",
        "--─────────────────────────────────────────────────────────────",
        "local function applyMonDelta(plr: Player, delta:number?): (boolean, string?)",
        "\tif type(delta) ~= \"number\" or delta == 0 then return false, \"no-delta\" end",
        "",
        "\tfor _, fnName in ipairs({ \"applyMonDelta\", \"addMon\" }) do",
        "\t\tif type(StateHub[fnName]) == \"function\" then",
        "\t\t\tlocal ok, err = pcall(function() StateHub[fnName](plr, delta) end)",
        "\t\t\tif ok then return true, nil end",
        "\t\t\tLOG.warn(\"[monDelta] %s failed: %s\", fnName, tostring(err))",
        "\t\tend",
        "\tend",
        "",
        "\tlocal ok, err = pcall(function()",
        "\t\tlocal s = StateHub.get(plr) or {}",
        "\t\ts.mon = (type(s.mon) == \"number\" and s.mon or 0) + delta",
        "\tend)",
        "\tif not ok then",
        "\t\treturn false, tostring(err)",
        "\tend",
        "\treturn true, nil",
        "end",
        "",
        "--─────────────────────────────────────────────────────────────",
        "-- Decide",
        "--─────────────────────────────────────────────────────────────",
        "local PRIMARY_NOTICE_SKIP = \"選択をスキップしました\"",
        "local PRIMARY_NOTICE_DONE = \"変換が完了しました\"",
        "",
        "local function onDecide(plr: Player, payload:any)",
        "\tif Balance.KITO_UI_ENABLED ~= true then return end",
        "",
        "\tlocal uid      = payload and payload.uid",
        "\tlocal sidRecv  = payload and payload.sessionId",
        "\tlocal noChange = (payload and payload.noChange) == true",
        "",
        "\tLOG.info(\"[Decide] recv u=%s sid=%s uid=%s noChange=%s\",",
        "\t\tplr and plr.Name or \"?\", tostring(sidRecv), tostring(uid), tostring(noChange))",
        "",
        "\t-- 1) セッション消費",
        "\tlocal sess = KitoCore.consume(plr.UserId)",
        "\tif not sess or (sidRecv and sess.id ~= sidRecv) then",
        "\t\tif EvResult then EvResult:FireClient(plr, { ok=false, reason=\"session\" }) end",
        "\t\treturn",
        "\tend",
        "",
        "\t-- 2) TTL",
        "\tif type(sess.expiresAt) == \"number\" and os.time() > (sess.expiresAt or 0) then",
        "\t\tif EvResult then EvResult:FireClient(plr, { ok=false, reason=\"expired\" }) end",
        "\t\treturn",
        "\tend",
        "",
        "\t-- 3) 候補内チェック",
        "\tlocal okUid = false",
        "\tif type(uid) == \"string\" and type(sess.uids) == \"table\" then",
        "\t\tfor _, u in ipairs(sess.uids) do if u == uid then okUid = true; break end end",
        "\tend",
        "\tif (not okUid) and (not noChange) then",
        "\t\tif EvResult then EvResult:FireClient(plr, { ok=false, reason=\"uid\" }) end",
        "\t\treturn",
        "\tend",
        "",
        "\t-- 4) state/runId",
        "\tlocal s = StateHub.get(plr)",
        "\tif not s then",
        "\t\tif EvResult then EvResult:FireClient(plr, { ok=false, reason=\"state\" }) end",
        "\t\treturn",
        "\tend",
        "\tlocal runId = resolveRunId(s) or resolveRunId(s.run)",
        "\tDeckRegistry.ensureFromContext(s)",
        "\tif not runId or runId == \"\" then",
        "\t\tif EvResult then EvResult:FireClient(plr, { ok=false, reason=\"run\" }) end",
        "\t\treturn",
        "\tend",
        "",
        "\t-- 5) noChange",
        "\tif noChange == true then",
        "\t\treopenShopSnapshot(plr, { notice = PRIMARY_NOTICE_SKIP })",
        "\t\tif EvResult then EvResult:FireClient(plr, { ok=true, changed=false, uid=nil }) end",
        "\t\treturn",
        "\tend",
        "",
        "\t-- 6) 効果ID（セッション値を使用／最低限の互換マップ）",
        "\tif not EffectsRegistry or type(EffectsRegistry.apply) ~= \"function\" then",
        "\t\tif EvResult then EvResult:FireClient(plr, { ok=false, reason=\"effects\" }) end",
        "\t\treturn",
        "\tend",
        "\tlocal effectId = tostring(sess.effectId or \"\")",
        "\tif effectId == \"\" then",
        "\t\tif EvResult then EvResult:FireClient(plr, { ok=false, reason=\"effects\" }) end",
        "\t\treturn",
        "\tend",
        "\tif effectId == \"kito_tori\" then effectId = \"kito.tori_brighten\" end",
        "",
        "\t-- 7) サーバ canApply 再確認",
        "\tlocal cardForUid",
        "\tdo",
        "\t\tlocal store = DeckRegistry.read(runId)",
        "\t\tif type(store) == \"table\" and type(store.entries) == \"table\" then",
        "\t\t\tfor _, e in ipairs(store.entries) do",
        "\t\t\t\tif e and (e.uid == uid or e.code == uid) then cardForUid = e; break end",
        "\t\t\tend",
        "\t\tend",
        "\tend",
        "\tif not cardForUid then",
        "\t\tif EvResult then EvResult:FireClient(plr, { ok=false, reason=\"uid\" }) end",
        "\t\treturn",
        "\tend",
        "\tif type(EffectsRegistry.canApply) == \"function\" then",
        "\t\tlocal canOk, canReason = EffectsRegistry.canApply(effectId, cardForUid, { CardEngine = CardEngine })",
        "\t\tif not canOk then",
        "\t\t\tif EvResult then EvResult:FireClient(plr, { ok=false, reason=\"effect\", message=tostring(canReason or \"not-eligible\") }) end",
        "\t\t\treturn",
        "\t\tend",
        "\tend",
        "",
        "\t-- 8) 効果適用",
        "\tlocal applyPayload = {",
        "\t\tplr      = plr,",
        "\t\trunId    = runId,",
        "\t\tuid      = uid,",
        "\t\tuids     = (uid and { tostring(uid) } or nil),",
        "\t\tpoolUids = sess.uids,",
        "\t\tnow      = os.time(),",
        "\t\tlang     = s.lang or \"ja\",",
        "\t}",
        "\tif effectId == \"kito.tori_brighten\" or effectId == \"Tori_Brighten\" then",
        "\t\tapplyPayload.preferKind = \"bright\"",
        "\t\tapplyPayload.tag        = \"eff:kito_tori_bright\"",
        "\tend",
        "",
        "\tlocal okCall, res = pcall(function()",
        "\t\treturn EffectsRegistry.apply(runId, effectId, applyPayload)",
        "\tend)",
        "\tif not okCall then",
        "\t\tif EvResult then EvResult:FireClient(plr, { ok=false, reason=\"effect\", message=tostring(res), id=effectId }) end",
        "\t\treturn",
        "\tend",
        "",
        "\t-- 9) 正規化（messageは文字列のみ採用／bankDeltaは数値化）",
        "\tlocal ok       = (type(res) == \"table\") and (res.ok ~= false) or (res ~= nil)",
        "\tlocal changed  = (type(res) == \"table\") and (res.changed ~= 0 and res.changed ~= false) or true",
        "\tlocal msgStr   = \"\"",
        "\tif type(res) == \"table\" then",
        "\t\tif type(res.message) == \"string\" then",
        "\t\t\tmsgStr = res.message",
        "\t\telseif type(res.reason) == \"string\" then",
        "\t\t\tmsgStr = res.reason",
        "\t\tend",
        "\tend",
        "\tlocal bankDeltaRaw = (type(res) == \"table\" and type(res.meta) == \"table\") and res.meta.bankDelta or nil",
        "\tlocal bankDelta = tonumber(bankDeltaRaw)",
        "",
        "\tif not ok then",
        "\t\tif EvResult then EvResult:FireClient(plr, { ok=false, reason=\"effect\", message=tostring(msgStr or \"\"), id=effectId }) end",
        "\t\treturn",
        "\tend",
        "",
        "\t-- 10) ★ kito_last 記録（UI経由でも子 ko が再発火できるように）",
        "\tdo",
        "\t\tlocal okRec, errRec = pcall(function()",
        "\t\t\tif Kito and type(Kito.recordFromPick) == \"function\" then",
        "\t\t\t\tKito.recordFromPick(s, effectId, applyPayload, res)",
        "\t\t\tend",
        "\t\tend)",
        "\t\tif not okRec then",
        "\t\t\tLOG.warn(\"[Decide] recordFromPick failed: %s\", tostring(errRec))",
        "\t\tend",
        "\tend",
        "",
        "\t-- 11) bankDelta（= 所持文の増分）を mon に適用",
        "\tif bankDelta and bankDelta ~= 0 then",
        "\t\tlocal mOk, mErr = applyMonDelta(plr, bankDelta)",
        "\t\tLOG.info(\"[Decide] monDelta %+d applied=%s err=%s\", bankDelta, tostring(mOk), mOk and \"\" or tostring(mErr))",
        "\tend",
        "",
        "\t-- 12) 状態同期",
        "\tlocal okPush, errPush = pcall(function() StateHub.pushState(plr) end)",
        "\tLOG.info(\"[Decide] pushState ok=%s err=%s\", tostring(okPush), okPush and \"\" or tostring(errPush))",
        "",
        "\t-- 13) Shop 再表示（在庫維持）— notice を（+N 文）付きで",
        "\tlocal base = (msgStr ~= \"\" and msgStr) or PRIMARY_NOTICE_DONE",
        "\tlocal finalNotice = (bankDelta and bankDelta ~= 0)",
        "\t\tand string.format(\"%s（+%d 文）\", base, bankDelta)"
      ],
      "truncated": true,
      "analysis": {
        "waitForChild": [
          "SharedModules",
          "Logger",
          "Config",
          "Balance",
          "SharedModules",
          "KitoPickCore",
          "Deck",
          "DeckRegistry",
          "StateHub",
          "CardEngine",
          "Remotes",
          "KitoPickDecide"
        ],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 1
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/server/NavServer.lua",
      "ext": "lua",
      "binary": false,
      "size": 7613,
      "mtime": "2025-10-03T03:51:46.046025+00:00",
      "head": [
        "-- ServerScriptService/NavServer.lua",
        "-- v0.9.9  DecideNext 12-month対応：final-month は HOME 強制",
        "-- 変更点：",
        "--  - 月12の result 中は、どの操作（koikoi/home/その他）でも HOME 一択に強制",
        "--  - サーバ側で StageResult を明示クローズし、HomeOpen を即発火",
        "--  - 12月クリア時の +2 両はスコア側で加算済みのため、ここでは追加しない（重複防止）",
        "",
        "local RS  = game:GetService(\"ReplicatedStorage\")",
        "",
        "-- Logger",
        "local Logger = require(RS:WaitForChild(\"SharedModules\"):WaitForChild(\"Logger\"))",
        "local LOG    = Logger.scope(\"NavServer\")",
        "",
        "local function ensureRemote(name: string)",
        "\tlocal rem = RS:FindFirstChild(\"Remotes\")",
        "\tif not rem then",
        "\t\trem = Instance.new(\"Folder\")",
        "\t\trem.Name = \"Remotes\"",
        "\t\trem.Parent = RS",
        "\tend",
        "\tlocal e = rem:FindFirstChild(name)",
        "\tif not e then",
        "\t\te = Instance.new(\"RemoteEvent\")",
        "\t\te.Name = name",
        "\t\te.Parent = rem",
        "\tend",
        "\treturn e",
        "end",
        "",
        "local Remotes = {",
        "\tHomeOpen    = ensureRemote(\"HomeOpen\"),",
        "\tDecideNext  = ensureRemote(\"DecideNext\"),",
        "\tStageResult = ensureRemote(\"StageResult\"), -- クライアント結果モーダルの明示クローズ用",
        "}",
        "",
        "local function normLang(v:string?): string",
        "\tv = tostring(v or \"\"):lower()",
        "\tif v == \"ja\" or v == \"jp\" then return \"ja\" end",
        "\tif v == \"en\" then return \"en\" end",
        "\treturn \"en\"",
        "end",
        "",
        "local NavServer = {}",
        "NavServer.__index = NavServer",
        "",
        "export type Deps = {",
        "\tStateHub: any,",
        "\tRound: any,",
        "\tShopService: any?,",
        "\tSaveService: any?,",
        "\tHomeOpen: RemoteEvent?,      -- （任意）外から渡されたものを優先",
        "\tDecideNext: RemoteEvent?,    -- （任意）外から渡されたものを優先",
        "}",
        "",
        "function NavServer.init(deps: Deps)",
        "\tlocal self = setmetatable({ deps = deps or {}, _conns = {} }, NavServer)",
        "",
        "\t-- 外部から Remotes をもらえたら差し替え",
        "\tif deps.HomeOpen then Remotes.HomeOpen = deps.HomeOpen end",
        "\tif deps.DecideNext then Remotes.DecideNext = deps.DecideNext end",
        "",
        "\t-- 統一入口",
        "\ttable.insert(self._conns, Remotes.DecideNext.OnServerEvent:Connect(function(plr, op)",
        "\t\tself:handle(plr, tostring(op or \"\"))",
        "\tend))",
        "",
        "\tLOG.info(\"ready (DecideNext unified / 12-month 2-choice)\")",
        "\treturn self",
        "end",
        "",
        "-- ★ ラン終了のハードリセット（春スナップを新規生成しない）",
        "local function endRunAndClean(StateHub, SaveService, plr: Player)",
        "\tlocal s = StateHub and StateHub.get and StateHub.get(plr)",
        "\tif not s then return end",
        "",
        "\t-- ラン関連・結果保留・遷移ロックを全て破棄",
        "\ts.phase         = \"home\"",
        "\ts.run           = nil",
        "\ts.shop          = nil",
        "\ts.ops           = nil",
        "\ts.options       = nil",
        "\ts.resultPending = nil",
        "\ts.stageResult   = nil",
        "\ts.decideLocks   = nil",
        "\ts.mult          = 1.0",
        "\t-- 季節系も切ってUIの誤判定を防止",
        "\ts.season        = nil",
        "\ts.round         = nil",
        "",
        "\t-- 次回開始は必ずNEW（GameInit.startGameAuto で参照）",
        "\ts._forceNewOnNextStart = true",
        "",
        "\t-- 「続き」用スナップも破棄（DataStore側）",
        "\tif SaveService and typeof(SaveService.clearActiveRun) == \"function\" then",
        "\t\tpcall(function() SaveService.clearActiveRun(plr) end)",
        "\tend",
        "",
        "\t-- クライアントの結果モーダルを明示的に閉じる",
        "\tpcall(function()",
        "\t\tRemotes.StageResult:FireClient(plr, { close = true })",
        "\tend)",
        "",
        "\t-- クライアントへ最新 state を押し出し視覚的にも終了させる",
        "\tif StateHub and StateHub.pushState then",
        "\t\tpcall(function() StateHub.pushState(plr) end)",
        "\tend",
        "end",
        "",
        "local function getMonth(s:any): number",
        "\treturn tonumber(s and s.run and s.run.month) or 1",
        "end",
        "",
        "function NavServer:handle(plr: Player, op: string)",
        "\tlocal StateHub    = self.deps.StateHub",
        "\tlocal Round       = self.deps.Round         -- 参照は残すがここでは newRound は呼ばない",
        "\tlocal ShopService = self.deps.ShopService",
        "\tlocal SaveService = self.deps.SaveService",
        "",
        "\tlocal s = StateHub and StateHub.get and StateHub.get(plr)",
        "\tif not s then",
        "\t\tLOG.warn(\"state missing | user=%s op=%s\", tostring(plr and plr.Name or \"?\"), tostring(op))",
        "\t\treturn",
        "\tend",
        "",
        "\tlocal op0 = string.lower(tostring(op or \"\"))",
        "\tlocal m   = getMonth(s)",
        "",
        "\t-- =========================",
        "\t-- ★ final-month ガード：月12の result 中は「HOME 一択」",
        "\t-- =========================",
        "\tif s.phase == \"result\" and m >= 12 then",
        "\t\tLOG.info(\"handle: %s | user=%s month=%d phase=%s → force HOME (final month)\",",
        "\t\t\ttostring(op0), tostring(plr and plr.Name or \"?\"), m, tostring(s.phase))",
        "",
        "\t\tendRunAndClean(StateHub, SaveService, plr)",
        "",
        "\t\tRemotes.HomeOpen:FireClient(plr, {",
        "\t\t\thasSave = false, -- NEW GAME を強制",
        "\t\t\tbank    = s.bank or 0,",
        "\t\t\tyear    = s.year or 0,",
        "\t\t\tclears  = s.totalClears or 0,",
        "\t\t\tlang    = normLang(SaveService and SaveService.getLang and SaveService.getLang(plr)),",
        "\t\t})",
        "\t\tLOG.info(\"→ HOME(end-run final) | user=%s hasSave=false bank=%d year=%d clears=%d\",",
        "\t\t\ttostring(plr and plr.Name or \"?\"), s.bank or 0, s.year or 0, s.totalClears or 0)",
        "\t\treturn",
        "\tend",
        "",
        "\t-- =========================",
        "\t-- いつでも有効：\"abandon\"（即終了）",
        "\t-- =========================",
        "\tif op0 == \"abandon\" then",
        "\t\tLOG.info(\"handle: ABANDON | user=%s phase=%s month=%s\", tostring(plr and plr.Name or \"?\"), tostring(s.phase), tostring(s.run and s.run.month))",
        "\t\tendRunAndClean(StateHub, SaveService, plr)",
        "",
        "\t\tRemotes.HomeOpen:FireClient(plr, {",
        "\t\t\thasSave = false, -- NEW GAME を強制",
        "\t\t\tbank    = s.bank or 0,",
        "\t\t\tyear    = s.year or 0,",
        "\t\t\tclears  = s.totalClears or 0,",
        "\t\t\tlang    = normLang(SaveService and SaveService.getLang and SaveService.getLang(plr)),",
        "\t\t})",
        "\t\tLOG.info(\"→ HOME(abandon) | user=%s bank=%d year=%d clears=%d\", plr.Name, s.bank or 0, s.year or 0, s.totalClears or 0)",
        "\t\treturn",
        "\tend",
        "",
        "\t-- =========================",
        "\t-- 2択：home / koikoi",
        "\t-- ※ 季節や解禁の条件は撤廃。9/10/11月などのクリア通知から直接来る想定。",
        "\t-- =========================",
        "\tif op0 == \"home\" then",
        "\t\t-- ラン終了→Home",
        "\t\tLOG.info(\"handle: HOME | user=%s month=%s phase=%s\", tostring(plr and plr.Name or \"?\"), tostring(s.run and s.run.month), tostring(s.phase))",
        "\t\tendRunAndClean(StateHub, SaveService, plr)",
        "",
        "\t\tRemotes.HomeOpen:FireClient(plr, {",
        "\t\t\thasSave = false,",
        "\t\t\tbank    = s.bank or 0,",
        "\t\t\tyear    = s.year or 0,",
        "\t\t\tclears  = s.totalClears or 0,",
        "\t\t\tlang    = normLang(SaveService and SaveService.getLang and SaveService.getLang(plr)),",
        "\t\t})",
        "\t\tLOG.info(\"→ HOME(end-run) | user=%s hasSave=false bank=%d year=%d clears=%d\", plr.Name, s.bank or 0, s.year or 0, s.totalClears or 0)",
        "\t\treturn",
        "",
        "\telseif op0 == \"koikoi\" or op0 == \"continue\" then",
        "\t\t-- 続行：結果モーダルを閉じて屋台を開く（EXへ）",
        "\t\tLOG.info(\"handle: KOIKOI | user=%s month=%s phase=%s\", tostring(plr and plr.Name or \"?\"), tostring(s.run and s.run.month), tostring(s.phase))",
        "",
        "\t\t-- まずクライアント側の結果モーダルを閉じる",
        "\t\tpcall(function()",
        "\t\t\tRemotes.StageResult:FireClient(plr, { close = true })",
        "\t\tend)",
        "",
        "\t\t-- 次は屋台へ。ShopService が無い場合は state push のみ。",
        "\t\ts.phase = \"shop\"",
        "\t\tif ShopService and typeof(ShopService.open) == \"function\" then",
        "\t\t\tShopService.open(plr, s, { reason = \"after_clear_month\" })",
        "\t\t\tLOG.info(\"→ SHOP(open) | user=%s month=%s\", plr.Name, tostring(s.run and s.run.month))",
        "\t\telse",
        "\t\t\tif StateHub and StateHub.pushState then StateHub.pushState(plr) end",
        "\t\t\tLOG.info(\"→ SHOP(push only) | user=%s month=%s\", plr.Name, tostring(s.run and s.run.month))",
        "\t\tend",
        "\t\treturn",
        "\tend",
        "",
        "\tLOG.warn(\"unknown op | user=%s op=%s\", tostring(plr and plr.Name or \"?\"), tostring(op0))",
        "end",
        "",
        "return NavServer"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [
          "SharedModules",
          "Logger"
        ],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 1,
          "ja_literals": 2
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/server/RemotesInit.server.lua",
      "ext": "lua",
      "binary": false,
      "size": 1818,
      "mtime": "2025-10-04T12:56:19.853390+00:00",
      "head": [
        "-- ServerScriptService/RemotesInit.server.lua",
        "-- v0.9.9-fix:",
        "--  - 「この手で勝負」用の Confirm を常設",
        "--  - 画面遷移系（HomeOpen/DecideNext/StageResult）もここで ensure",
        "--  - 既存の KITO / Talisman / PlaceOnSlot は従来どおり",
        "",
        "local RS = game:GetService(\"ReplicatedStorage\")",
        "",
        "local function ensureFolder(parent, name)",
        "\tlocal f = parent:FindFirstChild(name)",
        "\tif not f then",
        "\t\tf = Instance.new(\"Folder\")",
        "\t\tf.Name = name",
        "\t\tf.Parent = parent",
        "\tend",
        "\treturn f",
        "end",
        "",
        "local function ensureRE(parent, name)",
        "\tlocal ev = parent:FindFirstChild(name)",
        "\tif not ev then",
        "\t\tev = Instance.new(\"RemoteEvent\")",
        "\t\tev.Name = name",
        "\t\tev.Parent = parent",
        "\tend",
        "\treturn ev",
        "end",
        "",
        "local remotes = ensureFolder(RS, \"Remotes\")",
        "",
        "--==================================================",
        "-- 既存（従来どおり）",
        "--==================================================",
        "ensureRE(remotes, \"PlaceOnSlot\")     -- C→S",
        "ensureRE(remotes, \"TalismanPlaced\")  -- S→C (ACK)",
        "",
        "-- ★ KITO ピック用（起動時に必ず用意）",
        "ensureRE(remotes, \"KitoPickStart\")   -- S→C: 候補提示",
        "ensureRE(remotes, \"KitoPickDecide\")  -- C→S: 決定（uid を返す）",
        "ensureRE(remotes, \"KitoPickResult\")  -- S→C: 結果トースト等",
        "",
        "--==================================================",
        "-- ★ 追加：Run 進行・遷移系",
        "--==================================================",
        "ensureRE(remotes, \"Confirm\")     -- C→S: 「この手で勝負」",
        "ensureRE(remotes, \"DecideNext\")  -- C→S: リザルトからの遷移（\"home\"/\"koikoi\"/\"abandon\" 等）",
        "ensureRE(remotes, \"HomeOpen\")    -- S→C: ホーム画面オープン",
        "ensureRE(remotes, \"StageResult\") -- S→C: ステージ結果モーダルの表示/クローズ",
        "",
        "print(\"[RemotesInit] Remotes ready →\", remotes:GetFullName())"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/server/SaveService.lua",
      "ext": "lua",
      "binary": false,
      "size": 16087,
      "mtime": "2025-09-24T12:02:09.780398+00:00",
      "head": [
        "-- ServerScriptService/SaveService (ModuleScript)",
        "-- 最小DataStore：bank / year / asc / clears / lang / activeRun を永続化（version=4据え置き）",
        "-- 使い方：",
        "--   local SaveService = require(game.ServerScriptService.SaveService)",
        "--   SaveService.load(player)                      -- PlayerAdded で呼ぶ（メモリに展開）",
        "--   SaveService.addBank(player, 2)                -- 両の加算（dirty化）",
        "--   SaveService.setYear(player, s.year)           -- 年数更新（dirty化）",
        "--   SaveService.bumpYear(player, 25)              -- 年数を加算（例：冬クリアで +25）",
        "--   SaveService.getAscension(player)              -- アセンション値を取得",
        "--   SaveService.setAscension(player, 1)           -- アセンション値を設定（0以上）",
        "--   SaveService.getBaseStartYear(player)          -- 1000 + 100*asc を返す",
        "--   SaveService.ensureBaseYear(player)            -- 年が未設定/0なら基準年に補正",
        "--   SaveService.getClears(player)                 -- 通算クリア回数を取得",
        "--   SaveService.setClears(player, n)              -- 通算クリア回数を設定",
        "--   SaveService.bumpClears(player, 1)             -- 通算クリア回数を加算",
        "--   SaveService.getLang(player)                   -- 保存言語(\"ja\"|\"en\")を取得（保存>OS）",
        "--   SaveService.setLang(player, \"ja\"|\"en\")        -- 保存言語を設定（dirty化）",
        "--   SaveService.mergeIntoState(player, state)     -- bank/year/asc/clears/lang を state に反映",
        "--   -- ★ アクティブ・ラン（続き用スナップ）",
        "--   SaveService.getActiveRun(player)              -- 現在のスナップを取得（nil可）",
        "--   SaveService.setActiveRun(player, snap)        -- スナップを設定（dirty化）",
        "--   SaveService.clearActiveRun(player)            -- スナップを破棄（dirty化）",
        "--   SaveService.snapSeasonStart(player, state, n) -- 季節開始スナップ（簡易ヘルパ）",
        "--   SaveService.snapShopEnter(player, state)      -- 屋台入場スナップ（簡易ヘルパ）",
        "--   -- 保存",
        "--   SaveService.flush(player)                     -- PlayerRemoving で呼ぶ（保存）",
        "--   SaveService.flushAll()                        -- サーバ終了時の保険",
        "",
        "local DataStoreService = game:GetService(\"DataStoreService\")",
        "local Players          = game:GetService(\"Players\")",
        "local RunService       = game:GetService(\"RunService\")",
        "-- SaveService.lua (先頭付近)",
        "local RS = game:GetService(\"ReplicatedStorage\")",
        "-- 旧: local TalismanState = require(RS:WaitForChild(\"TalismanState\"))",
        "local SharedModules = RS:WaitForChild(\"SharedModules\")",
        "local TalismanState = require(SharedModules:WaitForChild(\"TalismanState\"))",
        "",
        "-- ▼ 追加：DeckSchema（未配置でも落ちないように pcall で保護）",
        "local DeckSchema = nil",
        "do",
        "\tlocal ok, mod = pcall(function()",
        "\t\tlocal DeckFolder = SharedModules:FindFirstChild(\"Deck\")",
        "\t\tif DeckFolder then",
        "\t\t\treturn require(DeckFolder:WaitForChild(\"DeckSchema\"))",
        "\t\tend",
        "\t\treturn nil",
        "\tend)",
        "\tif ok then DeckSchema = mod else DeckSchema = nil end",
        "end",
        "",
        "--=== 設定 =========================================================",
        "local PROFILE_DS_NAME = \"ProfileV1\" -- 互換維持：version でのマイグレーション",
        "local USE_MEMORY_IN_STUDIO = true   -- Studioではメモリのみで動かす（API許可が無くても動作）",
        "",
        "--=== DataStore / Studioメモリ ====================================",
        "local isStudio = RunService:IsStudio()",
        "local profileDS = nil",
        "if not (isStudio and USE_MEMORY_IN_STUDIO) then",
        "\tlocal ok, ds = pcall(function()",
        "\t\treturn DataStoreService:GetDataStore(PROFILE_DS_NAME)",
        "\tend)",
        "\tif ok then",
        "\t\tprofileDS = ds",
        "\telse",
        "\t\twarn(\"[SaveService] DataStore init failed; fallback to memory.\")",
        "\tend",
        "end",
        "",
        "--=== キー生成 =====================================================",
        "local function keyForUserId(userId:number): string",
        "\treturn \"u:\" .. tostring(userId)",
        "end",
        "",
        "--=== 言語正規化（外部I/Fは \"ja\" / \"en\" に統一） ==================",
        "local function normLang(s:any): string",
        "\ts = tostring(s or \"\"):lower()",
        "\tif s == \"jp\" or s == \"ja\" then return \"ja\" end",
        "\treturn \"en\"",
        "end",
        "",
        "--=== デフォルト（version 4：lang / activeRun を含む） =============",
        "local DEFAULT_PROFILE = {",
        "\tversion = 4,",
        "\tbank = 0,       -- 両（永続通貨）",
        "\tyear = 1000,    -- 初期年（アセンション 0 なら 1000）",
        "\tasc  = 0,       -- アセンション（0以上の整数）",
        "\tclears = 0,     -- 通算クリア回数",
        "\tlang = \"en\",    -- 保存言語（\"ja\"|\"en\"）",
        "\tactiveRun = nil,-- ★ 続き用スナップ（{version,season,atShop,bank,mon,deckSeed,shopStock?,effects?, deck?}）",
        "}",
        "",
        "--=== 内部メモリ（サーバ滞在中のキャッシュ） ======================",
        "type Profile = {",
        "\tversion:number, bank:number, year:number, asc:number, clears:number,",
        "\tlang:string,",
        "\tactiveRun:any?, -- ★ 追加",
        "}",
        "local Save = {",
        "\t_profiles = {} :: {[Player]: Profile},",
        "\t_dirty    = {} :: {[Player]: boolean},",
        "}",
        "",
        "--=== 補助：OSロケール→\"ja\"/\"en\" 推定 =============================",
        "local function detectLangFromLocaleId(plr: Player?): string",
        "\tlocal ok, lid = pcall(function()",
        "\t\treturn (plr and plr.LocaleId or \"en-us\"):lower()",
        "\tend)",
        "\tif ok and string.sub(lid,1,2) == \"ja\" then return \"ja\" end",
        "\treturn \"en\"",
        "end",
        "",
        "-- ▼ 追加：activeRun 内の deck/currentDeck を v3 に“自然治癒”させる",
        "local function normalizeActiveRun(ar:any): any",
        "\tif type(ar) ~= \"table\" then return nil end",
        "\t-- DeckSchema が無い環境では素通し",
        "\tif not DeckSchema then return ar end",
        "",
        "\tlocal out = table.clone(ar)",
        "\t-- 一般的なフィールド名の両対応",
        "\tlocal deckFieldNames = { \"deck\", \"currentDeck\" }",
        "\tfor _, fname in ipairs(deckFieldNames) do",
        "\t\tif type(out[fname]) == \"table\" then",
        "\t\t\tlocal upgraded, changed = DeckSchema.upgradeToV3(out[fname])",
        "\t\t\tout[fname] = upgraded",
        "\t\tend",
        "\tend",
        "\treturn out",
        "end",
        "",
        "--=== 正規化（不正値の矯正） =====================================",
        "local function normalizeProfile(p:any): Profile",
        "\tlocal out:any = {}",
        "\tlocal v = tonumber(p and p.version) or 1",
        "\tout.version = (v < 4) and 4 or math.floor(v)",
        "",
        "\tout.bank   = math.max(0, math.floor(tonumber(p and p.bank) or 0))",
        "\tlocal y    = tonumber(p and p.year) or 0",
        "\tout.year   = math.floor(y)",
        "\tout.asc    = math.max(0, math.floor(tonumber(p and p.asc) or 0))",
        "\tout.clears = math.max(0, math.floor(tonumber(p and p.clears) or 0))",
        "",
        "\tlocal rawL = tostring(p and p.lang or \"\"):lower()",
        "\tout.lang = normLang(rawL) -- \"jp\" 既存値は \"ja\" に正規化",
        "",
        "\t-- ★ activeRun はテーブルなら v3 補完をかけて保持（将来 deck を持つ場合に対応）",
        "\tif type(p and p.activeRun) == \"table\" then",
        "\t\tout.activeRun = normalizeActiveRun(p.activeRun)",
        "\telse",
        "\t\tout.activeRun = nil",
        "\tend",
        "",
        "\treturn out :: Profile",
        "end",
        "",
        "--=== 補助：基準年 ================================================",
        "local function baseStartYearForAsc(asc:number): number",
        "\treturn 1000 + (math.max(0, math.floor(asc or 0)) * 100)",
        "end",
        "",
        "--==================================================",
        "-- 公開API",
        "--==================================================",
        "",
        "-- プロフィールをロードしてメモリに展開（無ければ既定値）",
        "function Save.load(plr: Player): Profile",
        "\tlocal uid = plr.UserId",
        "\tlocal key = keyForUserId(uid)",
        "",
        "\tlocal data = nil",
        "\tif profileDS then",
        "\t\tlocal ok, res = pcall(function()",
        "\t\t\treturn profileDS:GetAsync(key)",
        "\t\tend)",
        "\t\tif ok then data = res else warn(\"[SaveService] GetAsync failed\") end",
        "\tend",
        "\t-- StudioでAPI無効 or 取得失敗時は data=nil のまま（デフォルト適用）",
        "",
        "\tlocal prof: Profile",
        "\tif typeof(data) == \"table\" then",
        "\t\tprof = normalizeProfile(data)",
        "\telse",
        "\t\tprof = table.clone(DEFAULT_PROFILE) :: Profile",
        "\tend",
        "",
        "\t-- 簡易マイグレーション：",
        "\t-- - version < 4 なら 4 に引き上げ",
        "\t-- - year <= 0 の場合は、asc に応じた基準年に補正",
        "\t-- - clears 欠損は 0 補完",
        "\t-- - lang 欠損は OS ロケールから初期化（\"ja\"/\"en\"）",
        "\t-- - \"jp\" が残っていたら \"ja\" に正規化",
        "\t-- - activeRun は v3 補完をかけたものを保持（将来 deck を含む場合）",
        "\tlocal migrated = false",
        "\tif prof.version < 4 then",
        "\t\tprof.version = 4",
        "\t\tmigrated = true",
        "\tend",
        "\tif (prof.year or 0) <= 0 then",
        "\t\tprof.year = baseStartYearForAsc(prof.asc)",
        "\t\tmigrated = true",
        "\tend",
        "\tif prof.clears == nil then",
        "\t\tprof.clears = 0",
        "\t\tmigrated = true",
        "\tend",
        "\tif not prof.lang or (prof.lang ~= \"ja\" and prof.lang ~= \"en\") then",
        "\t\tprof.lang = detectLangFromLocaleId(plr)",
        "\t\tmigrated = true",
        "\tend",
        "\tlocal nlang = normLang(prof.lang)",
        "\tif nlang ~= prof.lang then",
        "\t\tprof.lang = nlang",
        "\t\tmigrated = true",
        "\tend",
        "",
        "\tSave._profiles[plr] = prof",
        "\tSave._dirty[plr]    = migrated -- マイグレーションしたら保存対象に",
        "",
        "\treturn prof",
        "end",
        "",
        "-- メモリ上のプロフィール参照（存在しなければ nil）",
        "function Save.get(plr: Player): Profile?",
        "\treturn Save._profiles[plr]",
        "end",
        "",
        "--=== bank =========================================================",
        "function Save.setBank(plr: Player, newBank:number)",
        "\tlocal p = Save._profiles[plr]; if not p then return end",
        "\tp.bank = math.max(0, math.floor(tonumber(newBank) or 0))",
        "\tSave._dirty[plr] = true",
        "end",
        "",
        "function Save.addBank(plr: Player, delta:number)",
        "\tlocal p = Save._profiles[plr]; if not p then return end",
        "\tp.bank = math.max(0, math.floor((p.bank or 0) + (tonumber(delta) or 0)))",
        "\tSave._dirty[plr] = true",
        "end",
        "",
        "--=== year =========================================================",
        "function Save.setYear(plr: Player, newYear:number)",
        "\tlocal p = Save._profiles[plr]; if not p then return end",
        "\tp.year = math.max(0, math.floor(tonumber(newYear) or 0))",
        "\tSave._dirty[plr] = true",
        "end",
        "",
        "function Save.bumpYear(plr: Player, delta:number)",
        "\tlocal p = Save._profiles[plr]; if not p then return end",
        "\tlocal cur = tonumber(p.year or 0) or 0",
        "\tp.year = math.max(0, math.floor(cur + (tonumber(delta) or 0)))",
        "\tSave._dirty[plr] = true",
        "end",
        "",
        "--=== ascension ====================================================",
        "function Save.getAscension(plr: Player): number",
        "\tlocal p = Save._profiles[plr]; if not p then return 0 end",
        "\treturn math.max(0, math.floor(tonumber(p.asc) or 0))",
        "end",
        "",
        "function Save.setAscension(plr: Player, n:number)",
        "\tlocal p = Save._profiles[plr]; if not p then return end",
        "\tp.asc = math.max(0, math.floor(tonumber(n) or 0))",
        "\tSave._dirty[plr] = true",
        "end",
        "",
        "--=== clears =======================================================",
        "function Save.getClears(plr: Player): number",
        "\tlocal p = Save._profiles[plr]; if not p then return 0 end",
        "\treturn math.max(0, math.floor(tonumber(p.clears) or 0))",
        "end",
        "",
        "function Save.setClears(plr: Player, n:number)",
        "\tlocal p = Save._profiles[plr]; if not p then return end",
        "\tp.clears = math.max(0, math.floor(tonumber(n) or 0))",
        "\tSave._dirty[plr] = true",
        "end",
        "",
        "function Save.bumpClears(plr: Player, delta:number)",
        "\tlocal p = Save._profiles[plr]; if not p then return end",
        "\tlocal cur = tonumber(p.clears or 0) or 0",
        "\tp.clears = math.max(0, math.floor(cur + (tonumber(delta) or 0)))",
        "\tSave._dirty[plr] = true",
        "end",
        "",
        "--=== lang =========================================================",
        "function Save.getLang(plr: Player): string",
        "\tlocal p = Save._profiles[plr]",
        "\tif p and (p.lang == \"ja\" or p.lang == \"en\") then",
        "\t\treturn p.lang",
        "\tend",
        "\treturn detectLangFromLocaleId(plr)",
        "end",
        "",
        "function Save.setLang(plr: Player, lang:string)",
        "\tlang = normLang(lang)",
        "\tlocal p = Save._profiles[plr]; if not p then return end",
        "\tif p.lang ~= lang then",
        "\t\tp.lang = lang",
        "\t\tSave._dirty[plr] = true",
        "\tend",
        "end"
      ],
      "truncated": true,
      "analysis": {
        "waitForChild": [
          "TalismanState",
          "SharedModules",
          "TalismanState",
          "DeckSchema"
        ],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 3,
          "ja_literals": 18
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/server/ShopEffects/init.lua",
      "ext": "lua",
      "binary": false,
      "size": 2920,
      "mtime": "2025-10-02T02:41:15.464706+00:00",
      "head": [
        "-- ServerScriptService/ShopEffects/init.lua",
        "-- v0.9.2 効果ディスパッチ（カテゴリ別振り分け）",
        "-- 公開I/F:",
        "--   apply(effectId, state, ctx) -> (ok:boolean, message:string)",
        "-- 変更点（v0.9.2）:",
        "--  - ★KITOを「ドット唯一の真実」に統一：kito_ を一切受理しない（変換もしない）",
        "--  - 互換warnロジック／コール元推定など、アンダーバー対応の補助処理を削除",
        "",
        "local M = {}",
        "",
        "--========================",
        "-- サブモジュールの読込（安全なpcall）",
        "--========================",
        "local function safeRequire(container, childName)",
        "\tlocal ok, mod = pcall(function()",
        "\t\treturn require(container:WaitForChild(childName))",
        "\tend)",
        "\tif ok and type(mod) == \"table\" then",
        "\t\treturn mod",
        "\telse",
        "\t\twarn(\"[ShopEffects.init] module not found or invalid:\", childName, mod)",
        "\t\treturn nil",
        "\tend",
        "end",
        "",
        "local Kito     = safeRequire(script, \"Kito\")",
        "local Sai      = safeRequire(script, \"Sai\")",
        "local Spectral = safeRequire(script, \"Spectral\") -- 任意",
        "",
        "-- 直接呼びたい場合のエクスポート",
        "M.Kito     = Kito",
        "M.Sai      = Sai",
        "M.Spectral = Spectral",
        "",
        "local function msgJa(s) return s end",
        "",
        "--========================",
        "-- 内部：委譲呼び出し（共通ラッパ）",
        "--========================",
        "local function delegate(mod, fx, effectId, state, ctx, tag)",
        "\tif not (mod and type(mod[fx]) == \"function\") then",
        "\t\treturn false, msgJa(tag .. \"モジュールが見つかりません\")",
        "\tend",
        "\tlocal okCall, okRet, msgRet = pcall(function()",
        "\t\treturn mod[fx](effectId, state, ctx)",
        "\tend)",
        "\tif not okCall then",
        "\t\twarn((\"[ShopEffects.init] %s.apply threw: %s\"):format(tag, tostring(okRet)))",
        "\t\treturn false, msgJa(tag .. \"適用中にエラーが発生しました\")",
        "\tend",
        "\treturn okRet == true, tostring(msgRet or \"\")",
        "end",
        "",
        "--========================",
        "-- メインディスパッチ",
        "--========================",
        "function M.apply(effectId, state, ctx)",
        "\tif type(effectId) ~= \"string\" then",
        "\t\treturn false, msgJa(\"効果IDが不正です\")",
        "\tend",
        "",
        "\t-- 祈祷（★dot only）",
        "\t--  kito.XXX …… 受理",
        "\t--  kito_XXX …  エラー（変換しない）",
        "\tif effectId:sub(1,5) == \"kito.\" then",
        "\t\treturn delegate(Kito, \"apply\", effectId, state, ctx, \"祈祷\")",
        "\telseif effectId:sub(1,5) == \"kito_\" then",
        "\t\treturn false, msgJa((\"未対応の効果IDです（kito_ は非対応。kito. を使用してください）: %s\"):format(effectId))",
        "\tend",
        "",
        "\t-- 祭事（sai_）",
        "\tif effectId:sub(1,4) == \"sai_\" then",
        "\t\treturn delegate(Sai, \"apply\", effectId, state, ctx, \"祭事\")",
        "\tend",
        "",
        "\t-- スペクタル（spectral_/spec_/互換kito_spec_）",
        "\tif effectId:sub(1,9) == \"spectral_\" or effectId:sub(1,5) == \"spec_\" or effectId:sub(1,11) == \"kito_spec_\" then",
        "\t\treturn delegate(Spectral, \"apply\", effectId, state, ctx, \"スペクタル\")",
        "\tend",
        "",
        "\treturn false, msgJa((\"未対応の効果ID: %s\"):format(effectId))",
        "end",
        "",
        "return M"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/server/ShopEffects/Kito.lua",
      "ext": "lua",
      "binary": false,
      "size": 11626,
      "mtime": "2025-10-02T02:39:01.669169+00:00",
      "head": [
        "-- src/server/ShopEffects/Kito.lua",
        "-- v0.9.15 Kito（祈祷）— DOT ONLY（kito.* を唯一の真実として運用）",
        "--  - 子(ko)UI先行起動のFIXを維持（v0.9.13）",
        "--  - Kito.recordFromPick(state, effectId, payload, meta) を維持",
        "--  - ★破壊的変更: アンダーバーID（kito_）の受理/変換を全廃。渡されてもエラーを返す。",
        "",
        "local RS   = game:GetService(\"ReplicatedStorage\")",
        "local SSS  = game:GetService(\"ServerScriptService\")",
        "",
        "local Shared  = RS:WaitForChild(\"SharedModules\")",
        "local Config  = RS:WaitForChild(\"Config\")",
        "",
        "local EffectsRegistry = require(Shared:WaitForChild(\"Deck\"):WaitForChild(\"EffectsRegistry\"))",
        "local Balance        = require(Config:WaitForChild(\"Balance\"))",
        "",
        "--========================",
        "-- KitoPickCore lazy-load",
        "--========================",
        "local KitoPickCore = nil",
        "local function lazyGetKitoPickCore()",
        "\tif not KitoPickCore then",
        "\t\tKitoPickCore = require(SSS:WaitForChild(\"KitoPickCore\"))",
        "\tend",
        "\treturn KitoPickCore",
        "end",
        "",
        "--========================",
        "-- Module",
        "--========================",
        "local Kito = {}",
        "",
        "-- ★ドットIDを唯一の真実に統一",
        "Kito.ID = {",
        "\tUSHI = \"kito.ushi\",",
        "\tTORA = \"kito.tora\",",
        "\tTORI = \"kito.tori\",",
        "\tMI   = \"kito.mi\",",
        "\tKO   = \"kito.ko\",",
        "}",
        "",
        "local DEFAULTS = { CAP_MON = 999999 }",
        "local function msg(s) return s end",
        "",
        "local function ensureBonus(state) state.bonus = state.bonus or {}; return state.bonus end",
        "local function ensureKito(state)  state.kito  = state.kito  or {}; return state.kito  end",
        "",
        "local function isArray(t) if typeof(t)~=\"table\" then return false end for i=1,#t do if t[i]==nil then return false end end return true end",
        "local function isNonEmptyArray(t) return isArray(t) and #t>0 end",
        "local function normalizeArrayOrNil(t) if isNonEmptyArray(t) then return t end return nil end",
        "",
        "-- preferKind は当面 \"hikari\" 固定（将来の拡張に備え関数化）",
        "local function normPreferKind(s: string?) if s==\"bright\" then return \"hikari\" end return \"hikari\" end",
        "",
        "local function resolveRunIdFrom(anyTable)",
        "\tif type(anyTable)~=\"table\" then return nil end",
        "\tlocal direct = anyTable.runId or anyTable.deckRunId or anyTable.id or anyTable.deckRunID or anyTable.runID",
        "\tif direct ~= nil then return direct end",
        "\tlocal run = anyTable.run",
        "\tif type(run)==\"table\" then",
        "\t\treturn run.runId or run.deckRunId or run.id or run.deckRunID or run.runID",
        "\tend",
        "\treturn nil",
        "end",
        "local function resolveRunId(state, ctx) return resolveRunIdFrom(ctx) or resolveRunIdFrom(state) end",
        "",
        "--========================",
        "-- 記録ヘルパ",
        "--========================",
        "local function sanitizePayloadForRecord(payload:any)",
        "\tif typeof(payload) ~= \"table\" then return nil end",
        "\tlocal out = {}",
        "\tif payload.preferKind ~= nil then out.preferKind = payload.preferKind end",
        "\treturn (next(out) ~= nil) and out or nil",
        "end",
        "",
        "local function shouldRecord(ctx:any)",
        "\treturn not (typeof(ctx) == \"table\" and ctx.__fromChild == true)",
        "end",
        "",
        "local function recordLastKito(state:any, effectId:string, payload:any?, meta:any?, ctx:any?)",
        "\tif not shouldRecord(ctx) then return end",
        "\tstate.run = state.run or {}",
        "\tstate.run.kito_last = {",
        "\t\tv       = 1,",
        "\t\tid      = tostring(effectId or \"\"),",
        "\t\tpayload = sanitizePayloadForRecord(payload),",
        "\t\tmeta    = (typeof(meta)==\"table\") and {",
        "\t\t\tchanged    = meta.changed,",
        "\t\t\tpickReason = meta.pickReason,",
        "\t\t\ttargetUid  = meta.targetUid,",
        "\t\t\ttargetCode = meta.targetCode,",
        "\t\t} or nil,",
        "\t\tt       = os.time(),",
        "\t}",
        "end",
        "",
        "--========================",
        "-- 内蔵エフェクト",
        "--========================",
        "",
        "-- 丑：所持文2倍（上限あり）",
        "local function effect_ushi(state, ctx)",
        "\tlocal cap    = (ctx and ctx.capMon) or DEFAULTS.CAP_MON",
        "\tlocal before = tonumber(state.mon or 0) or 0",
        "\tlocal after  = math.min(before * 2, cap)",
        "\tstate.mon    = after",
        "\trecordLastKito(state, Kito.ID.USHI, nil, { changed = 1 }, ctx)",
        "\treturn true, msg((\"丑：所持文2倍（%d → %d, 上限=%d）\"):format(before, after, cap))",
        "end",
        "",
        "-- 寅：取り札の得点+1（累積）",
        "local function effect_tora(state, ctx)",
        "\tlocal b = ensureBonus(state); b.takenPointPlus = (b.takenPointPlus or 0) + 1",
        "\tlocal k = ensureKito(state);  k.tora = (tonumber(k.tora) or 0) + 1",
        "\trecordLastKito(state, Kito.ID.TORA, nil, { changed = 1 }, ctx)",
        "\treturn true, msg((\"寅：取り札の得点+1（累計+%d / Lv=%d）\"):format(b.takenPointPlus, k.tora))",
        "end",
        "",
        "-- Deck/Effects 経由の共通適用（UI起動にも対応）",
        "local function apply_via_effects(effectModuleId:string, labelJP:string, state, ctx, preferKind:string?)",
        "\tlocal runId = resolveRunId(state, ctx)",
        "\tif runId == nil then",
        "\t\treturn false, (labelJP .. \"：runId が未指定です\")",
        "\tend",
        "",
        "\tlocal uids      = normalizeArrayOrNil(ctx and ctx.uids)",
        "\tlocal poolUids  = normalizeArrayOrNil(ctx and ctx.poolUids)",
        "\tlocal codes     = normalizeArrayOrNil(ctx and ctx.codes)",
        "\tlocal poolCodes = normalizeArrayOrNil(ctx and ctx.poolCodes)",
        "",
        "\tif Balance.KITO_UI_ENABLED == true then",
        "\t\tlocal hasAnyInput = (uids~=nil) or (poolUids~=nil) or (codes~=nil) or (poolCodes~=nil)",
        "\t\tif not hasAnyInput then",
        "\t\t\tlocal player = (ctx and ctx.player) or (state and state.player)",
        "\t\t\tif not player then",
        "\t\t\t\treturn false, (labelJP .. \"：UIモードですが player が不明です（ctx.player を渡してください）\")",
        "\t\t\tend",
        "\t\t\tlazyGetKitoPickCore().startFor(player, { runId = runId }, effectModuleId, preferKind)",
        "\t\t\treturn true, (labelJP .. \"：候補を表示しました。対象を選んでください。\")",
        "\t\tend",
        "\tend",
        "",
        "\tlocal payload = {",
        "\t\tuids       = uids, poolUids = poolUids,",
        "\t\tcodes      = codes, poolCodes = poolCodes,",
        "\t\tpreferKind = preferKind,",
        "\t\ttag        = \"eff:\" .. tostring(effectModuleId),",
        "\t}",
        "\tlocal res = EffectsRegistry.apply(runId, effectModuleId, payload)",
        "\tif not res or res.ok ~= true then",
        "\t\tlocal reason = (res and (res.error or res.message)) or \"unknown\"",
        "\t\treturn false, (labelJP .. \"：失敗（\" .. tostring(reason) .. \"）\")",
        "\tend",
        "",
        "\trecordLastKito(state, effectModuleId, payload, res, ctx)",
        "",
        "\tlocal changed = tonumber(res.changed or 0) or 0",
        "\tif changed > 0 then",
        "\t\treturn true, (labelJP .. \"：1枚を変換（成功）\")",
        "\telse",
        "\t\treturn true, (labelJP .. \"：変換対象なし（\" .. tostring(res.meta or \"no-eligible-target\") .. \"）\")",
        "\tend",
        "end",
        "",
        "-- 酉 / 巳（Deck/Effectsを呼ぶタイプ）",
        "local function effect_tori(state, ctx)",
        "\tlocal preferKind = normPreferKind(ctx and ctx.preferKind)",
        "\treturn apply_via_effects(\"kito.tori_brighten\", \"酉\", state, ctx, preferKind)",
        "end",
        "local function effect_mi(state, ctx)",
        "\treturn apply_via_effects(\"kito.mi_venom\", \"巳\", state, ctx, nil)",
        "end",
        "",
        "-- 子：最後の本体KITOを再発火（自分自身は記録しない）",
        "local function effect_ko(state, ctx)",
        "\tstate.run = state.run or {}",
        "\tlocal last = state.run.kito_last",
        "\tif typeof(last) ~= \"table\" or typeof(last.id) ~= \"string\" or last.id == \"\" then",
        "\t\treturn false, \"子：前回の祈祷がありません\"",
        "\tend",
        "\tif last.id == Kito.ID.KO or last.id == \"kito.ko\" then",
        "\t\treturn false, \"子：前回が子のため再発火不可\"",
        "\tend",
        "",
        "\tctx = ctx or {} ; ctx.__fromChild = true",
        "\tif typeof(last.payload) == \"table\" and ctx.preferKind == nil then",
        "\t\tctx.preferKind = last.payload.preferKind",
        "\tend",
        "\tlocal id = last.id",
        "",
        "\t-- 先にUI（Deck/Effects系×未指定）なら起動",
        "\tdo",
        "\t\tlocal uiEnabled = (Balance and Balance.KITO_UI_ENABLED == true)",
        "\t\tlocal noTargetGiven =",
        "\t\t\t(not isNonEmptyArray(ctx.uids))",
        "\t\t\tand (not isNonEmptyArray(ctx.poolUids))",
        "\t\t\tand (not isNonEmptyArray(ctx.codes))",
        "\t\t\tand (not isNonEmptyArray(ctx.poolCodes))",
        "\t\tif uiEnabled and typeof(id)==\"string\" and id:sub(1,5)==\"kito.\" and noTargetGiven then",
        "\t\t\tlocal player = (ctx and ctx.player) or (state and state.player)",
        "\t\t\tif player then",
        "\t\t\t\tlocal runId = resolveRunId(state, ctx)",
        "\t\t\t\tif runId == nil then return false, \"子：runId が未指定です\" end",
        "\t\t\t\tlocal Core = lazyGetKitoPickCore()",
        "\t\t\t\tif Core and type(Core.startFor)==\"function\" then",
        "\t\t\t\t\tCore.startFor(player, { runId = runId }, id, ctx.preferKind)",
        "\t\t\t\t\treturn true, \"子：候補を表示しました。対象を選んでください。\"",
        "\t\t\t\tend",
        "\t\t\tend",
        "\t\tend",
        "\tend",
        "",
        "\t-- 内蔵（dotのみ）",
        "\tif id == Kito.ID.TORA or id == \"kito.tora\" then return effect_tora(state, ctx)",
        "\telseif id == Kito.ID.USHI or id == \"kito.ushi\" then return effect_ushi(state, ctx)",
        "\telseif id == Kito.ID.MI   or id == \"kito.mi\"   then return effect_mi(state, ctx)",
        "\telseif id == Kito.ID.TORI or id == \"kito.tori\" then return effect_tori(state, ctx) end",
        "",
        "\t-- Deck/Effects系（dotのみ）",
        "\tif typeof(id)==\"string\" and id:sub(1,5) == \"kito.\" then",
        "\t\treturn apply_via_effects(id, \"子\", state, ctx, ctx.preferKind)",
        "\tend",
        "",
        "\treturn false, (\"子：未知の前回ID: %s\"):format(tostring(id))",
        "end",
        "",
        "--========================",
        "-- ディスパッチ（dotのみ）",
        "--========================",
        "local DISPATCH = {",
        "\t[Kito.ID.USHI] = effect_ushi,",
        "\t[Kito.ID.TORA] = effect_tora,",
        "\t[Kito.ID.TORI] = effect_tori,",
        "\t[Kito.ID.MI]   = effect_mi,",
        "\t[Kito.ID.KO]   = effect_ko,",
        "",
        "\t[\"kito.ushi\"]  = effect_ushi,",
        "\t[\"kito.tora\"]  = effect_tora,",
        "\t[\"kito.tori\"]  = effect_tori,",
        "\t[\"kito.mi\"]    = effect_mi,",
        "\t[\"kito.ko\"]    = effect_ko,",
        "}",
        "",
        "--========================",
        "-- ブリッジ（同義dot→モジュールID）※アンダーバーKEYは廃止",
        "--========================",
        "local KITO_BRIDGE_MAP = {",
        "\t[\"kito.usagi\"]         = { label = \"卯\", moduleId = \"kito.usagi_ribbon\" },",
        "\t[\"kito.usagi_ribbon\"]  = { label = \"卯\", moduleId = \"kito.usagi_ribbon\" },",
        "",
        "\t[\"kito.uma\"]           = { label = \"午\", moduleId = \"kito.uma_seed\" },",
        "\t[\"kito.uma_seed\"]      = { label = \"午\", moduleId = \"kito.uma_seed\" },",
        "",
        "\t[\"kito.inu\"]           = { label = \"戌\", moduleId = \"kito.inu_chaff2\" },",
        "\t[\"kito.inu_chaff2\"]    = { label = \"戌\", moduleId = \"kito.inu_chaff2\" },",
        "\t[\"kito.inu_two_chaff\"] = { label = \"戌\", moduleId = \"kito.inu_chaff2\" },",
        "",
        "\t[\"kito.i\"]             = { label = \"亥\", moduleId = \"kito.i_sake\" },",
        "\t[\"kito.i_sake\"]        = { label = \"亥\", moduleId = \"kito.i_sake\" },",
        "",
        "\t[\"kito.hitsuji\"]       = { label = \"未\", moduleId = \"kito.hitsuji_prune\" },",
        "\t[\"kito.hitsuji_prune\"] = { label = \"未\", moduleId = \"kito.hitsuji_prune\" },",
        "}",
        "",
        "--========================",
        "-- 公開 I/F",
        "--========================",
        "function Kito.apply(effectId, state, ctx)",
        "\tif typeof(state) ~= \"table\" then return false, \"state が無効です\" end",
        "",
        "\tlocal key = tostring(effectId or \"\")",
        "",
        "\t-- ★明示拒否：アンダーバーIDは非対応（変換しない）",
        "\tif typeof(key)==\"string\" and key:sub(1,5) == \"kito_\" then",
        "\t\treturn false, (\"不明な祈祷ID（kito_ は非対応です。kito. を使用してください）: %s\"):format(key)",
        "\tend",
        "",
        "\t-- 内蔵ディスパッチ（dot）",
        "\tlocal fn = DISPATCH[key]",
        "\tif fn then",
        "\t\tlocal ok, message = fn(state, ctx)",
        "\t\treturn ok == true, tostring(message or \"\")",
        "\tend",
        "",
        "\t-- ブリッジ（dot → モジュールID）",
        "\tlocal br = KITO_BRIDGE_MAP[key]",
        "\tif br then",
        "\t\treturn apply_via_effects(br.moduleId, br.label, state, ctx, nil)",
        "\tend",
        "",
        "\t-- Deck/Effects 登録IDへ直通（dotのみ）",
        "\tif typeof(key)==\"string\" and key:sub(1,5)==\"kito.\" then",
        "\t\treturn apply_via_effects(key, \"祈祷\", state, ctx, nil)",
        "\tend",
        "",
        "\treturn false, (\"不明な祈祷ID: %s\"):format(tostring(effectId))",
        "end",
        "",
        "-- ★公開：KitoPickServerから成功時に呼ぶ“記録フック”",
        "function Kito.recordFromPick(state:any, effectModuleId:string, payload:any?, meta:any?)"
      ],
      "truncated": true,
      "analysis": {
        "waitForChild": [
          "SharedModules",
          "Config",
          "Deck",
          "EffectsRegistry",
          "Balance",
          "KitoPickCore"
        ],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/server/ShopEffects/Omamori.lua",
      "ext": "lua",
      "binary": false,
      "size": 0,
      "mtime": "2025-09-11T23:13:06.791171+00:00",
      "head": [],
      "truncated": false,
      "analysis": {
        "waitForChild": [],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/server/ShopEffects/Sai.lua",
      "ext": "lua",
      "binary": false,
      "size": 988,
      "mtime": "2025-09-10T06:54:59.894040+00:00",
      "head": [
        "-- v0.9.0 祭事：レベル管理のみ（効果数値は Scoring 側）",
        "local RS = game:GetService(\"ReplicatedStorage\")",
        "local RunDeckUtil = require(RS:WaitForChild(\"SharedModules\"):WaitForChild(\"RunDeckUtil\"))",
        "",
        "local Sai = {}",
        "",
        "-- 表記揺れを festivalId に正規化",
        "function Sai.normalize(effectId)",
        "\tif type(effectId) ~= \"string\" then return nil end",
        "\t-- 例: \"sai_kasu\", \"sai_kasu_lv1\", \"sai_kasu_1\" → \"sai_kasu\"",
        "\tlocal base = effectId:match(\"^(sai_%a+)\")",
        "\treturn base",
        "end",
        "",
        "local function msg(s) return s end",
        "",
        "function Sai.apply(effectId, state, _ctx)",
        "\tif typeof(state) ~= \"table\" then",
        "\t\treturn false, msg(\"state が無効です\")",
        "\tend",
        "\tlocal fid = Sai.normalize(effectId)",
        "\tif not fid then",
        "\t\treturn false, msg((\"不明な祭事ID: %s\"):format(tostring(effectId)))",
        "\tend",
        "\t-- Lua では +1 は不可。1 を渡す。",
        "\tlocal newLv = RunDeckUtil.incMatsuri(state, fid, 1)",
        "\treturn true, msg((\"%s Lv+1（累計Lv=%d）\"):format(fid, newLv))",
        "end",
        "",
        "return Sai"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [
          "SharedModules",
          "RunDeckUtil"
        ],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/server/ShopEffects/Spectral.lua",
      "ext": "lua",
      "binary": false,
      "size": 1966,
      "mtime": "2025-09-11T23:20:37.065447+00:00",
      "head": [
        "-- ServerScriptService/ShopEffects/Spectral.lua",
        "-- v0.9.0 スペクタル効果（MVP）",
        "-- 公開I/F:",
        "--   apply(effectId: string, state: table, ctx: {lang?: \"ja\"|\"en\"}) -> (ok:boolean, message:string)",
        "--",
        "-- いまは「黒天（Black Hole）」のみ実装：",
        "--   すべての祭事（Matsuri）レベルを +1",
        "",
        "local RS = game:GetService(\"ReplicatedStorage\")",
        "local RunDeckUtil = require(RS:WaitForChild(\"SharedModules\"):WaitForChild(\"RunDeckUtil\"))",
        "",
        "local Spectral = {}",
        "",
        "--========================",
        "-- 設定：対応するeffectId",
        "--========================",
        "local ACCEPT_IDS = {",
        "\t[\"spectral_blackhole\"] = true,  -- 本命",
        "\t[\"spec_blackhole\"]     = true,  -- 略称",
        "\t[\"spectral_kuroten\"]   = true,  -- 和名寄り",
        "\t[\"spec_kuroten\"]       = true,",
        "\t[\"kito_spec_blackhole\"]= true,  -- 互換（当面）",
        "}",
        "",
        "--========================",
        "-- 祭事IDの定義（Scoring.luaに合わせる）",
        "--========================",
        "local FESTIVAL_IDS = {",
        "\t\"sai_kasu\",",
        "\t\"sai_tanzaku\",",
        "\t\"sai_tane\",",
        "\t\"sai_akatan\",",
        "\t\"sai_aotan\",",
        "\t\"sai_inoshika\",",
        "\t\"sai_hanami\",",
        "\t\"sai_tsukimi\",",
        "\t\"sai_sanko\",",
        "\t\"sai_goko\",",
        "}",
        "",
        "local function msgJa(s) return s end",
        "local function msgEn(s) return s end",
        "",
        "--========================",
        "-- メイン",
        "--========================",
        "function Spectral.apply(effectId, state, ctx)",
        "\tlocal id = typeof(effectId) == \"string\" and string.lower(effectId) or nil",
        "\tif not id or not ACCEPT_IDS[id] then",
        "\t\treturn false, msgJa((\"未対応の効果ID: %s\"):format(tostring(effectId)))",
        "\tend",
        "\tif typeof(state) ~= \"table\" then",
        "\t\treturn false, msgJa(\"state が無効です\")",
        "\tend",
        "",
        "\t-- 黒天：すべての祭事レベルを +1",
        "\tfor _, fid in ipairs(FESTIVAL_IDS) do",
        "\t\tRunDeckUtil.incMatsuri(state, fid, 1)",
        "\tend",
        "",
        "\tlocal lang = (ctx and ctx.lang) or \"ja\"",
        "\tif lang == \"en\" then",
        "\t\treturn true, msgEn(\"Black Hole: All festivals +1\")",
        "\telse",
        "\t\treturn true, msgJa(\"黒天：すべての祭事を +1\")",
        "\tend",
        "end",
        "",
        "return Spectral"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [
          "SharedModules",
          "RunDeckUtil"
        ],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 2
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/server/TalismanService.lua",
      "ext": "lua",
      "binary": false,
      "size": 6966,
      "mtime": "2025-09-19T12:59:21.707149+00:00",
      "head": [
        "-- ServerScriptService/TalismanService.server.lua",
        "-- v0.9.7-P2a  Talisman server bridge（正本：サーバのみが更新）",
        "--  - C->S: PlaceOnSlot(index:number, talismanId:string)",
        "--  - S->C: TalismanPlaced({ unlocked:number, slots:{string?} })",
        "--  - 正本: state.run.talisman を RunDeckUtil.ensureTalisman で必ず用意し、唯一ここで更新",
        "--  - 他モジュール用API: TalismanService.ensureFor(player, reason?) を公開（起動/入店時などから呼ぶ）",
        "--  - Remotes が無い場合は ReplicatedStorage.Remotes に生成",
        "",
        "local RS        = game:GetService(\"ReplicatedStorage\")",
        "local Players   = game:GetService(\"Players\")",
        "",
        "-- ===== Logger =====================================================",
        "local Logger = require(RS:WaitForChild(\"SharedModules\"):WaitForChild(\"Logger\"))",
        "local LOG    = Logger.scope(\"TalismanService\")",
        "",
        "-- ===== Dependencies ==============================================",
        "local SharedModules = RS:WaitForChild(\"SharedModules\")",
        "local StateHub      = require(SharedModules:WaitForChild(\"StateHub\"))",
        "local RunDeckUtil   = require(SharedModules:WaitForChild(\"RunDeckUtil\"))",
        "",
        "-- ===== Remotes folder / events ===================================",
        "local RemotesFolder = RS:FindFirstChild(\"Remotes\") or (function()",
        "  local f = Instance.new(\"Folder\")",
        "  f.Name = \"Remotes\"",
        "  f.Parent = RS",
        "  return f",
        "end)()",
        "",
        "local function ensureRemote(name: string): RemoteEvent",
        "  local ex = RemotesFolder:FindFirstChild(name)",
        "  if ex and ex:IsA(\"RemoteEvent\") then return ex end",
        "  local e = Instance.new(\"RemoteEvent\")",
        "  e.Name = name",
        "  e.Parent = RemotesFolder",
        "  return e",
        "end",
        "",
        "local PlaceOnSlotRE    = ensureRemote(\"PlaceOnSlot\")     -- C->S",
        "local TalismanPlacedRE = ensureRemote(\"TalismanPlaced\")  -- S->C (ACK)",
        "",
        "-- ===== Defaults / helpers ========================================",
        "",
        "local DEFAULT_MAX     = 6",
        "local DEFAULT_UNLOCK  = 2",
        "",
        "local function toInt(n:any, def:number)",
        "  local v = tonumber(n)",
        "  if not v then return def end",
        "  return math.floor(v)",
        "end",
        "",
        "local function clone6(src:{any}?): {any}",
        "  local s = src or {}",
        "  return { s[1], s[2], s[3], s[4], s[5], s[6] }",
        "end",
        "",
        "-- RunDeckUtil を使って正本を必ず用意",
        "local function ensureBoardOnState(s:any)",
        "  -- ensureTalisman は「不足キーを補うだけ」で既存値は壊さない前提",
        "  local b = RunDeckUtil.ensureTalisman(s, { minUnlocked = DEFAULT_UNLOCK, maxSlots = DEFAULT_MAX })",
        "  -- 念のため型ガード",
        "  if typeof(b) ~= \"table\" then",
        "    -- フォールバック：極小限の形",
        "    s.run = s.run or {}",
        "    s.run.talisman = {",
        "      maxSlots = DEFAULT_MAX,",
        "      unlocked = DEFAULT_UNLOCK,",
        "      slots    = { nil, nil, nil, nil, nil, nil },",
        "    }",
        "    b = s.run.talisman",
        "  end",
        "  -- 丸め（max/unlocked/slots）",
        "  b.maxSlots = toInt(b.maxSlots, DEFAULT_MAX)",
        "  b.unlocked = math.max(0, math.min(b.maxSlots, toInt(b.unlocked, DEFAULT_UNLOCK)))",
        "  if typeof(b.slots) ~= \"table\" then",
        "    b.slots = { nil, nil, nil, nil, nil, nil }",
        "  else",
        "    b.slots = clone6(b.slots)",
        "  end",
        "  return b",
        "end",
        "",
        "local function isIndexPlaceable(b:any, idx:number)",
        "  if typeof(b) ~= \"table\" or typeof(idx) ~= \"number\" then return false end",
        "  if idx < 1 then return false end",
        "  local max = toInt(b.maxSlots, DEFAULT_MAX)",
        "  local unl = toInt(b.unlocked , DEFAULT_UNLOCK)",
        "  if idx > max or idx > unl then return false end",
        "  return true",
        "end",
        "",
        "-- ===== Public API (他サービスから呼べる) =========================",
        "local Service = {}",
        "",
        "-- 起動/新規ラン開始/ショップ入店前などで呼ぶ想定",
        "function Service.ensureFor(plr: Player, reason: string?)",
        "  local s = StateHub.get(plr)",
        "  if not s then",
        "    LOG.debug(\"ensureFor skipped (no state yet) | user=%s reason=%s\", plr and plr.Name or \"?\", tostring(reason or \"\"))",
        "    return",
        "  end",
        "  local b = ensureBoardOnState(s)",
        "  LOG.debug(\"ensureFor | user=%s unlocked=%d max=%d reason=%s\", plr.Name, toInt(b.unlocked,0), toInt(b.maxSlots,0), tostring(reason or \"\"))",
        "end",
        "",
        "-- ===== Server wiring =============================================",
        "",
        "-- PlaceOnSlot: 唯一の“確定”経路。ここでのみ正本を更新する",
        "PlaceOnSlotRE.OnServerEvent:Connect(function(plr: Player, idx:any, talismanId:any)",
        "  local s = StateHub.get(plr)",
        "  if not s then",
        "    LOG.warn(\"ignored: no state | user=%s\", plr and plr.Name or \"?\")",
        "    return",
        "  end",
        "",
        "  -- 正本を必ず用意（不足キーだけ補う）",
        "  local board = ensureBoardOnState(s)",
        "",
        "  local index = toInt(idx, -1)",
        "  local id    = tostring(talismanId or \"\")",
        "  if id == \"\" then",
        "    LOG.warn(\"ignored: invalid id | user=%s idx=%s id=%s\", plr.Name, tostring(idx), tostring(talismanId))",
        "    -- 現状をACKしてクライアントのプレビューを解消",
        "    if TalismanPlacedRE then",
        "      TalismanPlacedRE:FireClient(plr, { unlocked = board.unlocked, slots = clone6(board.slots) })",
        "    end",
        "    return",
        "  end",
        "",
        "  if not isIndexPlaceable(board, index) then",
        "    LOG.info(\"rejected: out-of-range | user=%s idx=%d unlocked=%s max=%s\",",
        "      plr.Name, index, tostring(board.unlocked), tostring(board.maxSlots))",
        "    if TalismanPlacedRE then",
        "      TalismanPlacedRE:FireClient(plr, { unlocked = board.unlocked, slots = clone6(board.slots) })",
        "    end",
        "    return",
        "  end",
        "",
        "  -- 既に埋まっていたら上書きしない（クライアント側は空スロットにしか送らない想定）",
        "  if board.slots[index] ~= nil then",
        "    LOG.info(\"noop: slot already filled | user=%s idx=%d id(existing)=%s\",",
        "      plr.Name, index, tostring(board.slots[index]))",
        "    if TalismanPlacedRE then",
        "      TalismanPlacedRE:FireClient(plr, { unlocked = board.unlocked, slots = clone6(board.slots) })",
        "    end",
        "    return",
        "  end",
        "",
        "  -- ===== 正本を更新（唯一の更新点） =====",
        "  board.slots[index] = id",
        "  LOG.info(\"placed | user=%s idx=%d id=%s unlocked=%d\", plr.Name, index, id, toInt(board.unlocked, DEFAULT_UNLOCK))",
        "",
        "  -- ACK: 最新の board 断面",
        "  if TalismanPlacedRE then",
        "    TalismanPlacedRE:FireClient(plr, { unlocked = board.unlocked, slots = clone6(board.slots) })",
        "  end",
        "",
        "  -- 状態を即時にクライアントへ（RunScreen/ShopScreen は st.run.talisman を参照）",
        "  local okPush, err = pcall(function() StateHub.pushState(plr) end)",
        "  if not okPush then",
        "    LOG.warn(\"StateHub.pushState failed: %s\", tostring(err))",
        "  end",
        "end)",
        "",
        "-- 起動時の軽い保険：プロフィール/state が載り次第 ensure",
        "Players.PlayerAdded:Connect(function(plr: Player)",
        "  -- StateHub.get が準備できるまで少しだけ待つ（最大 ~3秒 / 6回）",
        "  task.defer(function()",
        "    for i=1,6 do",
        "      local s = StateHub.get(plr)",
        "      if s then",
        "        Service.ensureFor(plr, \"PlayerAdded\")",
        "        return",
        "      end",
        "      task.wait(0.5)",
        "    end",
        "    LOG.debug(\"PlayerAdded ensure skipped (no state by timeout) | user=%s\", plr.Name)",
        "  end)",
        "end)",
        "",
        "LOG.info(\"ready (PlaceOnSlot/TalismanPlaced wired)\")",
        "",
        "return Service"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [
          "SharedModules",
          "Logger",
          "SharedModules",
          "StateHub",
          "RunDeckUtil"
        ],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/server/UiResync.server.lua",
      "ext": "lua",
      "binary": false,
      "size": 4564,
      "mtime": "2025-09-17T01:39:30.789509+00:00",
      "head": [
        "-- ServerScriptService/UiResync.server.lua",
        "-- 画面を開いた直後などに、手札/場/取り札/状態/得点をまとめて再送する（安全化版）",
        "-- 改善点:",
        "--  1) 結果表示中 (s.phase==\"result\") は余計な再送を避ける",
        "--  2) 連打/重複のデバウンス (同一プレイヤー 0.3s 以内は捨てる)",
        "--  3) null/型の安全化（落ちないようにデフォルト値を用意）",
        "--  4) P1-3: Logger 導入（print/warn を LOG.* に置換）",
        "",
        "local RS = game:GetService(\"ReplicatedStorage\")",
        "",
        "-- Logger",
        "local Logger = require(RS:WaitForChild(\"SharedModules\"):WaitForChild(\"Logger\"))",
        "local LOG    = Logger.scope(\"UiResync\")",
        "",
        "-- Remotes フォルダ",
        "local RemotesFolder = RS:FindFirstChild(\"Remotes\") or (function()",
        "\tlocal f = Instance.new(\"Folder\")",
        "\tf.Name = \"Remotes\"",
        "\tf.Parent = RS",
        "\treturn f",
        "end)()",
        "",
        "local function ensureRemote(name: string)",
        "\treturn RemotesFolder:FindFirstChild(name) or (function()",
        "\t\tlocal e = Instance.new(\"RemoteEvent\")",
        "\t\te.Name = name",
        "\t\te.Parent = RemotesFolder",
        "\t\treturn e",
        "\tend)()",
        "end",
        "",
        "-- Remotes",
        "local ReqSyncUI  = ensureRemote(\"ReqSyncUI\")  -- C->S: 全UI再送要求",
        "local HandPush   = ensureRemote(\"HandPush\")",
        "local FieldPush  = ensureRemote(\"FieldPush\")",
        "local TakenPush  = ensureRemote(\"TakenPush\")",
        "local ScorePush  = ensureRemote(\"ScorePush\")",
        "-- StatePush は自前で送らず、StateHub.pushState(plr) に任せる",
        "",
        "-- 状態/採点",
        "local StateHub = require(RS.SharedModules.StateHub)",
        "local Scoring  = require(RS.SharedModules.Scoring)",
        "",
        "--==================================================",
        "-- 内部ユーティリティ",
        "--==================================================",
        "",
        "-- 準備できたかどうかの判定（季節が進んだ直後は数フレーム待つことがある）",
        "local function isReadyState(s)",
        "\tif not s then return false end",
        "\t-- どれかが成立していれば「準備OK」",
        "\tif (s.target or 0) > 0 then return true end",
        "\tif s.board and #s.board > 0 then return true end",
        "\tif s.hand  and #s.hand  > 0 then return true end",
        "\treturn false",
        "end",
        "",
        "-- 直近の再同期要求の時刻（プレイヤー毎）",
        "local _lastSyncAt : {[Player]: number} = {}",
        "local DEBOUNCE_SEC = 0.3",
        "",
        "-- 安全に再採点（nilでも落ちない）",
        "local function safeEvaluate(taken:any)",
        "\tlocal ok, total, roles, detail = pcall(function()",
        "\t\tlocal t, r, d = Scoring.evaluate(taken or {})",
        "\t\treturn t or 0, r or {}, d or {mon=0, pts=0}",
        "\tend)",
        "\tif ok then",
        "\t\treturn total, roles, detail",
        "\telse",
        "\t\tLOG.warn(\"Scoring.evaluate failed; fallback to zeros\")",
        "\t\treturn 0, {}, {mon=0, pts=0}",
        "\tend",
        "end",
        "",
        "--==================================================",
        "-- 本体",
        "--==================================================",
        "ReqSyncUI.OnServerEvent:Connect(function(plr)",
        "\t-- デバウンス（連打・重複抑制）",
        "\tlocal now = os.clock()",
        "\tlocal prev = _lastSyncAt[plr]",
        "\tif prev and (now - prev) < DEBOUNCE_SEC then",
        "\t\t-- 近すぎる要求は無視（必要ならデバッグログ）",
        "\t\t-- LOG.debug(\"debounced | user=%s dt=%.2f\", plr.Name, now - prev)",
        "\t\treturn",
        "\tend",
        "\t_lastSyncAt[plr] = now",
        "",
        "\t-- 状態取得",
        "\tlocal s = StateHub.get(plr)",
        "\tif not s then return end",
        "",
        "\tLOG.info(",
        "\t\t\"lens | user=%s deck=%d hand=%d board=%d taken=%d phase=%s\",",
        "\t\tplr.Name, #(s.deck or {}), #(s.hand or {}), #(s.board or {}), #(s.taken or {}), tostring(s.phase)",
        "\t)",
        "",
        "\t-- 結果表示中は余計な再送を避ける（State だけ押し直したい場合は pushState を残す）",
        "\tif s.phase == \"result\" then",
        "\t\t-- 結果モーダル中に UI を書き換えると見た目がチラつくため抑制",
        "\t\t-- 必要なら StateHub.pushState(plr) を有効化",
        "\t\t-- StateHub.pushState(plr)",
        "\t\treturn",
        "\tend",
        "",
        "\t-- ラウンド準備完了を軽く待機（最大 ~0.5s 程度）",
        "\tlocal tries = 0",
        "\twhile not isReadyState(s) and tries < 30 do",
        "\t\ttries += 1",
        "\t\ttask.wait(0.016) -- 1~2フレーム",
        "\t\ts = StateHub.get(plr)",
        "\t\tif not s then return end",
        "\tend",
        "",
        "\t-- 手札/場/取り札を再送",
        "\tHandPush:FireClient(plr, s.hand or {})",
        "\tFieldPush:FireClient(plr, s.board or {})",
        "\tTakenPush:FireClient(plr, s.taken or {})",
        "",
        "\t-- 得点は「現在の取り札」で再採点（季節跨ぎの残留を避ける）",
        "\tlocal total, roles, detail = safeEvaluate(s.taken)",
        "\tLOG.debug(\"ScorePush types: %s %s %s\", typeof(total), typeof(roles), typeof(detail))",
        "\tScorePush:FireClient(plr, total, roles, detail)",
        "",
        "\t-- ★ 状態は StateHub 側の正規ルートで送る（target/hands/rerolls/deckLeft などが埋まる）",
        "\tStateHub.pushState(plr)",
        "end)"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [
          "SharedModules",
          "Logger"
        ],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/shared/CardEngine.lua",
      "ext": "lua",
      "binary": false,
      "size": 297,
      "mtime": "2025-09-25T05:32:40.432226+00:00",
      "head": [
        "-- src/shared/CardEngine.lua",
        "-- Compatibility shim: 旧パスを新正本（Deck/CardEngine）へ委譲",
        "local RS = game:GetService(\"ReplicatedStorage\")",
        "local Shared = RS:WaitForChild(\"SharedModules\")",
        "local Deck   = Shared:WaitForChild(\"Deck\")",
        "return require(Deck:WaitForChild(\"CardEngine\"))"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [
          "SharedModules",
          "Deck",
          "CardEngine"
        ],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/shared/CardImageMap.lua",
      "ext": "lua",
      "binary": false,
      "size": 2570,
      "mtime": "2025-09-02T18:34:05.542093+00:00",
      "head": [
        "-- CardImageMap.lua",
        "-- 花札カードコード \"MMKK\" → 画像アセットID を返す",
        "",
        "local M = {}",
        "",
        "local MAP = {",
        "    [\"0101\"] = \"rbxassetid://110167745897883\",",
        "    [\"0102\"] = \"rbxassetid://93498789800334\",",
        "    [\"0103\"] = \"rbxassetid://133103780529932\",",
        "    [\"0104\"] = \"rbxassetid://136642428171395\",",
        "    [\"0201\"] = \"rbxassetid://132367699583326\",",
        "    [\"0202\"] = \"rbxassetid://134345351537648\",",
        "    [\"0203\"] = \"rbxassetid://135460725123644\",",
        "    [\"0204\"] = \"rbxassetid://89684082664904\",",
        "    [\"0301\"] = \"rbxassetid://73087713183501\",",
        "    [\"0302\"] = \"rbxassetid://81006823565341\",",
        "    [\"0303\"] = \"rbxassetid://77095165720075\",",
        "    [\"0304\"] = \"rbxassetid://85687753998090\",",
        "    [\"0401\"] = \"rbxassetid://101221945021316\",",
        "    [\"0402\"] = \"rbxassetid://77347428563752\",",
        "    [\"0403\"] = \"rbxassetid://127837226730063\",",
        "    [\"0404\"] = \"rbxassetid://79125904590127\",",
        "    [\"0501\"] = \"rbxassetid://87645273830323\",",
        "    [\"0502\"] = \"rbxassetid://94073795568801\",",
        "    [\"0503\"] = \"rbxassetid://124341314863776\",",
        "    [\"0504\"] = \"rbxassetid://132896106155044\",",
        "    [\"0601\"] = \"rbxassetid://132616480451100\",",
        "    [\"0602\"] = \"rbxassetid://124641940516424\",",
        "    [\"0603\"] = \"rbxassetid://79357236000602\",",
        "    [\"0604\"] = \"rbxassetid://135731147846223\",",
        "    [\"0701\"] = \"rbxassetid://132491564698284\",",
        "    [\"0702\"] = \"rbxassetid://91828122936676\",",
        "    [\"0703\"] = \"rbxassetid://86256620341158\",",
        "    [\"0704\"] = \"rbxassetid://82894930779013\",",
        "    [\"0801\"] = \"rbxassetid://87397718241868\",",
        "    [\"0802\"] = \"rbxassetid://128009125288955\",",
        "    [\"0803\"] = \"rbxassetid://131676198229808\",",
        "    [\"0804\"] = \"rbxassetid://87762677221025\",",
        "    [\"0901\"] = \"rbxassetid://88046091737846\",",
        "    [\"0902\"] = \"rbxassetid://71524569266527\",",
        "    [\"0903\"] = \"rbxassetid://83957385030032\",",
        "    [\"0904\"] = \"rbxassetid://128219000509304\",",
        "    [\"1001\"] = \"rbxassetid://74033195147455\",",
        "    [\"1002\"] = \"rbxassetid://73399886152412\",",
        "    [\"1003\"] = \"rbxassetid://88813065287954\",",
        "    [\"1004\"] = \"rbxassetid://110394629504663\",",
        "    [\"1101\"] = \"rbxassetid://84968179943715\",",
        "    [\"1102\"] = \"rbxassetid://71616531834256\",",
        "    [\"1103\"] = \"rbxassetid://86303293761445\",",
        "    [\"1104\"] = \"rbxassetid://119930258214285\",",
        "    [\"1201\"] = \"rbxassetid://127632446804292\",",
        "    [\"1202\"] = \"rbxassetid://103521315547130\",",
        "    [\"1203\"] = \"rbxassetid://123439248481137\",",
        "    [\"1204\"] = \"rbxassetid://119065326867849\",",
        "}",
        "",
        "function M.get(code)",
        "    return MAP[code]",
        "end",
        "",
        "function M.getByMonthIdx(month, idx)",
        "    return MAP[string.format(\"%02d%02d\", month, idx)]",
        "end",
        "",
        "return M"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/shared/Deck/CardEngine.lua",
      "ext": "lua",
      "binary": false,
      "size": 6308,
      "mtime": "2025-09-25T05:32:22.832277+00:00",
      "head": [
        "-- src/shared/Deck/CardEngine.lua",
        "-- v0.9.3 Deck/CardEngine（Deck所有・月札48 + month/idx 同梱スナップショット）",
        "-- 目的：",
        "--  - CardEngine を Deck 階層へ移管（Deck が正本）",
        "--  - snapshot.entries に {code, kind, month, idx} を同梱（v=2のまま後方互換）",
        "--  - buildDeckFromSnapshot() は month/idx を優先、無ければ code から復元",
        "",
        "local M = {}",
        "",
        "-- 48枚の定義（1103 を ribbon に修正済）",
        "M.cardsByMonth = {",
        "\t[1]  = { {kind=\"bright\", name=\"松に鶴\", tags={\"animal\",\"crane\"}}, {kind=\"ribbon\", name=\"赤短(字あり)\", tags={\"aka\",\"jiari\"}}, {kind=\"chaff\"}, {kind=\"chaff\"} },",
        "\t[2]  = { {kind=\"seed\",   name=\"鶯\", tags={\"animal\"}},            {kind=\"ribbon\", name=\"赤短(字あり)\", tags={\"aka\",\"jiari\"}}, {kind=\"chaff\"}, {kind=\"chaff\"} },",
        "\t[3]  = { {kind=\"bright\", name=\"桜に幕\"},                          {kind=\"ribbon\", name=\"赤短(字あり)\", tags={\"aka\",\"jiari\"}}, {kind=\"chaff\"}, {kind=\"chaff\"} },",
        "\t[4]  = { {kind=\"seed\",   name=\"ホトトギス\", tags={\"animal\"}},    {kind=\"ribbon\", name=\"赤短(無地)\",  tags={\"aka\"}},          {kind=\"chaff\"}, {kind=\"chaff\"} },",
        "\t[5]  = { {kind=\"seed\",   name=\"八つ橋\", tags={\"thing\"}},         {kind=\"ribbon\", name=\"赤短(無地)\",  tags={\"aka\"}},          {kind=\"chaff\"}, {kind=\"chaff\"} },",
        "\t[6]  = { {kind=\"seed\",   name=\"蝶\", tags={\"animal\"}},            {kind=\"ribbon\", name=\"青短(字あり)\", tags={\"ao\",\"jiari\"}},  {kind=\"chaff\"}, {kind=\"chaff\"} },",
        "\t[7]  = { {kind=\"seed\",   name=\"猪\", tags={\"animal\"}},            {kind=\"ribbon\", name=\"赤短(無地)\",  tags={\"aka\"}},          {kind=\"chaff\"}, {kind=\"chaff\"} },",
        "\t[8]  = { {kind=\"bright\", name=\"芒に月\"},                          {kind=\"seed\",   name=\"雁\", tags={\"animal\"}},                {kind=\"chaff\"}, {kind=\"chaff\"} },",
        "\t[9]  = { {kind=\"seed\",   name=\"盃\", tags={\"thing\",\"sake\"}},       {kind=\"ribbon\", name=\"青短(字あり)\", tags={\"ao\",\"jiari\"}},  {kind=\"chaff\"}, {kind=\"chaff\"} },",
        "\t[10] = { {kind=\"seed\",   name=\"鹿\", tags={\"animal\"}},            {kind=\"ribbon\", name=\"青短(字あり)\", tags={\"ao\",\"jiari\"}},  {kind=\"chaff\"}, {kind=\"chaff\"} },",
        "\t[11] = { {kind=\"bright\", name=\"柳に雨\", tags={\"rain\"}},          {kind=\"seed\",   name=\"燕\", tags={\"animal\"}},                {kind=\"ribbon\", name=\"短冊(無地)\"}, {kind=\"chaff\"} },",
        "\t[12] = { {kind=\"bright\", name=\"桐に鳳凰\", tags={\"animal\",\"phoenix\"}}, {kind=\"chaff\"}, {kind=\"chaff\"}, {kind=\"chaff\"} },",
        "}",
        "",
        "-- ── 基本ユーティリティ ──────────────────────────",
        "function M.toCode(month, idx) return string.format(\"%02d%02d\", month, idx) end",
        "function M.fromCode(code)",
        "\tcode = tostring(code or \"\")",
        "\treturn tonumber(code:sub(1,2)), tonumber(code:sub(3,4))",
        "end",
        "",
        "-- 初期48枚デッキを構築",
        "function M.buildDeck()",
        "\tlocal deck = {}",
        "\tfor m=1,12 do",
        "\t\tfor i,c in ipairs(M.cardsByMonth[m]) do",
        "\t\t\ttable.insert(deck, {",
        "\t\t\t\tmonth=m, idx=i, kind=c.kind, name=c.name,",
        "\t\t\t\ttags=c.tags and table.clone(c.tags) or nil,",
        "\t\t\t\tcode = M.toCode(m,i),",
        "\t\t\t})",
        "\t\tend",
        "\tend",
        "\treturn deck",
        "end",
        "",
        "-- シャッフル",
        "function M.shuffle(deck, seed)",
        "\tlocal rng = seed and Random.new(seed) or Random.new()",
        "\tfor i = #deck, 2, -1 do",
        "\t\tlocal j = rng:NextInteger(1, i)",
        "\t\tdeck[i], deck[j] = deck[j], deck[i]",
        "\tend",
        "end",
        "",
        "-- n枚引き（末尾から）",
        "function M.draw(deck, n)",
        "\tlocal hand = {}",
        "\tfor i=1,n do hand[i] = table.remove(deck) end",
        "\treturn hand",
        "end",
        "",
        "-- ── スナップショット（正本 v2）────────────────────",
        "-- v2: entries = { {code, kind, month, idx}, ... }  ← month/idx を**同梱**",
        "function M.buildSnapshot(deck)",
        "\tlocal codes, hist, entries = {}, {}, {}",
        "\tfor _, c in ipairs(deck or {}) do",
        "\t\tlocal m = tonumber(c.month or 0) or 0",
        "\t\tlocal i = tonumber(c.idx   or 0) or 0",
        "\t\tlocal code = c.code or ((m>0 and i>0) and M.toCode(m,i) or nil)",
        "\t\tif code then",
        "\t\t\ttable.insert(codes, code)",
        "\t\t\thist[code] = (hist[code] or 0) + 1",
        "\t\t\ttable.insert(entries, {",
        "\t\t\t\tcode  = code,",
        "\t\t\t\tkind  = c.kind,",
        "\t\t\t\tmonth = (m>0) and m or nil,",
        "\t\t\t\tidx   = (i>0) and i or nil,",
        "\t\t\t})",
        "\t\tend",
        "\tend",
        "\treturn { v=2, count=#codes, codes=codes, histogram=hist, entries=entries }",
        "end",
        "",
        "-- v2 を優先（month/idx を使い、無ければ code から復元）→ 完全デッキへ",
        "function M.buildDeckFromSnapshot(snap)",
        "\tif typeof(snap) ~= \"table\" then return {} end",
        "",
        "\t-- v2 entries 優先",
        "\tif typeof(snap.entries) == \"table\" and #snap.entries > 0 then",
        "\t\tlocal out = {}",
        "\t\tfor _, e in ipairs(snap.entries) do",
        "\t\t\tlocal m = tonumber(e.month or 0) or 0",
        "\t\t\tlocal i = tonumber(e.idx   or 0) or 0",
        "\t\t\tlocal code = e.code",
        "\t\t\tif (m<=0 or i<=0) and type(code)==\"string\" then",
        "\t\t\t\tlocal pm, pi = M.fromCode(code)",
        "\t\t\t\tm = (m>0 and m) or pm",
        "\t\t\t\ti = (i>0 and i) or pi",
        "\t\t\tend",
        "\t\t\tif m and i and m>=1 and m<=12 and i>=1 and i<=4 then",
        "\t\t\t\tlocal def = M.cardsByMonth[m] and M.cardsByMonth[m][i]",
        "\t\t\t\tif def then",
        "\t\t\t\t\ttable.insert(out, {",
        "\t\t\t\t\t\tmonth=m, idx=i,",
        "\t\t\t\t\t\tkind = e.kind or def.kind,",
        "\t\t\t\t\t\tname = def.name,",
        "\t\t\t\t\t\ttags = def.tags and table.clone(def.tags) or nil,",
        "\t\t\t\t\t\tcode = M.toCode(m,i),",
        "\t\t\t\t\t})",
        "\t\t\t\tend",
        "\t\t\tend",
        "\t\tend",
        "\t\treturn out",
        "\tend",
        "",
        "\t-- v1 互換（codes 配列のみ）",
        "\tlocal out = {}",
        "\tfor _, code in ipairs(snap.codes or {}) do",
        "\t\tlocal m,i = M.fromCode(code)",
        "\t\tlocal def = (M.cardsByMonth[m] or {})[i]",
        "\t\tif def then",
        "\t\t\ttable.insert(out, {",
        "\t\t\t\tmonth=m, idx=i, kind=def.kind, name=def.name,",
        "\t\t\t\ttags=def.tags and table.clone(def.tags) or nil, code=M.toCode(m,i),",
        "\t\t\t})",
        "\t\tend",
        "\tend",
        "\treturn out",
        "end",
        "",
        "-- ── 変換ユーティリティ ───────────────────────────",
        "local function isNonBright(card) return card and card.kind ~= \"bright\" end",
        "",
        "function M.pickRandomIndex(deck, predicate, rng)",
        "\tlocal idxs = {}",
        "\tfor i,c in ipairs(deck) do if predicate(c) then table.insert(idxs,i) end end",
        "\tif #idxs == 0 then return nil end",
        "\tlocal r = rng and rng:NextInteger(1, #idxs) or math.random(1, #idxs)",
        "\treturn idxs[r]",
        "end",
        "",
        "function M.convertRandomNonBrightToBright(deck, rng)",
        "\tlocal idx = M.pickRandomIndex(deck, isNonBright, rng)",
        "\tif not idx then return false, nil end",
        "\tdeck[idx].kind = \"bright\"",
        "\treturn true, idx",
        "end",
        "",
        "return M"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/shared/Deck/DeckOps.lua",
      "ext": "lua",
      "binary": false,
      "size": 5606,
      "mtime": "2025-09-24T13:17:31.472810+00:00",
      "head": [
        "-- ReplicatedStorage/SharedModules/Deck/DeckOps.lua",
        "-- Step C: 変更ロジックの純関数群（入力Card -> 新Card）",
        "-- 仕様根拠:",
        "--  - Step C 要件: convertKind / convertMonth / attachTag / attachEffect / overrideImage【Deck_Refactor_FullSpec_Workplan.md】",
        "--  - tags/effects は「安全に無効（空 or nil）」初期で、指定が無ければ現状維持【DeckSchema Step A 確定版】",
        "",
        "local RS = game:GetService(\"ReplicatedStorage\")",
        "local Shared = RS:WaitForChild(\"SharedModules\")",
        "",
        "-- 依存（兄弟/既存）",
        "local DeckSchema = require(Shared:WaitForChild(\"Deck\"):WaitForChild(\"DeckSchema\"))",
        "local CardEngine = require(Shared:WaitForChild(\"CardEngine\"))",
        "",
        "local M = {}",
        "",
        "--========================",
        "-- 内部ヘルパ",
        "--========================",
        "",
        "local function _cloneArray(src)",
        "\tif typeof(src) ~= \"table\" then return {} end",
        "\t-- Luauの table.clone は配列/連想どちらも浅いコピー",
        "\treturn table.clone(src)",
        "end",
        "",
        "local function _deriveCode(month: number, idx: number): string",
        "\tlocal m = math.clamp(math.floor(tonumber(month) or 0), 1, 12)",
        "\t-- 月ごとの定義数に合わせて idx をクランプ（通常 1..4）",
        "\tlocal defM = CardEngine.cardsByMonth[m]",
        "\tlocal maxIdx = (typeof(defM) == \"table\") and #defM or 4",
        "\tlocal i = math.clamp(math.floor(tonumber(idx) or 0), 1, math.max(1, maxIdx))",
        "\treturn string.format(\"%02d%02d\", m, i)",
        "end",
        "",
        "local function _safeDefaults(card:any): any",
        "\t-- DeckSchema.defaults() をベースに、既存カードの値で上書き",
        "\t-- ※浅いコピーで十分（tags/effects は別途クローン）",
        "\tlocal base = DeckSchema.defaults()",
        "\tfor k, v in pairs(card or {}) do",
        "\t\tbase[k] = v",
        "\tend",
        "\t-- 可変配列は必ずクローン",
        "\tbase.tags    = _cloneArray(base.tags)",
        "\tbase.effects = _cloneArray(base.effects)",
        "\treturn base",
        "end",
        "",
        "-- 同月で targetKind を持つ定義の idx を探索（無ければ現在の idx を返す）",
        "local function _findIdxOfKindInMonth(month: number, targetKind: string, fallbackIdx: number): number",
        "\tlocal m = math.clamp(math.floor(tonumber(month) or 0), 1, 12)",
        "\tlocal defM = CardEngine.cardsByMonth[m]",
        "\tif typeof(defM) == \"table\" then",
        "\t\tfor i, def in ipairs(defM) do",
        "\t\t\tif def and tostring(def.kind) == tostring(targetKind) then",
        "\t\t\t\treturn i",
        "\t\t\tend",
        "\t\tend",
        "\t\treturn math.clamp(fallbackIdx or 1, 1, #defM)",
        "\tend",
        "\treturn math.clamp(fallbackIdx or 1, 1, 4)",
        "end",
        "",
        "-- 新しいカードテーブルを返す（codeの一貫更新）",
        "local function _with(card:any, patch:any): any",
        "\tlocal c = _safeDefaults(card)",
        "\tfor k, v in pairs(patch or {}) do",
        "\t\tc[k] = v",
        "\tend",
        "\t-- month/idx から code を再派生",
        "\tc.code = _deriveCode(c.month, c.idx)",
        "\treturn c",
        "end",
        "",
        "--========================",
        "-- 公開API（純関数）",
        "--========================",
        "",
        "-- kind を変換。idx は「同月で指定kindを持つ定義」の idx に合わせる（なければ現idxをクランプして維持）",
        "function M.convertKind(card:any, toKind:string): any",
        "\tlocal src = _safeDefaults(card)",
        "\tlocal tgtKind = tostring(toKind or src.kind)",
        "\tlocal nextIdx = _findIdxOfKindInMonth(src.month, tgtKind, src.idx)",
        "\treturn _with(src, { kind = tgtKind, idx = nextIdx })",
        "end",
        "",
        "-- month を変換。idx は「新しい月で現kindが存在すればそのidx、無ければ現idxをクランプ」",
        "function M.convertMonth(card:any, toMonth:number): any",
        "\tlocal src = _safeDefaults(card)",
        "\tlocal m = math.clamp(math.floor(tonumber(toMonth) or src.month), 1, 12)",
        "\tlocal defM = CardEngine.cardsByMonth[m]",
        "\tlocal nextIdx",
        "\tif typeof(defM) == \"table\" then",
        "\t\t-- 同kind の idx を優先探索",
        "\t\tlocal found = nil",
        "\t\tfor i, def in ipairs(defM) do",
        "\t\t\tif def and tostring(def.kind) == tostring(src.kind) then found = i; break end",
        "\t\tend",
        "\t\tif found then",
        "\t\t\tnextIdx = found",
        "\t\telse",
        "\t\t\t-- 見つからなければ既存 idx をクランプ",
        "\t\t\tnextIdx = math.clamp(src.idx or 1, 1, #defM)",
        "\t\tend",
        "\telse",
        "\t\tnextIdx = math.clamp(src.idx or 1, 1, 4)",
        "\tend",
        "\treturn _with(src, { month = m, idx = nextIdx })",
        "end",
        "",
        "-- タグを付与（配列tagsに重複なしで追加）",
        "-- keyのみ  or key,val（valがある場合は \"key:value\" の文字列として追加）",
        "function M.attachTag(card:any, key:any, val:any?): any",
        "\tlocal src = _safeDefaults(card)",
        "\tlocal tags = _cloneArray(src.tags)",
        "\tif typeof(key) == \"table\" then",
        "\t\t-- テーブル渡しは配列想定：すべて追加",
        "\t\tfor _, t in ipairs(key) do",
        "\t\t\tlocal s = tostring(t)",
        "\t\t\tlocal exists = false",
        "\t\t\tfor _, x in ipairs(tags) do if x == s then exists = true; break end end",
        "\t\t\tif not exists then table.insert(tags, s) end",
        "\t\tend",
        "\telse",
        "\t\tlocal s = tostring(key)",
        "\t\tif val ~= nil and val ~= true then",
        "\t\t\ts = (\"%s:%s\"):format(s, tostring(val))",
        "\t\tend",
        "\t\tlocal exists = false",
        "\t\tfor _, x in ipairs(tags) do if x == s then exists = true; break end end",
        "\t\tif not exists then table.insert(tags, s) end",
        "\tend",
        "\treturn _with(src, { tags = tags })",
        "end",
        "",
        "-- エフェクトを付与（effects 配列の末尾に追加。文字列/テーブルどちらも許容）",
        "function M.attachEffect(card:any, spec:any): any",
        "\tlocal src = _safeDefaults(card)",
        "\tlocal effects = _cloneArray(src.effects)",
        "\ttable.insert(effects, spec)",
        "\treturn _with(src, { effects = effects })",
        "end",
        "",
        "-- 画像差し替え（nil指定で解除）。最終決定は ViewAdapter: imageOverride ?? CardImageMap.get(code)",
        "function M.overrideImage(card:any, assetId:string?): any",
        "\tlocal src = _safeDefaults(card)",
        "\tlocal v",
        "if assetId == nil then",
        "\tv = nil",
        "else",
        "\tv = tostring(assetId)",
        "end",
        "return _with(src, { imageOverride = v })",
        "end",
        "",
        "return M"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [
          "SharedModules",
          "Deck",
          "DeckSchema",
          "CardEngine"
        ],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/shared/Deck/DeckRegistry.lua",
      "ext": "lua",
      "binary": false,
      "size": 14606,
      "mtime": "2025-09-27T12:34:39.246111+00:00",
      "head": [
        "-- ReplicatedStorage/SharedModules/Deck/DeckRegistry.lua",
        "-- v0.9.3+uid +dumpSnapshot DeckRegistry（ラン別の共有レジストリ）",
        "-- 役割:",
        "--   - runId 単位で v3 形式の deck store（{v=3, entries=[...] }）を保持",
        "--   - state(run.configSnapshot / state.deck など) から初期化/補完",
        "--   - v1/v2 スナップショットも CardEngine で復元して v3 entries へ正規化",
        "--   - ★ entries に uid を必ず付与（code 重複でも一意に識別できる）",
        "--   - ★ UID 指定での 1枚差し替えユーティリティを提供",
        "--   - ★ dumpSnapshot を追加（v3 store → Round.newRound(opts.deckSnapshot) 互換形式へ）",
        "",
        "-- 依存:",
        "--   - CardEngine（buildDeckFromSnapshot / buildSnapshot / toCode / fromCode / buildDeck）",
        "--   - RunDeckUtil（任意）: snapshot(state) があれば使う",
        "--   - Logger（任意）: scope(\"DeckRegistry\")",
        "",
        "local RS     = game:GetService(\"ReplicatedStorage\")",
        "local Shared = RS:WaitForChild(\"SharedModules\")",
        "",
        "local CardEngine = require(Shared:WaitForChild(\"CardEngine\"))",
        "",
        "local RunDeckUtil do",
        "\tlocal ok, mod = pcall(function()",
        "\t\treturn require(Shared:WaitForChild(\"RunDeckUtil\"))",
        "\tend)",
        "\tRunDeckUtil = ok and mod or nil",
        "end",
        "",
        "local Logger do",
        "\tlocal ok, mod = pcall(function()",
        "\t\treturn require(Shared:WaitForChild(\"Logger\"))",
        "\tend)",
        "\tLogger = ok and mod or { scope=function() return { info=function()end, warn=function()end, debug=function()end } end }",
        "end",
        "local LOG = Logger.scope(\"DeckRegistry\")",
        "",
        "local M = {}",
        "",
        "-- メモリレジストリ: { [runId] = { v=3, entries={...} } }",
        "local _byRunId : {[any]: any} = {}",
        "",
        "-- ─────────────────────────────────────────────────────────────",
        "-- 内部ユーティリティ",
        "-- ─────────────────────────────────────────────────────────────",
        "",
        "local function _cloneEntryLike(e:any)",
        "\tif typeof(e) ~= \"table\" then return nil end",
        "\treturn {",
        "\t\tuid   = e.uid,  -- ★透過（無ければ後で採番）",
        "\t\tcode  = tostring(e.code or \"\"),",
        "\t\tkind  = e.kind,",
        "\t\tmonth = e.month,",
        "\t\tidx   = e.idx,",
        "\t\tname  = e.name,  -- 任意",
        "\t\ttags  = typeof(e.tags)==\"table\" and table.clone(e.tags) or nil,",
        "\t}",
        "end",
        "",
        "local function _toV3Store(entries:any)",
        "\tlocal out = {}",
        "\tif typeof(entries) == \"table\" then",
        "\t\tfor _, e in ipairs(entries) do",
        "\t\t\tlocal c = _cloneEntryLike(e)",
        "\t\t\tif c then",
        "\t\t\t\t-- month/idx が無いなら code から補完",
        "\t\t\t\tlocal m = tonumber(c.month or 0) or 0",
        "\t\t\t\tlocal i = tonumber(c.idx   or 0) or 0",
        "\t\t\t\tif (m <= 0 or i <= 0) and typeof(c.code) == \"string\" and #c.code >= 4 then",
        "\t\t\t\t\tlocal pm, pi = CardEngine.fromCode(c.code)",
        "\t\t\t\t\tif m <= 0 then c.month = pm end",
        "\t\t\t\t\tif i <= 0 then c.idx   = pi end",
        "\t\t\t\tend",
        "\t\t\t\t-- code が無いなら month/idx から生成",
        "\t\t\t\tif (not c.code or c.code == \"\") and c.month and c.idx then",
        "\t\t\t\t\tc.code = CardEngine.toCode(c.month, c.idx)",
        "\t\t\t\tend",
        "\t\t\t\tif c.code and c.code ~= \"\" then",
        "\t\t\t\t\ttable.insert(out, c)",
        "\t\t\t\tend",
        "\t\t\tend",
        "\t\tend",
        "\tend",
        "\treturn { v=3, entries=out }",
        "end",
        "",
        "local function _resolveRunId(ctx:any)",
        "\tif typeof(ctx) ~= \"table\" then return nil end",
        "\t-- 直下候補",
        "\tif ctx.runId then return ctx.runId end",
        "\tif ctx.deckRunId then return ctx.deckRunId end",
        "\tif ctx.id then return ctx.id end",
        "\tif ctx.runID then return ctx.runID end",
        "\tif ctx.deckRunID then return ctx.deckRunID end",
        "\t-- run サブツリー",
        "\tlocal run = ctx.run",
        "\tif typeof(run) == \"table\" then",
        "\t\treturn run.runId or run.deckRunId or run.id or run.runID or run.deckRunID",
        "\tend",
        "\treturn nil",
        "end",
        "",
        "-- state → 初期スナップ（優先順: run.configSnapshot → RunDeckUtil.snapshot(state) → state.deck）",
        "local function _snapshotFromState(state:any)",
        "\tif typeof(state) ~= \"table\" then return nil end",
        "\tstate.run = state.run or {}",
        "",
        "\t-- 1) 正本: run.configSnapshot",
        "\tif typeof(state.run.configSnapshot) == \"table\" then",
        "\t\treturn state.run.configSnapshot",
        "\tend",
        "",
        "\t-- 2) 任意: RunDeckUtil.snapshot",
        "\tif RunDeckUtil and typeof(RunDeckUtil.snapshot) == \"function\" then",
        "\t\tlocal ok, snap = pcall(function() return RunDeckUtil.snapshot(state) end)",
        "\t\tif ok and typeof(snap) == \"table\" then",
        "\t\t\treturn snap",
        "\t\tend",
        "\tend",
        "",
        "\t-- 3) 後方互換: state.deck（配列から v2 snapshot）",
        "\tif typeof(state.deck) == \"table\" and #state.deck > 0 then",
        "\t\tlocal ok, snap = pcall(function()",
        "\t\t\treturn CardEngine.buildSnapshot(state.deck)",
        "\t\tend)",
        "\t\tif ok and typeof(snap) == \"table\" then",
        "\t\t\treturn snap",
        "\t\tend",
        "\tend",
        "",
        "\treturn nil",
        "end",
        "",
        "-- v1/v2 snapshot → entries（CardEngine が {month,idx,kind,name,tags,code} を返す想定）",
        "local function _entriesFromSnapshot(snap:any)",
        "\tif typeof(snap) ~= \"table\" then return {} end",
        "\tlocal ok, deck = pcall(function() return CardEngine.buildDeckFromSnapshot(snap) end)",
        "\tif not ok or typeof(deck) ~= \"table\" then return {} end",
        "\treturn deck",
        "end",
        "",
        "-- uid 生成: \"CODE#NNN\"（NNN は 001 起算の 3桁ゼロパディング）",
        "local function _uidFor(code:string, seq:number)",
        "\treturn string.format(\"%s#%03d\", tostring(code or \"\"), math.max(1, math.floor(tonumber(seq) or 1)))",
        "end",
        "",
        "-- entries に uid を採番（既存 uid は尊重）。code ごとに連番を採番する。",
        "local function _ensureUids(store:any)",
        "\tif typeof(store) ~= \"table\" or typeof(store.entries) ~= \"table\" then return store end",
        "\tlocal seqByCode = {} :: {[string]: number}",
        "\t-- 既存 uid を走査して、code ごとの最大連番を把握",
        "\tfor _, e in ipairs(store.entries) do",
        "\t\tlocal code = tostring(e.code or \"\")",
        "\t\tif e.uid and typeof(e.uid) == \"string\" then",
        "\t\t\tlocal seq = tonumber(string.match(e.uid, \"#(%d+)$\") or \"\")",
        "\t\t\tif seq then",
        "\t\t\t\tlocal cur = seqByCode[code] or 0",
        "\t\t\t\tif seq > cur then seqByCode[code] = seq end",
        "\t\t\tend",
        "\t\tend",
        "\tend",
        "\t-- 未付与に順次採番",
        "\tfor _, e in ipairs(store.entries) do",
        "\t\tif not e.uid or e.uid == \"\" then",
        "\t\t\tlocal code = tostring(e.code or \"\")",
        "\t\t\tlocal nextSeq = (seqByCode[code] or 0) + 1",
        "\t\t\te.uid = _uidFor(code, nextSeq)",
        "\t\t\tseqByCode[code] = nextSeq",
        "\t\tend",
        "\tend",
        "\treturn store",
        "end",
        "",
        "-- 旧→新への uid 継承（新 entries に uid が無い場合、code の出現順で割り当て）",
        "local function _inheritUids(prev:any, incoming:any)",
        "\tif typeof(incoming) ~= \"table\" or typeof(incoming.entries) ~= \"table\" then return _toV3Store({}) end",
        "\tlocal newStore = _toV3Store(incoming.entries)",
        "",
        "\t-- 新側に uid がほぼ載っていないケース向けに、code 毎のキューを作る",
        "\tlocal byCodeQueues : {[string]: {any}} = {}",
        "\tif typeof(prev) == \"table\" and typeof(prev.entries) == \"table\" then",
        "\t\tfor _, e in ipairs(prev.entries) do",
        "\t\t\tlocal code = tostring(e.code or \"\")",
        "\t\t\tbyCodeQueues[code] = byCodeQueues[code] or {}",
        "\t\t\ttable.insert(byCodeQueues[code], e) -- 先頭から消費",
        "\t\tend",
        "\tend",
        "",
        "\tfor _, e in ipairs(newStore.entries) do",
        "\t\tif not e.uid or e.uid == \"\" then",
        "\t\t\tlocal code = tostring(e.code or \"\")",
        "\t\t\tlocal q = byCodeQueues[code]",
        "\t\t\tif q and #q > 0 then",
        "\t\t\t\t-- 旧から1つ借りる",
        "\t\t\t\tlocal old = table.remove(q, 1)",
        "\t\t\t\te.uid = old.uid",
        "\t\t\tend",
        "\t\tend",
        "\tend",
        "",
        "\t-- まだ uid が空いているものは採番",
        "\t_ensureUids(newStore)",
        "\treturn newStore",
        "end",
        "",
        "-- 文字列整形ユーティリティ（ログ用）",
        "local function _short(e:any)",
        "\tif typeof(e) ~= \"table\" then return \"-\" end",
        "\treturn string.format(\"uid=%s code=%s kind=%s tags=%d\",",
        "\t\ttostring(e.uid or \"?\"),",
        "\t\ttostring(e.code or \"?\"),",
        "\t\ttostring(e.kind or \"?\"),",
        "\t\t(typeof(e.tags)==\"table\" and #e.tags) or 0",
        "\t)",
        "end",
        "",
        "-- ─────────────────────────────────────────────────────────────",
        "-- 公開API",
        "-- ─────────────────────────────────────────────────────────────",
        "",
        "-- state/runCtx から runId を解決し、未登録なら v3 store を生成して登録（uid も付与）",
        "function M.ensureFromContext(ctx:any): boolean",
        "\tlocal runId = _resolveRunId(ctx)",
        "\tif not runId then",
        "\t\tLOG.info(\"[DeckRegistry] ensure: missing runId in ctx; skip\")",
        "\t\treturn false",
        "\tend",
        "\tif _byRunId[runId] and typeof(_byRunId[runId].entries) == \"table\" and #_byRunId[runId].entries > 0 then",
        "\t\treturn true",
        "\tend",
        "",
        "\t-- state からスナップを得て v3 化",
        "\tlocal snap    = _snapshotFromState(ctx)",
        "\tlocal entries = _entriesFromSnapshot(snap)",
        "\tlocal store   = _toV3Store(entries)",
        "\t_ensureUids(store)",
        "",
        "\tif typeof(store.entries) == \"table\" and #store.entries > 0 then",
        "\t\t_byRunId[runId] = store",
        "\t\tLOG.info(\"[DeckRegistry] ensure: set run=%s size=%d (from snapshot)\", tostring(runId), #store.entries)",
        "\t\treturn true",
        "\tend",
        "",
        "\t-- それでも無ければ、CardEngine.buildDeck() から初期48で作る",
        "\tlocal ok, deck48 = pcall(function() return CardEngine.buildDeck() end)",
        "\tif ok and typeof(deck48) == \"table\" then",
        "\t\tlocal s = _toV3Store(deck48)",
        "\t\t_ensureUids(s)",
        "\t\t_byRunId[runId] = s",
        "\t\tLOG.warn(\"[DeckRegistry] ensure: fallback to base 48 for run=%s\", tostring(runId))",
        "\t\treturn true",
        "\tend",
        "",
        "\treturn false",
        "end",
        "",
        "-- 旧呼び名互換（ログにも合わせておく）",
        "M.ensure = M.ensureFromContext",
        "",
        "-- 直接書き込み（uid を整えて保存）",
        "function M.write(runId:any, v3store:any)",
        "\tif not runId then return false end",
        "\tif typeof(v3store) ~= \"table\" or typeof(v3store.entries) ~= \"table\" then return false end",
        "\tlocal s = _toV3Store(v3store.entries)",
        "\t_ensureUids(s)",
        "\t_byRunId[runId] = s",
        "\tLOG.info(\"[DeckRegistry] write: run=%s size=%d\", tostring(runId), #(s.entries or {}))",
        "\treturn true",
        "end",
        "",
        "-- v2 snapshot を書き込み（移行/保存用）※uid 採番あり",
        "function M.writeSnapshot(runId:any, snap:any)",
        "\tif not runId then return false end",
        "\tlocal entries = _entriesFromSnapshot(snap)",
        "\tlocal s = _toV3Store(entries)",
        "\t_ensureUids(s)",
        "\t_byRunId[runId] = s",
        "\tLOG.info(\"[DeckRegistry] writeSnapshot: run=%s size=%d\", tostring(runId), #(s.entries or {}))",
        "\treturn true",
        "end",
        "",
        "-- 読み出し",
        "function M.read(runId:any)",
        "\tif not runId then return { v=3, entries={} } end",
        "\tlocal s = _byRunId[runId]",
        "\tif s and typeof(s.entries) == \"table\" then",
        "\t\treturn s",
        "\tend",
        "\treturn { v=3, entries={} }",
        "end",
        "",
        "-- 破棄",
        "function M.clear(runId:any)",
        "\t_byRunId[runId] = nil",
        "\tLOG.info(\"[DeckRegistry] clear: run=%s\", tostring(runId))",
        "end",
        "",
        "-- デバッグ/枚数",
        "function M.size(runId:any): number",
        "\tlocal s = M.read(runId)",
        "\treturn typeof(s.entries)==\"table\" and #s.entries or 0",
        "end"
      ],
      "truncated": true,
      "analysis": {
        "waitForChild": [
          "SharedModules",
          "CardEngine",
          "RunDeckUtil",
          "Logger"
        ],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/shared/Deck/DeckSchema.lua",
      "ext": "lua",
      "binary": false,
      "size": 4442,
      "mtime": "2025-09-25T12:08:27.966921+00:00",
      "head": [
        "-- SharedModules/Deck/DeckSchema.lua",
        "-- v3 schema 定義 + v2→v3 補完（Load時に一括）",
        "-- ✅ 正式 kind は英語 4 種のみ: \"bright\" | \"seed\" | \"ribbon\" | \"chaff\"",
        "--    旧/和名は入力時だけエイリアスとして受理し、内部では必ず英語へ正規化",
        "",
        "local RS = game:GetService(\"ReplicatedStorage\")",
        "",
        "local M = {}",
        "",
        "--==============================",
        "-- 定数・規約（確定）",
        "--==============================",
        "M.KINDS = { bright=true, seed=true, ribbon=true, chaff=true } -- ✅英語のみ",
        "M.HIKARI_MONTHS = { [1]=true, [3]=true, [8]=true, [11]=true, [12]=true }",
        "",
        "-- 旧/和名 → 正式英語 の対応",
        "local KIND_ALIAS = {",
        "\t-- 日本語/旧称 → 英語",
        "\thikari = \"bright\",",
        "\ttane   = \"seed\",",
        "\ttan    = \"ribbon\",",
        "\tkas    = \"chaff\",",
        "",
        "\t-- つづり揺れ・互換（念のため）",
        "\tlight  = \"bright\",",
        "\tbright = \"bright\",",
        "\tseed   = \"seed\",",
        "\tribbon = \"ribbon\",",
        "\tchaff  = \"chaff\",",
        "}",
        "",
        "-- 公開: kind 正規化（他モジュールでも使えるように）",
        "function M.normalizeKind(k:any): string",
        "\tlocal s = tostring(k or \"\"):lower()",
        "\tlocal norm = KIND_ALIAS[s]",
        "\tif norm and M.KINDS[norm] then return norm end",
        "\t-- 不正は chaff にフォールバック（※ここで bright を潰さない）",
        "\treturn \"chaff\"",
        "end",
        "",
        "--==============================",
        "-- ユーティリティ",
        "--==============================",
        "local function cloneShallow(t)",
        "\tif type(t) ~= \"table\" then return t end",
        "\tlocal out = {}",
        "\tfor k,v in pairs(t) do out[k] = v end",
        "\treturn out",
        "end",
        "",
        "local function toMonth(n)",
        "\tn = tonumber(n)",
        "\tif not n then return nil end",
        "\tif n >= 1 and n <= 12 then return n end",
        "\treturn nil",
        "end",
        "",
        "local function deriveMonthFromCode(code: string?)",
        "\tif type(code) ~= \"string\" or #code < 2 then return nil end",
        "\tlocal mm = tonumber(string.sub(code, 1, 2))",
        "\treturn toMonth(mm)",
        "end",
        "",
        "--==============================",
        "-- defaults（1枚分）",
        "--==============================",
        "export type CardEntryV3 = {",
        "\tcode: string,",
        "\tkind: string,           -- \"bright\" | \"seed\" | \"ribbon\" | \"chaff\"",
        "\tmonth: number,          -- 1..12",
        "\ttags: {string},         -- []",
        "\teffects: {string},      -- []",
        "\timageOverride: string?, -- nil or rbxassetid://...",
        "}",
        "",
        "function M.defaults(entryLike: any): CardEntryV3",
        "\tlocal src = typeof(entryLike) == \"table\" and entryLike or {}",
        "\tlocal dst = {}",
        "",
        "\tdst.code = (type(src.code) == \"string\" and src.code) or \"\"",
        "",
        "\tdst.month = toMonth(src.month) or deriveMonthFromCode(dst.code) or 1",
        "",
        "\t-- ✅ kind は必ず英語4種へ正規化（未知は chaff）",
        "\tdst.kind = M.normalizeKind(src.kind)",
        "",
        "\t-- tags",
        "\tlocal tags = src.tags",
        "\tif typeof(tags) ~= \"table\" then tags = {} end",
        "\tdst.tags = {}",
        "\tfor _, v in ipairs(tags) do",
        "\t\tif type(v) == \"string\" then table.insert(dst.tags, v) end",
        "\tend",
        "",
        "\t-- effects",
        "\tlocal effects = src.effects",
        "\tif typeof(effects) ~= \"table\" then effects = {} end",
        "\tdst.effects = {}",
        "\tfor _, v in ipairs(effects) do",
        "\t\tif type(v) == \"string\" then table.insert(dst.effects, v) end",
        "\tend",
        "",
        "\t-- imageOverride",
        "\tif src.imageOverride == nil or src.imageOverride == \"\" then",
        "\t\tdst.imageOverride = nil",
        "\telse",
        "\t\tdst.imageOverride = tostring(src.imageOverride)",
        "\tend",
        "",
        "\treturn dst",
        "end",
        "",
        "--==============================",
        "-- デッキ全体の補完（v2→v3）",
        "--==============================",
        "export type DeckV3 = {",
        "\tv: number,             -- 3",
        "\tcodes: {string}?,      -- 既存踏襲",
        "\tentries: {CardEntryV3},",
        "\tcount: number?,",
        "}",
        "",
        "function M.normalizeDeck(deckLike: any): DeckV3",
        "\tlocal src = typeof(deckLike) == \"table\" and deckLike or {}",
        "\tlocal out = {}",
        "",
        "\tout.v = 3",
        "\tout.codes = (typeof(src.codes) == \"table\") and cloneShallow(src.codes) or nil",
        "",
        "\tlocal entries = {}",
        "\tif typeof(src.entries) == \"table\" then",
        "\t\tfor i, ent in ipairs(src.entries) do",
        "\t\t\tentries[i] = M.defaults(ent)",
        "\t\tend",
        "\telse",
        "\t\tif typeof(src.codes) == \"table\" then",
        "\t\t\tfor i, code in ipairs(src.codes) do",
        "\t\t\t\tentries[i] = M.defaults({ code = code })",
        "\t\t\tend",
        "\t\telse",
        "\t\t\tentries = {}",
        "\t\tend",
        "\tend",
        "\tout.entries = entries",
        "\tout.count = typeof(src.count) == \"number\" and src.count or #entries",
        "",
        "\treturn out",
        "end",
        "",
        "function M.upgradeToV3(deckLike: any)",
        "\tlocal before = typeof(deckLike) == \"table\" and deckLike or {}",
        "\tlocal after = M.normalizeDeck(before)",
        "",
        "\tlocal changed = (before.v ~= 3)",
        "\t\tor (typeof(before.entries) ~= \"table\")",
        "\t\tor (#(before.entries or {}) ~= #after.entries)",
        "",
        "\treturn after, changed",
        "end",
        "",
        "return M"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/shared/Deck/DeckStore.lua",
      "ext": "lua",
      "binary": false,
      "size": 11494,
      "mtime": "2025-09-27T12:34:56.874980+00:00",
      "head": [
        "-- SharedModules/Deck/DeckStore.lua",
        "-- v3 Deck を **非破壊**で扱うストア（純関数API）",
        "-- 依存: DeckSchema（v2→v3補完/1枚補完）",
        "-- ★ 0.9.x+: すべてのエントリに一意ID(uid)を付与（code連番）し、uidでの操作を追加",
        "",
        "local RS = game:GetService(\"ReplicatedStorage\")",
        "local SharedModules = RS:WaitForChild(\"SharedModules\")",
        "local DeckSchema = require(SharedModules:WaitForChild(\"Deck\"):WaitForChild(\"DeckSchema\"))",
        "",
        "-- ★ DeckRegistry（transact で利用）",
        "local DeckRegistry = require(SharedModules:WaitForChild(\"Deck\"):WaitForChild(\"DeckRegistry\"))",
        "",
        "-- ★ code→month/idx 補完の保険（DeckSchemaで入れば不要だが互換のため同梱）",
        "local CardEngine do",
        "\tlocal ok, mod = pcall(function() return require(SharedModules:WaitForChild(\"CardEngine\")) end)",
        "\tCardEngine = ok and mod or nil",
        "end",
        "",
        "local bit32 = bit32",
        "",
        "local M = {}",
        "",
        "--==================================================",
        "-- ユーティリティ",
        "--==================================================",
        "",
        "local function tableCreate(n:number)",
        "\tn = math.max(0, math.floor(tonumber(n) or 0))",
        "\treturn table.create(n)",
        "end",
        "",
        "local function cloneArray(arr:any)",
        "\tif typeof(arr) ~= \"table\" then return {} end",
        "\tlocal n = #arr",
        "\tlocal out = tableCreate(n)",
        "\tfor i = 1, n do",
        "\t\tout[i] = arr[i]",
        "\tend",
        "\treturn out",
        "end",
        "",
        "-- ★ cloneEntry: DeckSchema.defaults の戻りを尊重しつつ uid を落とさない",
        "local function cloneEntry(e:any)",
        "\t-- DeckSchema.defaults は新テーブルを返す想定",
        "\tlocal ok, res = pcall(function()",
        "\t\treturn DeckSchema.defaults(e)",
        "\tend)",
        "\tlocal out",
        "\tif ok and typeof(res) == \"table\" then",
        "\t\tout = res",
        "\telse",
        "\t\t-- 失敗時は最小限のダミー",
        "\t\tout = {",
        "\t\t\tcode  = e and e.code or \"\",",
        "\t\t\tkind  = e and e.kind or nil,",
        "\t\t\tmonth = e and e.month or nil,",
        "\t\t\tidx   = e and e.idx or nil,",
        "\t\t\tname  = e and e.name or nil,",
        "\t\t\ttags  = e and e.tags or nil,",
        "\t\t}",
        "\tend",
        "\t-- 既存uidが来ていたら保持（後段で最終確定）",
        "\tif e and e.uid and e.uid ~= \"\" then",
        "\t\tout.uid = e.uid",
        "\tend",
        "\treturn out",
        "end",
        "",
        "-- ★ uid採番: codeごとに通番（人間可読/安定）",
        "local function assignUids(entries:any)",
        "\tlocal n = #entries",
        "\tif n == 0 then return entries end",
        "",
        "\t-- code -> seq",
        "\tlocal seqByCode = {}",
        "",
        "\tfor i = 1, n do",
        "\t\tlocal e = entries[i]",
        "\t\t-- code正規化",
        "\t\tlocal code = tostring(e.code or \"\")",
        "",
        "\t\t-- month/idx の保険：なければ code から復元（DeckSchemaで入っていれば何もしない）",
        "\t\tif (not e.month or not e.idx) and CardEngine and code ~= \"\" then",
        "\t\t\tlocal ok, m, idx = pcall(function()",
        "\t\t\t\tlocal mm, ii = CardEngine.fromCode(code)",
        "\t\t\t\treturn mm, ii",
        "\t\t\tend)",
        "\t\t\tif ok then",
        "\t\t\t\te.month = e.month or m",
        "\t\t\t\te.idx   = e.idx   or idx",
        "\t\t\tend",
        "\t\tend",
        "",
        "\t\t-- codeが空のときは month/idx から生成（最悪 \"0000\"）",
        "\t\tif code == \"\" then",
        "\t\t\tlocal mm = tonumber(e.month) or 0",
        "\t\t\tlocal ii = tonumber(e.idx) or 0",
        "\t\t\tcode = string.format(\"%02d%02d\", mm, ii)",
        "\t\t\te.code = code",
        "\t\tend",
        "",
        "\t\t-- 既に uid があれば尊重（重複チェックはしない：外部生成を優先）",
        "\t\tif not e.uid or e.uid == \"\" then",
        "\t\t\tseqByCode[code] = (seqByCode[code] or 0) + 1",
        "\t\t\te.uid = string.format(\"%s#%03d\", code, seqByCode[code])",
        "\t\tend",
        "\tend",
        "\treturn entries",
        "end",
        "",
        "local function normalizeEntries(entriesLike:any)",
        "\tif typeof(entriesLike) ~= \"table\" then return {} end",
        "\tlocal n = #entriesLike",
        "\tlocal out = tableCreate(n)",
        "\tfor i = 1, n do",
        "\t\tout[i] = cloneEntry(entriesLike[i])",
        "\tend",
        "\t-- ★ ここで uid を必ず付与/整える（本質ポイント）",
        "\treturn assignUids(out)",
        "end",
        "",
        "-- Mulberry32（32bit厳守版 / bit32使用）",
        "local function rngMulberry32(seed:any)",
        "\tlocal s = tonumber(seed) or 0",
        "\ts = s % 4294967296",
        "\treturn function()",
        "\t\ts = (s + 0x6D2B79F5) % 4294967296",
        "\t\tlocal t = s",
        "\t\tt = bit32.bxor(t, bit32.rshift(t, 15))",
        "\t\tt = (t * bit32.bor(t, 1)) % 4294967296",
        "\t\tt = bit32.bxor(t, (t + ((bit32.bxor(t, bit32.rshift(t, 7)) * bit32.bor(t, 61)) % 4294967296)) % 4294967296)",
        "\t\tt = bit32.bxor(t, bit32.rshift(t, 14))",
        "\t\treturn (t % 4294967296) / 4294967296",
        "\tend",
        "end",
        "",
        "--==================================================",
        "-- 構築・スナップショット",
        "--==================================================",
        "",
        "function M.fromDeckV3(deckLike:any)",
        "\tlocal v3 = DeckSchema.normalizeDeck(deckLike)",
        "\treturn {",
        "\t\tv = 3,",
        "\t\tentries = normalizeEntries(v3 and v3.entries),",
        "\t}",
        "end",
        "",
        "function M.toDeckV3(store:any)",
        "\tlocal entries = normalizeEntries(store and store.entries)",
        "\tlocal n = #entries",
        "\tlocal codes = tableCreate(n)",
        "\tfor i = 1, n do",
        "\t\tcodes[i] = entries[i].code",
        "\tend",
        "\treturn {",
        "\t\tv = 3,",
        "\t\tcodes = codes,",
        "\t\tentries = entries,",
        "\t\tcount = n,",
        "\t}",
        "end",
        "",
        "--==================================================",
        "-- 基本操作（すべて非破壊）",
        "--==================================================",
        "",
        "function M.size(store:any): number",
        "\tlocal e = store and store.entries",
        "\treturn (typeof(e) == \"table\") and #e or 0",
        "end",
        "",
        "function M.peek(store:any, idx:number?) -- idx 未指定=トップ",
        "\tlocal n = M.size(store)",
        "\tif n == 0 then return nil end",
        "\tidx = math.clamp(math.floor(tonumber(idx or 1) or 1), 1, n)",
        "\treturn store.entries[idx]",
        "end",
        "",
        "-- index の1枚を取り出す（戻り: newStore, takenEntry）",
        "function M.takeAt(store:any, idx:number)",
        "\tlocal n = M.size(store)",
        "\tif n == 0 then return store, nil end",
        "\tidx = math.clamp(math.floor(tonumber(idx) or 1), 1, n)",
        "",
        "\tlocal newEntries = tableCreate(math.max(n - 1, 0))",
        "\tlocal k = 1",
        "\tlocal taken = nil",
        "\tfor i = 1, n do",
        "\t\tlocal e = store.entries[i]",
        "\t\tif i == idx then",
        "\t\t\ttaken = e",
        "\t\telse",
        "\t\t\tnewEntries[k] = e",
        "\t\t\tk += 1",
        "\t\tend",
        "\tend",
        "\treturn { v = 3, entries = newEntries }, taken",
        "end",
        "",
        "-- トップ1枚を取り出す（戻り: newStore, takenEntry）",
        "function M.drawTop(store:any)",
        "\treturn M.takeAt(store, 1)",
        "end",
        "",
        "-- 指定コードの最初の1枚を取り出す（後方互換：なるべく使わない）",
        "function M.takeByCode(store:any, code:string)",
        "\tif type(code) ~= \"string\" then return store, nil end",
        "\tlocal n = M.size(store)",
        "\tif n == 0 then return store, nil end",
        "\tfor i = 1, n do",
        "\t\tlocal e = store.entries[i]",
        "\t\tif e and e.code == code then",
        "\t\t\treturn M.takeAt(store, i)",
        "\t\tend",
        "\tend",
        "\treturn store, nil",
        "end",
        "",
        "-- ★ uid 検索/取り出し（推奨）",
        "function M.findIndexByUid(store:any, uid:string): number?",
        "\tif type(uid) ~= \"string\" then return nil end",
        "\tfor i = 1, M.size(store) do",
        "\t\tlocal e = store.entries[i]",
        "\t\tif e and e.uid == uid then",
        "\t\t\treturn i",
        "\t\tend",
        "\tend",
        "\treturn nil",
        "end",
        "",
        "function M.takeByUid(store:any, uid:string)",
        "\tlocal idx = M.findIndexByUid(store, uid)",
        "\tif not idx then return store, nil end",
        "\treturn M.takeAt(store, idx)",
        "end",
        "",
        "-- 末尾に追加（複数可）",
        "function M.addBottom(store:any, entriesLike:any)",
        "\tlocal base = (store and store.entries) or {}",
        "\tlocal add = normalizeEntries((typeof(entriesLike) == \"table\" and entriesLike) or { entriesLike })",
        "\tlocal nb, na = #base, #add",
        "\tlocal newEntries = tableCreate(nb + na)",
        "\tfor i = 1, nb do newEntries[i] = base[i] end",
        "\tfor j = 1, na do newEntries[nb + j] = add[j] end",
        "\treturn { v = 3, entries = newEntries }",
        "end",
        "",
        "-- 先頭に追加（複数可）",
        "function M.addTop(store:any, entriesLike:any)",
        "\tlocal base = (store and store.entries) or {}",
        "\tlocal add = normalizeEntries((typeof(entriesLike) == \"table\" and entriesLike) or { entriesLike })",
        "\tlocal nb, na = #base, #add",
        "\tlocal newEntries = tableCreate(nb + na)",
        "\tfor i = 1, na do newEntries[i] = add[i] end",
        "\tfor j = 1, nb do newEntries[na + j] = base[j] end",
        "\treturn { v = 3, entries = newEntries }",
        "end",
        "",
        "-- 任意位置に差し替え（1枚）",
        "function M.replaceAt(store:any, idx:number, newEntry:any)",
        "\tlocal n = M.size(store)",
        "\tif n == 0 then return store end",
        "\tidx = math.clamp(math.floor(tonumber(idx) or 1), 1, n)",
        "\tlocal e = cloneEntry(newEntry)",
        "",
        "\tlocal newEntries = cloneArray(store.entries)",
        "\tnewEntries[idx] = e",
        "\treturn { v = 3, entries = newEntries }",
        "end",
        "",
        "-- entries 全体を map（関数に通して置換）",
        "-- f: (entry, index) -> CardEntryV3|nil   nil を返すと削除",
        "function M.map(store:any, f:(any, number)->(any?))",
        "\tif type(f) ~= \"function\" then return store end",
        "\tlocal base = (store and store.entries) or {}",
        "\tlocal out = {}",
        "\tfor i = 1, #base do",
        "\t\tlocal ok, e = pcall(f, base[i], i)",
        "\t\tif ok and e ~= nil then",
        "\t\t\tout[#out + 1] = cloneEntry(e)",
        "\t\tend",
        "\tend",
        "\t-- mapの出力にも uid を保証",
        "\treturn { v = 3, entries = assignUids(out) }",
        "end",
        "",
        "-- コードで検索（最初の index / 見つからなければ nil）",
        "function M.findIndexByCode(store:any, code:string): number?",
        "\tif type(code) ~= \"string\" then return nil end",
        "\tfor i = 1, M.size(store) do",
        "\t\tlocal e = store.entries[i]",
        "\t\tif e and e.code == code then",
        "\t\t\treturn i",
        "\t\tend",
        "\tend",
        "\treturn nil",
        "end",
        "",
        "--=================================================="
      ],
      "truncated": true,
      "analysis": {
        "waitForChild": [
          "SharedModules",
          "Deck",
          "DeckSchema",
          "Deck",
          "DeckRegistry",
          "CardEngine"
        ],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/shared/Deck/DeckViewAdapter.lua",
      "ext": "lua",
      "binary": false,
      "size": 3549,
      "mtime": "2025-09-28T13:40:27.001987+00:00",
      "head": [
        "-- ReplicatedStorage/SharedModules/Deck/DeckViewAdapter.lua",
        "-- Step D: 表示用VM（View Model）アダプタ",
        "-- 仕様根拠:",
        "--  - VM項目: imageId / badges / kind / month / name（確定）【DeckSchema Step A】 ",
        "--  - 画像決定: imageOverride ?? CardImageMap.get(code)（確定）【DeckSchema Step A】",
        "--  - 画像マップ: SharedModules/CardImageMap を利用（既存）【PROJECT_SNAPSHOT.md】",
        "",
        "local RS = game:GetService(\"ReplicatedStorage\")",
        "local Shared = RS:WaitForChild(\"SharedModules\")",
        "",
        "local CardImageMap = require(Shared:WaitForChild(\"CardImageMap\"))",
        "-- ★ 追加: code → month/idx/定義(kind/name) を引くために利用",
        "local CardEngine = require(Shared:WaitForChild(\"CardEngine\"))",
        "",
        "local M = {}",
        "",
        "--========================",
        "-- 内部: 安全ユーティリティ",
        "--========================",
        "",
        "local function _deriveCode(card: any): string",
        "\tif card and card.code then",
        "\t\treturn tostring(card.code)",
        "\tend",
        "\tlocal m = tonumber(card and card.month) or 1",
        "\tlocal i = tonumber(card and card.idx) or 1",
        "\tif m < 1 then m = 1 end; if m > 12 then m = 12 end",
        "\tif i < 1 then i = 1 end; if i > 4 then i = 4 end",
        "\treturn string.format(\"%02d%02d\", m, i)",
        "end",
        "",
        "local function _buildBadges(card: any): {string}",
        "\tlocal out = {}",
        "\tif card and typeof(card.tags) == \"table\" then",
        "\t\tfor _, t in ipairs(card.tags) do",
        "\t\t\ttable.insert(out, tostring(t))",
        "\t\tend",
        "\tend",
        "\tif card and typeof(card.effects) == \"table\" then",
        "\t\tfor _, e in ipairs(card.effects) do",
        "\t\t\tif typeof(e) == \"string\" then",
        "\t\t\t\ttable.insert(out, e)",
        "\t\t\telseif typeof(e) == \"table\" then",
        "\t\t\t\ttable.insert(out, (e.id ~= nil) and tostring(e.id) or \"effect\")",
        "\t\t\tend",
        "\t\tend",
        "\tend",
        "\treturn out",
        "end",
        "",
        "local function _pickImageId(card: any, code: string): string",
        "\tif card and card.imageOverride ~= nil then",
        "\t\treturn tostring(card.imageOverride)",
        "\tend",
        "\tlocal ok, id = pcall(function() return CardImageMap.get(code) end)",
        "\treturn ok and tostring(id) or \"\"",
        "end",
        "",
        "-- ★ 追加: kind/month/name のフォールバック補完",
        "local function _deriveInfo(card:any, code:string)",
        "\tlocal kind  = card and card.kind  or nil",
        "\tlocal month = card and card.month or nil",
        "\tlocal name  = card and card.name  or nil",
        "",
        "\tif month == nil or kind == nil or (name == nil or name == \"\") then",
        "\t\tlocal ok, mm, ii = pcall(function()",
        "\t\t\tlocal m, i = CardEngine.fromCode(code)",
        "\t\t\treturn m, i",
        "\t\tend)",
        "\t\tif ok and mm and ii then",
        "\t\t\tmonth = month or mm",
        "\t\t\tlocal defM = CardEngine.cardsByMonth[mm]",
        "\t\t\tlocal def  = (typeof(defM) == \"table\") and defM[ii] or nil",
        "\t\t\tif kind == nil and def and def.kind then kind = def.kind end",
        "\t\t\tif (name == nil or name == \"\") and def and def.name then name = def.name end",
        "\t\tend",
        "\tend",
        "\treturn kind, month, name",
        "end",
        "",
        "--========================",
        "-- 公開API",
        "--========================",
        "",
        "function M.toVM(card: any): any",
        "\tif typeof(card) ~= \"table\" then",
        "\t\treturn { code = \"0101\", imageId = \"\", badges = {}, kind = \"\", month = 1, name = \"\" }",
        "\tend",
        "",
        "\tlocal code    = _deriveCode(card)",
        "\tlocal imageId = _pickImageId(card, code)",
        "\tlocal badges  = _buildBadges(card)",
        "",
        "\t-- ★ 不足分のみ安全に補完",
        "\tlocal kind, month, name = _deriveInfo(card, code)",
        "",
        "\treturn {",
        "\t\tcode    = code,",
        "\t\timageId = imageId,",
        "\t\tbadges  = badges,",
        "\t\tkind    = kind,",
        "\t\tmonth   = month,",
        "\t\tname    = name,",
        "\t}",
        "end",
        "",
        "function M.toVMs(entries: {any}?): {any}",
        "\tlocal src = (typeof(entries) == \"table\") and entries or {}",
        "\tlocal out = table.create(#src)",
        "\tfor i, card in ipairs(src) do",
        "\t\tout[i] = M.toVM(card)",
        "\tend",
        "\treturn out",
        "end",
        "",
        "return M"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [
          "SharedModules",
          "CardImageMap",
          "CardEngine"
        ],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/shared/Deck/Effects/kito/Hitsuji_Prune.lua",
      "ext": "lua",
      "binary": false,
      "size": 6814,
      "mtime": "2025-10-02T03:42:52.391450+00:00",
      "head": [
        "-- ReplicatedStorage/SharedModules/Deck/Effects/kito/Hitsuji_Prune.lua",
        "-- Sheep (KITO / DOT-ONLY): prune one target card from the deck (UID-first)",
        "--  - Effect ID（唯一の真実）: \"kito.hitsuji_prune\"",
        "--  - Target selection order: payload.uid / payload.uids / payload.poolUids / payload.codes / payload.poolCodes",
        "--  - DeckStore (v3) is immutable; use DeckStore.transact to return a new store",
        "--  - No random fallback removal if no target is provided (safety-first)",
        "--  - Diagnostic logs (scope: Effects.kito.hitsuji_prune)",
        "",
        "return function(Effects)",
        "\t-- Logger (optional)",
        "\tlocal LOG do",
        "\t\tlocal ok, Logger = pcall(function()",
        "\t\t\treturn require(game:GetService(\"ReplicatedStorage\")",
        "\t\t\t\t:WaitForChild(\"SharedModules\")",
        "\t\t\t\t:WaitForChild(\"Logger\"))",
        "\t\tend)",
        "\t\tif ok and Logger and type(Logger.scope) == \"function\" then",
        "\t\t\tLOG = Logger.scope(\"Effects.kito.hitsuji_prune\")",
        "\t\telse",
        "\t\t\tLOG = { info=function(...) end, debug=function(...) end, warn=function(...) warn(string.format(...)) end }",
        "\t\tend",
        "\tend",
        "",
        "\t-- canApply（現状は常に許可。将来ロック等を導入するならここで判定）",
        "\tlocal function canApply(_card:any, _ctx:any)",
        "\t\treturn true, nil",
        "\tend",
        "",
        "\tlocal function handler(ctx)",
        "\t\tlocal payload   = ctx.payload or {}",
        "\t\tlocal uidScalar = (typeof(payload.uid)  == \"string\" and payload.uid)  or nil",
        "\t\tlocal uids      = (typeof(payload.uids) == \"table\"  and payload.uids) or nil",
        "\t\tlocal poolUids  = (typeof(payload.poolUids) == \"table\" and payload.poolUids) or nil",
        "\t\tlocal codes     = (typeof(payload.codes) == \"table\" and payload.codes) or nil -- legacy compat",
        "\t\tlocal poolCodes = (typeof(payload.poolCodes) == \"table\" and payload.poolCodes) or nil -- legacy compat",
        "",
        "\t\t-- ★ DOT-ONLY タグ表記（Kito.apply_via_effects の tag=\"eff:<moduleId>\" と一致）",
        "\t\tlocal tagMark   = tostring(payload.tag or \"eff:kito.hitsuji_prune\")",
        "\t\tlocal runId     = ctx.runId",
        "",
        "\t\tlocal function head5(list)",
        "\t\t\tif typeof(list) ~= \"table\" then return \"-\" end",
        "\t\t\tlocal out, n = {}, math.min(#list, 5)",
        "\t\t\tfor i = 1, n do out[i] = tostring(list[i]) end",
        "\t\t\treturn table.concat(out, \",\")",
        "\t\tend",
        "",
        "\t\tLOG.debug(\"[deps] DeckStore=%s DeckOps=%s CardEngine=%s\",",
        "\t\t\ttostring(ctx.DeckStore ~= nil), tostring(ctx.DeckOps ~= nil), tostring(ctx.CardEngine ~= nil))",
        "\t\tLOG.info(\"[begin] run=%s tag=%s | uid=%s uids[%s]=[%s] poolUids[%s]=[%s] codes[%s]=[%s] poolCodes[%s]=[%s]\",",
        "\t\t\ttostring(runId), tagMark, tostring(uidScalar),",
        "\t\t\ttostring(uids and #uids or 0), head5(uids),",
        "\t\t\ttostring(poolUids and #poolUids or 0), head5(poolUids),",
        "\t\t\ttostring(codes and #codes or 0), head5(codes),",
        "\t\t\ttostring(poolCodes and #poolCodes or 0), head5(poolCodes)",
        "\t\t)",
        "",
        "\t\tlocal function listToSet(list)",
        "\t\t\tif typeof(list) ~= \"table\" then return nil end",
        "\t\t\tlocal s = {}",
        "\t\t\tfor _, v in ipairs(list) do s[v] = true end",
        "\t\t\treturn s",
        "\t\tend",
        "",
        "\t\tlocal uidSet      = listToSet(uids) or {}",
        "\t\tif uidScalar then uidSet[uidScalar] = true end",
        "\t\tlocal poolUidSet  = listToSet(poolUids)",
        "\t\tlocal codeSet     = listToSet(codes)",
        "\t\tlocal poolCodeSet = listToSet(poolCodes)",
        "",
        "\t\t-- pick target（無指定なら削除しない＝安全運用）",
        "\t\tlocal function pickTarget(store)",
        "\t\t\tlocal entries = (store and store.entries) or {}",
        "\t\t\t-- 0) direct UID(s)",
        "\t\t\tif uidSet and next(uidSet) ~= nil then",
        "\t\t\t\tfor _, e in ipairs(entries) do if e and e.uid and uidSet[e.uid] then return e, \"direct-uid\" end end",
        "\t\t\tend",
        "\t\t\t-- 1) direct code(s)",
        "\t\t\tif codeSet and next(codeSet) ~= nil then",
        "\t\t\t\tfor _, e in ipairs(entries) do if e and e.code and codeSet[e.code] then return e, \"direct-code\" end end",
        "\t\t\tend",
        "\t\t\t-- 2) pool by UID",
        "\t\t\tif poolUidSet and next(poolUidSet) ~= nil then",
        "\t\t\t\tfor _, e in ipairs(entries) do if e and e.uid and poolUidSet[e.uid] then return e, \"pool-uid\" end end",
        "\t\t\tend",
        "\t\t\t-- 3) pool by code",
        "\t\t\tif poolCodeSet and next(poolCodeSet) ~= nil then",
        "\t\t\t\tfor _, e in ipairs(entries) do if e and e.code and poolCodeSet[e.code] then return e, \"pool-code\" end end",
        "\t\t\tend",
        "\t\t\treturn nil, \"no-target\"",
        "\t\tend",
        "",
        "\t\tlocal function storeSize(store) return (store and store.entries and #store.entries) or 0 end",
        "",
        "\t\tlocal function removeByUidImmutable(store, uid)",
        "\t\t\tlocal entries = (store and store.entries) or {}",
        "\t\t\tlocal n = #entries",
        "\t\t\tif n == 0 then return store, nil end",
        "\t\t\tlocal out, removed = table.create(n), nil",
        "\t\t\tfor i = 1, n do",
        "\t\t\t\tlocal e = entries[i]",
        "\t\t\t\tif (not removed) and e and e.uid == uid then",
        "\t\t\t\t\tremoved = e -- skip copy",
        "\t\t\t\telse",
        "\t\t\t\t\tout[#out+1] = e",
        "\t\t\t\tend",
        "\t\t\tend",
        "\t\t\treturn removed and { v = 3, entries = out } or store, removed",
        "\t\tend",
        "",
        "\t\tlocal function removeByCodeImmutable(store, code)",
        "\t\t\tlocal entries = (store and store.entries) or {}",
        "\t\t\tlocal n = #entries",
        "\t\t\tif n == 0 then return store, nil end",
        "\t\t\tlocal out, removed = table.create(n), nil",
        "\t\t\tfor i = 1, n do",
        "\t\t\t\tlocal e = entries[i]",
        "\t\t\t\tif (not removed) and e and e.code == code then",
        "\t\t\t\t\tremoved = e",
        "\t\t\t\telse",
        "\t\t\t\t\tout[#out+1] = e",
        "\t\t\t\tend",
        "\t\t\tend",
        "\t\t\treturn removed and { v = 3, entries = out } or store, removed",
        "\t\tend",
        "",
        "\t\tlocal t0 = os.clock()",
        "\t\tLOG.debug(\"[transact] run=%s enter\", tostring(runId))",
        "\t\treturn ctx.DeckStore.transact(runId, function(store)",
        "\t\t\tLOG.debug(\"[store] size=%s\", tostring(storeSize(store)))",
        "",
        "\t\t\tlocal target, reason = pickTarget(store)",
        "\t\t\tif not target then",
        "\t\t\t\tLOG.info(\"[result] no-target (pickReason=%s)\", tostring(reason))",
        "\t\t\t\treturn store, { ok = true, changed = 0, meta = \"no-target\", pickReason = reason }",
        "\t\t\tend",
        "",
        "\t\t\tLOG.debug(\"[target] via=%s {uid=%s code=%s kind=%s month=%s idx=%s}\",",
        "\t\t\t\ttostring(reason), tostring(target.uid), tostring(target.code),",
        "\t\t\t\ttostring(target.kind), tostring(target.month), tostring(target.idx))",
        "",
        "\t\t\t-- remove（UID優先、なければcode）",
        "\t\t\tlocal nextStore, removed",
        "\t\t\tif target.uid and target.uid ~= \"\" then",
        "\t\t\t\tnextStore, removed = removeByUidImmutable(store, target.uid)",
        "\t\t\telse",
        "\t\t\t\tnextStore, removed = removeByCodeImmutable(store, target.code)",
        "\t\t\tend",
        "",
        "\t\t\tif not removed then",
        "\t\t\t\tLOG.warn(\"[remove] not-found (no-op) uid=%s code=%s\", tostring(target.uid), tostring(target.code))",
        "\t\t\t\treturn store, { ok = true, changed = 0, meta = \"not-found\", targetUid = target.uid, targetCode = target.code, pickReason = reason }",
        "\t\t\tend",
        "",
        "\t\t\tlocal dt = (os.clock() - t0) * 1000",
        "\t\t\tLOG.info(\"[result] ok changed=1 uid=%s code=%s via=%s in %.2fms\",",
        "\t\t\t\ttostring(removed.uid), tostring(removed.code), tostring(reason), dt)",
        "\t\t\treturn nextStore, {",
        "\t\t\t\tok         = true,",
        "\t\t\t\tchanged    = 1,",
        "\t\t\t\ttargetUid  = removed.uid,",
        "\t\t\t\ttargetCode = removed.code,",
        "\t\t\t\tpickReason = reason,",
        "\t\t\t\ttag        = tagMark,",
        "\t\t\t}",
        "\t\tend)",
        "\tend",
        "",
        "\t-- ★ DOT-ONLY 登録（レガシー別名は登録しない）",
        "\tEffects.register(\"kito.hitsuji_prune\", handler)",
        "\tEffects.registerCanApply(\"kito.hitsuji_prune\", canApply)",
        "end"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [
          "SharedModules",
          "Logger"
        ],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/shared/Deck/Effects/kito/I_Sakeify.lua",
      "ext": "lua",
      "binary": false,
      "size": 12546,
      "mtime": "2025-10-02T03:38:28.087155+00:00",
      "head": [
        "-- ReplicatedStorage/SharedModules/Deck/Effects/kito/I_Sakeify.lua",
        "-- I (KITO / DOT-ONLY): \"sakeify\" — convert one target card to September's seed (杯) by month+kind",
        "--  - Effect ID: \"kito.i_sake\"（唯一の真実）",
        "--  - Prioritize payload.uid / payload.uids / payload.poolUids (UID uniquely identifies one card)",
        "--  - Fallback to codes only if no UID is provided",
        "--  - DeckStore (v3) is treated as immutable; use DeckStore.transact to replace one entry (UID-first)",
        "--  - RNG is separated (ctx.rng preferred, otherwise Random.new())",
        "--  - No month-kind eligibility check needed: we force month=9 then kind=seed",
        "--  - Idempotent: if already month=9 & kind=seed, or already tagged, no change",
        "--  - Diagnostic logs (scope: Effects.kito.i_sake)",
        "",
        "return function(Effects)",
        "\t--─────────────────────────────────────────────────────",
        "\t-- Logger (optional)",
        "\t--─────────────────────────────────────────────────────",
        "\tlocal LOG do",
        "\t\tlocal ok, Logger = pcall(function()",
        "\t\t\treturn require(game:GetService(\"ReplicatedStorage\")",
        "\t\t\t\t:WaitForChild(\"SharedModules\")",
        "\t\t\t\t:WaitForChild(\"Logger\"))",
        "\t\tend)",
        "\t\tif ok and Logger and type(Logger.scope) == \"function\" then",
        "\t\t\tLOG = Logger.scope(\"Effects.kito.i_sake\")",
        "\t\telse",
        "\t\t\tLOG = { info=function(...) end, debug=function(...) end, warn=function(...) warn(string.format(...)) end }",
        "\t\tend",
        "\tend",
        "",
        "\t--─────────────────────────────────────────────────────",
        "\t-- Handler (DOT-ONLY)",
        "\t--─────────────────────────────────────────────────────",
        "\tlocal function handler(ctx)",
        "\t\tlocal payload     = ctx.payload or {}",
        "\t\tlocal uidScalar   = (typeof(payload.uid)  == \"string\" and payload.uid)  or nil",
        "\t\tlocal uids        = (typeof(payload.uids) == \"table\"  and payload.uids) or nil",
        "\t\tlocal poolUids    = (typeof(payload.poolUids) == \"table\" and payload.poolUids) or nil",
        "\t\tlocal codes       = (typeof(payload.codes) == \"table\" and payload.codes) or nil -- code指定のみ互換",
        "\t\tlocal poolCodes   = (typeof(payload.poolCodes) == \"table\" and payload.poolCodes) or nil -- 互換",
        "",
        "\t\t-- ★ DOT-ONLY タグ表記（Kito.apply_via_effects の tag=\"eff:<moduleId>\" と一致）",
        "\t\tlocal tagMark     = tostring(payload.tag or \"eff:kito.i_sake\")",
        "\t\tlocal runId       = ctx.runId",
        "\t\tlocal rng         = ctx.rng or Random.new()",
        "",
        "\t\tlocal function head5(list)",
        "\t\t\tif typeof(list) ~= \"table\" then return \"-\" end",
        "\t\t\tlocal out, n = {}, math.min(#list, 5)",
        "\t\t\tfor i = 1, n do out[i] = tostring(list[i]) end",
        "\t\t\treturn table.concat(out, \",\")",
        "\t\tend",
        "",
        "\t\tLOG.debug(\"[deps] DeckStore=%s DeckOps=%s CardEngine=%s\",",
        "\t\t\ttostring(ctx.DeckStore ~= nil), tostring(ctx.DeckOps ~= nil), tostring(ctx.CardEngine ~= nil))",
        "\t\tLOG.info(\"[begin] run=%s tag=%s | uid=%s uids[%s]=[%s] poolUids[%s]=[%s] codes[%s]=[%s] poolCodes[%s]=[%s]\",",
        "\t\t\ttostring(runId), tagMark, tostring(uidScalar),",
        "\t\t\ttostring(uids and #uids or 0), head5(uids),",
        "\t\t\ttostring(poolUids and #poolUids or 0), head5(poolUids),",
        "\t\t\ttostring(codes and #codes or 0), head5(codes),",
        "\t\t\ttostring(poolCodes and #poolCodes or 0), head5(poolCodes)",
        "\t\t)",
        "",
        "\t\t--──────────────── helpers ────────────────",
        "\t\tlocal function listToSet(list)",
        "\t\t\tif typeof(list) ~= \"table\" then return nil end",
        "\t\t\tlocal s = {}",
        "\t\t\tfor _, v in ipairs(list) do s[v] = true end",
        "\t\t\treturn s",
        "\t\tend",
        "\t\tlocal uidSet = listToSet(uids) or {}",
        "\t\tif uidScalar then uidSet[uidScalar] = true end",
        "\t\tlocal poolUidSet  = listToSet(poolUids)",
        "\t\tlocal codeSet     = listToSet(codes)",
        "\t\tlocal poolCodeSet = listToSet(poolCodes)",
        "",
        "\t\tlocal function alreadyTagged(card)",
        "\t\t\tif typeof(card) ~= \"table\" or typeof(card.tags) ~= \"table\" then return false end",
        "\t\t\tfor _, t in ipairs(card.tags) do if t == tagMark then return true end end",
        "\t\t\treturn false",
        "\t\tend",
        "",
        "\t\tlocal function isAlreadySake(card)",
        "\t\t\treturn (tonumber(card and card.month) == 9) and (tostring(card.kind) == \"seed\")",
        "\t\tend",
        "",
        "\t\tlocal function cardStr(c:any)",
        "\t\t\tif typeof(c) ~= \"table\" then return \"<nil>\" end",
        "\t\t\treturn string.format(\"{uid=%s code=%s kind=%s month=%s idx=%s tags=%s}\",",
        "\t\t\t\ttostring(c.uid), tostring(c.code), tostring(c.kind),",
        "\t\t\t\ttostring(c.month), tostring(c.idx),",
        "\t\t\t\t(function()",
        "\t\t\t\t\tif typeof(c.tags) ~= \"table\" then return \"[]\" end",
        "\t\t\t\t\tlocal t = {}",
        "\t\t\t\t\tfor i,v in ipairs(c.tags) do t[i] = tostring(v) end",
        "\t\t\t\t\treturn \"[\"..table.concat(t, \",\")..\"]\"",
        "\t\t\t\tend)()",
        "\t\t\t)",
        "\t\tend",
        "",
        "\t\t-- Replace one entry by UID (preserve UID and core fields)",
        "\t\tlocal function replaceOneByUid(store, uid, newEntry)",
        "\t\t\tlocal entries = (store and store.entries) or {}",
        "\t\t\tlocal n = #entries; if n == 0 then return store end",
        "\t\t\tlocal out = table.create(n)",
        "\t\t\tlocal done = false",
        "\t\t\tfor i = 1, n do",
        "\t\t\t\tlocal e = entries[i]",
        "\t\t\t\tif (not done) and e and e.uid == uid then",
        "\t\t\t\t\tlocal c = table.clone(newEntry or {})",
        "\t\t\t\t\tc.uid   = e.uid",
        "\t\t\t\t\tc.code  = c.code  or e.code",
        "\t\t\t\t\tc.month = c.month or e.month",
        "\t\t\t\t\tc.idx   = c.idx   or e.idx",
        "\t\t\t\t\tout[i]  = c",
        "\t\t\t\t\tdone    = true",
        "\t\t\t\telse",
        "\t\t\t\t\tout[i] = e",
        "\t\t\t\tend",
        "\t\t\tend",
        "\t\t\tif done then",
        "\t\t\t\tLOG.debug(\"[replaceByUid] uid=%s -> %s\", tostring(uid), cardStr(newEntry))",
        "\t\t\telse",
        "\t\t\t\tLOG.warn(\"[replaceByUid] uid=%s not found (no-op)\", tostring(uid))",
        "\t\t\tend",
        "\t\t\treturn { v = 3, entries = out }",
        "\t\tend",
        "",
        "\t\t-- Replace one entry by code (legacy fallback)",
        "\t\tlocal function replaceOneByCode(store, code, newEntry)",
        "\t\t\tlocal entries = (store and store.entries) or {}",
        "\t\t\tlocal n = #entries; if n == 0 then return store end",
        "\t\t\tlocal out = table.create(n)",
        "\t\t\tlocal done = false",
        "\t\t\tfor i = 1, n do",
        "\t\t\t\tlocal e = entries[i]",
        "\t\t\t\tif (not done) and e and e.code == code then",
        "\t\t\t\t\tlocal c = table.clone(newEntry or {})",
        "\t\t\t\t\tc.uid   = e.uid",
        "\t\t\t\t\tc.code  = c.code  or e.code",
        "\t\t\t\t\tc.month = c.month or e.month",
        "\t\t\t\t\tc.idx   = c.idx   or e.idx",
        "\t\t\t\t\tout[i]  = c",
        "\t\t\t\t\tdone    = true",
        "\t\t\t\telse",
        "\t\t\t\t\tout[i] = e",
        "\t\t\t\tend",
        "\t\t\tend",
        "\t\t\tif done then",
        "\t\t\t\tLOG.debug(\"[replaceByCode] code=%s -> %s\", tostring(code), cardStr(newEntry))",
        "\t\t\telse",
        "\t\t\t\tLOG.warn(\"[replaceByCode] code=%s not found (no-op)\", tostring(code))",
        "\t\t\tend",
        "\t\t\treturn { v = 3, entries = out }",
        "\t\tend",
        "",
        "\t\t--─────────────────────────────────────────────────────",
        "\t\t-- Target selection order: UID → Code → pool(UID/Code) → any (excluding already-sake/tagged)",
        "\t\t--─────────────────────────────────────────────────────",
        "\t\tlocal function pickTarget(store)",
        "\t\t\tlocal entries = (store and store.entries) or {}",
        "\t\t\tlocal function candOf(pred)",
        "\t\t\t\tlocal list = {}",
        "\t\t\t\tfor _, e in ipairs(entries) do",
        "\t\t\t\t\tif e and (not alreadyTagged(e)) and (not isAlreadySake(e)) and pred(e) then",
        "\t\t\t\t\t\tlist[#list+1] = e",
        "\t\t\t\t\tend",
        "\t\t\t\tend",
        "\t\t\t\treturn list",
        "\t\t\tend",
        "",
        "\t\t\t-- direct UIDs",
        "\t\t\tif uidSet and next(uidSet) ~= nil then",
        "\t\t\t\tlocal list = candOf(function(e) return e.uid and uidSet[e.uid] end)",
        "\t\t\t\tLOG.debug(\"[pick] direct-uid candidates=%d\", #list)",
        "\t\t\t\tif #list > 0 then return list[rng:NextInteger(1, #list)], \"direct-uid\" end",
        "\t\t\tend",
        "\t\t\t-- direct codes",
        "\t\t\tif codeSet then",
        "\t\t\t\tlocal list = candOf(function(e) return e.code and codeSet[e.code] end)",
        "\t\t\t\tLOG.debug(\"[pick] direct-code candidates=%d\", #list)",
        "\t\t\t\tif #list > 0 then return list[rng:NextInteger(1, #list)], \"direct-code\" end",
        "\t\t\tend",
        "\t\t\t-- pool UIDs",
        "\t\t\tif poolUidSet then",
        "\t\t\t\tlocal list = candOf(function(e) return e.uid and poolUidSet[e.uid] end)",
        "\t\t\t\tLOG.debug(\"[pick] pool-uid candidates=%d\", #list)",
        "\t\t\t\tif #list > 0 then return list[rng:NextInteger(1, #list)], \"pool-uid\" end",
        "\t\t\tend",
        "\t\t\t-- pool codes",
        "\t\t\tif poolCodeSet then",
        "\t\t\t\tlocal list = candOf(function(e) return e.code and poolCodeSet[e.code] end)",
        "\t\t\t\tLOG.debug(\"[pick] pool-code candidates=%d\", #list)",
        "\t\t\t\tif #list > 0 then return list[rng:NextInteger(1, #list)], \"pool-code\" end",
        "\t\t\tend",
        "\t\t\t-- any entry (except already-sake/tagged)",
        "\t\t\tlocal all = candOf(function(_) return true end)",
        "\t\t\tLOG.debug(\"[pick] any candidates=%d\", #all)",
        "\t\t\tif #all > 0 then return all[rng:NextInteger(1, #all)], \"any\" end",
        "\t\t\treturn nil, \"none\"",
        "\t\tend",
        "",
        "\t\t--─────────────────────────────────────────────────────",
        "\t\t-- Main (DeckStore.transact)",
        "\t\t--─────────────────────────────────────────────────────",
        "\t\tlocal t0 = os.clock()",
        "\t\tLOG.debug(\"[transact] run=%s enter\", tostring(runId))",
        "\t\treturn ctx.DeckStore.transact(runId, function(store)",
        "\t\t\tlocal storeSize = (store and store.entries and #store.entries) or 0",
        "\t\t\tLOG.debug(\"[store] size=%s\", tostring(storeSize))",
        "",
        "\t\t\tlocal target, reason = pickTarget(store)",
        "\t\t\tif not target then",
        "\t\t\t\tLOG.info(\"[result] no-eligible-target (pickReason=%s)\", tostring(reason))",
        "\t\t\t\treturn store, { ok = true, changed = 0, meta = \"no-eligible-target\", pickReason = reason }",
        "\t\t\tend",
        "",
        "\t\t\tLOG.debug(\"[target] via=%s %s\", tostring(reason), cardStr(target))",
        "",
        "\t\t\t-- Idempotency guard (double-check)",
        "\t\t\tif alreadyTagged(target) then",
        "\t\t\t\tLOG.info(\"[result] already-applied uid=%s code=%s (via=%s)\", tostring(target.uid), tostring(target.code), tostring(reason))",
        "\t\t\t\treturn store, { ok = true, changed = 0, meta = \"already-applied\", targetUid = target.uid, targetCode = target.code, pickReason = reason }",
        "\t\t\tend",
        "\t\t\tif isAlreadySake(target) then",
        "\t\t\t\tLOG.info(\"[result] already-sake uid=%s code=%s (via=%s)\", tostring(target.uid), tostring(target.code), tostring(reason))",
        "\t\t\t\treturn store, { ok = true, changed = 0, meta = \"already-sake\", targetUid = target.uid, targetCode = target.code, pickReason = reason }",
        "\t\t\tend",
        "",
        "\t\t\t-- Convert: month -> 9, then kind -> seed（9月の seed=盃 の idx に自動寄せ）",
        "\t\t\tlocal beforeMonth, beforeIdx, beforeKind = target.month, target.idx, target.kind",
        "\t\t\tlocal step1 = ctx.DeckOps.convertMonth(target, 9)",
        "\t\t\tlocal step2 = ctx.DeckOps.convertKind(step1, \"seed\")",
        "",
        "\t\t\tLOG.debug(\"[convert] month:%s→%s idx:%s→%s kind:%s→%s\",",
        "\t\t\t\ttostring(beforeMonth), tostring(step2.month),",
        "\t\t\t\ttostring(beforeIdx), tostring(step2.idx),",
        "\t\t\t\ttostring(beforeKind), tostring(step2.kind))",
        "",
        "\t\t\t-- Tag（UID 維持）",
        "\t\t\tlocal next2 = ctx.DeckOps.attachTag(step2, tagMark)",
        "\t\t\tif not next2.uid then next2.uid = target.uid end",
        "\t\t\tLOG.debug(\"[tagged] %s\", cardStr(next2))",
        "",
        "\t\t\t-- Replace: prefer UID when available",
        "\t\t\tif target.uid and target.uid ~= \"\" then",
        "\t\t\t\tstore = replaceOneByUid(store, target.uid, next2)",
        "\t\t\telse",
        "\t\t\t\tstore = replaceOneByCode(store, target.code, next2)",
        "\t\t\tend",
        "",
        "\t\t\tlocal dt = (os.clock() - t0) * 1000",
        "\t\t\tLOG.info(\"[result] ok changed=1 uid=%s code=%s via=%s in %.2fms\",",
        "\t\t\t\ttostring(target.uid), tostring(target.code), tostring(reason), dt)",
        "\t\t\treturn store, {",
        "\t\t\t\tok         = true,",
        "\t\t\t\tchanged    = 1,",
        "\t\t\t\ttargetUid  = target.uid,",
        "\t\t\t\ttargetCode = target.code,",
        "\t\t\t\tpickReason = reason,",
        "\t\t\t}",
        "\t\tend)",
        "\tend",
        "",
        "\t--─────────────────────────────────────────────────────",
        "\t-- canApply（UIグレーアウト等に利用） DOT-ONLY",
        "\t--  - 条件: 未タグ ＆ まだ「9月 seed（盃）」でない",
        "\t--─────────────────────────────────────────────────────",
        "\tlocal function registerCanApplyDot(id)",
        "\t\tEffects.registerCanApply(id, function(card, _ctx2)",
        "\t\t\tif type(card) ~= \"table\" then return false, \"not-eligible\" end",
        "\t\t\tlocal tags = (type(card.tags)==\"table\") and card.tags or {}",
        "\t\t\tfor _,t in ipairs(tags) do if t==\"eff:kito.i_sake\" then return false, \"already-applied\" end end",
        "\t\t\tif (tonumber(card.month)==9 and tostring(card.kind)==\"seed\") then",
        "\t\t\t\treturn false, \"already-sake\"",
        "\t\t\tend",
        "\t\t\treturn true",
        "\t\tend)",
        "\tend",
        "",
        "\t-- ★ DOT-ONLY 登録（レガシー別名は登録しない）",
        "\tEffects.register(\"kito.i_sake\", handler)",
        "\tregisterCanApplyDot(\"kito.i_sake\")",
        "end"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [
          "SharedModules",
          "Logger"
        ],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/shared/Deck/Effects/kito/Inu_Chaff2.lua",
      "ext": "lua",
      "binary": false,
      "size": 13723,
      "mtime": "2025-10-02T03:32:01.679034+00:00",
      "head": [
        "-- ReplicatedStorage/SharedModules/Deck/Effects/kito/Inu_Chaff2.lua",
        "-- Inu (KITO / DOT-ONLY): convert ONE target card to \"chaff\" (UID-first)",
        "--  - Effect ID: \"kito.inu_chaff2\"（唯一の真実）",
        "--  - Prioritize payload.uid / payload.uids / payload.poolUids (UID uniquely identifies one card)",
        "--  - Fallback to codes only if no UID is provided",
        "--  - DeckStore (v3) is treated as immutable; use DeckStore.transact to replace one entry (UID-first)",
        "--  - RNG is separated (ctx.rng preferred, otherwise Random.new())",
        "--  - If the month has no \"chaff\", do nothing (meta returned)",
        "--  - Diagnostic logs (scope: Effects.kito.inu_chaff2)",
        "",
        "return function(Effects)",
        "\t--─────────────────────────────────────────────────────",
        "\t-- Logger (optional)",
        "\t--─────────────────────────────────────────────────────",
        "\tlocal LOG do",
        "\t\tlocal ok, Logger = pcall(function()",
        "\t\t\treturn require(game:GetService(\"ReplicatedStorage\")",
        "\t\t\t\t:WaitForChild(\"SharedModules\")",
        "\t\t\t\t:WaitForChild(\"Logger\"))",
        "\t\tend)",
        "\t\tif ok and Logger and type(Logger.scope) == \"function\" then",
        "\t\t\tLOG = Logger.scope(\"Effects.kito.inu_chaff2\")",
        "\t\telse",
        "\t\t\tLOG = { info=function(...) end, debug=function(...) end, warn=function(...) warn(string.format(...)) end }",
        "\t\tend",
        "\tend",
        "",
        "\t--─────────────────────────────────────────────────────",
        "\t-- Shared handler (DOT-ONLY)",
        "\t--─────────────────────────────────────────────────────",
        "\tlocal function handler(ctx)",
        "\t\tlocal payload     = ctx.payload or {}",
        "\t\tlocal uidScalar   = (typeof(payload.uid)  == \"string\" and payload.uid)  or nil",
        "\t\tlocal uids        = (typeof(payload.uids) == \"table\"  and payload.uids) or nil",
        "\t\tlocal poolUids    = (typeof(payload.poolUids) == \"table\" and payload.poolUids) or nil",
        "\t\tlocal codes       = (typeof(payload.codes) == \"table\" and payload.codes) or nil -- legacy compat（code選択のみ）",
        "\t\tlocal poolCodes   = (typeof(payload.poolCodes) == \"table\" and payload.poolCodes) or nil -- legacy compat",
        "",
        "\t\t-- ★ DOT-ONLY タグ表記（Kito.apply_via_effects の tag=\"eff:<moduleId>\" と一致）",
        "\t\tlocal tagMark     = tostring(payload.tag or \"eff:kito.inu_chaff2\")",
        "\t\tlocal preferKind  = \"chaff\"",
        "",
        "\t\tlocal runId       = ctx.runId",
        "\t\tlocal rng         = ctx.rng or Random.new()",
        "",
        "\t\tlocal function head5(list)",
        "\t\t\tif typeof(list) ~= \"table\" then return \"-\" end",
        "\t\t\tlocal out, n = {}, math.min(#list, 5)",
        "\t\t\tfor i = 1, n do out[i] = tostring(list[i]) end",
        "\t\t\treturn table.concat(out, \",\")",
        "\t\tend",
        "",
        "\t\tLOG.debug(\"[deps] DeckStore=%s DeckOps=%s CardEngine=%s\",",
        "\t\t\ttostring(ctx.DeckStore ~= nil), tostring(ctx.DeckOps ~= nil), tostring(ctx.CardEngine ~= nil))",
        "\t\tLOG.info(\"[begin] run=%s prefer=%s tag=%s | uid=%s uids[%s]=[%s] poolUids[%s]=[%s] codes[%s]=[%s] poolCodes[%s]=[%s]\",",
        "\t\t\ttostring(runId), preferKind, tagMark, tostring(uidScalar),",
        "\t\t\ttostring(uids and #uids or 0), head5(uids),",
        "\t\t\ttostring(poolUids and #poolUids or 0), head5(poolUids),",
        "\t\t\ttostring(codes and #codes or 0), head5(codes),",
        "\t\t\ttostring(poolCodes and #poolCodes or 0), head5(poolCodes)",
        "\t\t)",
        "",
        "\t\t--──────────────── helpers ────────────────",
        "\t\tlocal function listToSet(list)",
        "\t\t\tif typeof(list) ~= \"table\" then return nil end",
        "\t\t\tlocal s = {}",
        "\t\t\tfor _, v in ipairs(list) do s[v] = true end",
        "\t\t\treturn s",
        "\t\tend",
        "\t\tlocal uidSet = listToSet(uids) or {}",
        "\t\tif uidScalar then uidSet[uidScalar] = true end",
        "\t\tlocal poolUidSet  = listToSet(poolUids)",
        "\t\tlocal codeSet     = listToSet(codes)",
        "\t\tlocal poolCodeSet = listToSet(poolCodes)",
        "",
        "\t\tlocal function monthFromCard(card:any): number?",
        "\t\t\tif not card then return nil end",
        "\t\t\tif card.month ~= nil then",
        "\t\t\t\tlocal m = tonumber(card.month)",
        "\t\t\t\tif typeof(m) == \"number\" then return m end",
        "\t\t\tend",
        "\t\t\tlocal code = tostring(card.code or \"\")",
        "\t\t\tif #code >= 2 then",
        "\t\t\t\tlocal mm = tonumber(string.sub(code, 1, 2))",
        "\t\t\t\tif typeof(mm) == \"number\" then return mm end",
        "\t\t\tend",
        "\t\t\treturn nil",
        "\t\tend",
        "",
        "\t\tlocal function monthHasChaff(month:number?): boolean",
        "\t\t\tif not month or not ctx.CardEngine or not ctx.CardEngine.cardsByMonth then return false end",
        "\t\t\tlocal defs = ctx.CardEngine.cardsByMonth[month]",
        "\t\t\tif typeof(defs) ~= \"table\" then return false end",
        "\t\t\tfor _, def in ipairs(defs) do",
        "\t\t\t\tif tostring(def.kind or \"\") == \"chaff\" then",
        "\t\t\t\t\treturn true",
        "\t\t\t\tend",
        "\t\t\tend",
        "\t\t\treturn false",
        "\t\tend",
        "",
        "\t\tlocal function alreadyTagged(card)",
        "\t\t\tif typeof(card) ~= \"table\" or typeof(card.tags) ~= \"table\" then return false end",
        "\t\t\tfor _, t in ipairs(card.tags) do",
        "\t\t\t\t-- DOT-ONLY タグのみを見る（旧タグは無視）",
        "\t\t\t\tif t == tagMark then return true end",
        "\t\t\tend",
        "\t\t\treturn false",
        "\t\tend",
        "",
        "\t\tlocal function cardStr(c:any)",
        "\t\t\tif typeof(c) ~= \"table\" then return \"<nil>\" end",
        "\t\t\treturn string.format(\"{uid=%s code=%s kind=%s month=%s idx=%s tags=%s}\",",
        "\t\t\t\ttostring(c.uid), tostring(c.code), tostring(c.kind),",
        "\t\t\t\ttostring(c.month), tostring(c.idx),",
        "\t\t\t\t(function()",
        "\t\t\t\t\tif typeof(c.tags) ~= \"table\" then return \"[]\" end",
        "\t\t\t\t\tlocal t = {}",
        "\t\t\t\t\tfor i,v in ipairs(c.tags) do t[i] = tostring(v) end",
        "\t\t\t\t\treturn \"[\"..table.concat(t, \",\")..\"]\"",
        "\t\t\t\tend)()",
        "\t\t\t)",
        "\t\tend",
        "",
        "\t\t-- Replace one entry by UID",
        "\t\tlocal function replaceOneByUid(store, uid, newEntry)",
        "\t\t\tlocal entries = (store and store.entries) or {}",
        "\t\t\tlocal n = #entries; if n == 0 then return store end",
        "\t\t\tlocal out = table.create(n)",
        "\t\t\tlocal done = false",
        "\t\t\tfor i = 1, n do",
        "\t\t\t\tlocal e = entries[i]",
        "\t\t\t\tif (not done) and e and e.uid == uid then",
        "\t\t\t\t\tlocal c = table.clone(newEntry or {})",
        "\t\t\t\t\tc.uid   = e.uid",
        "\t\t\t\t\tc.code  = c.code  or e.code",
        "\t\t\t\t\tc.month = c.month or e.month",
        "\t\t\t\t\tc.idx   = c.idx   or e.idx",
        "\t\t\t\t\tout[i]  = c",
        "\t\t\t\t\tdone    = true",
        "\t\t\t\telse",
        "\t\t\t\t\tout[i] = e",
        "\t\t\t\tend",
        "\t\t\tend",
        "\t\t\tif done then",
        "\t\t\t\tLOG.debug(\"[replaceByUid] uid=%s -> %s\", tostring(uid), cardStr(newEntry))",
        "\t\t\telse",
        "\t\t\t\tLOG.warn(\"[replaceByUid] uid=%s not found (no-op)\", tostring(uid))",
        "\t\t\tend",
        "\t\t\treturn { v = 3, entries = out }",
        "\t\tend",
        "",
        "\t\t-- Replace one entry by code (legacy fallback)",
        "\t\tlocal function replaceOneByCode(store, code, newEntry)",
        "\t\t\tlocal entries = (store and store.entries) or {}",
        "\t\t\tlocal n = #entries; if n == 0 then return store end",
        "\t\t\tlocal out = table.create(n)",
        "\t\t\tlocal done = false",
        "\t\t\tfor i = 1, n do",
        "\t\t\t\tlocal e = entries[i]",
        "\t\t\t\tif (not done) and e and e.code == code then",
        "\t\t\t\t\tlocal c = table.clone(newEntry or {})",
        "\t\t\t\t\tc.uid   = e.uid",
        "\t\t\t\t\tc.code  = c.code  or e.code",
        "\t\t\t\t\tc.month = c.month or e.month",
        "\t\t\t\t\tc.idx   = c.idx   or e.idx",
        "\t\t\t\t\tout[i]  = c",
        "\t\t\t\t\tdone    = true",
        "\t\t\t\telse",
        "\t\t\t\t\tout[i] = e",
        "\t\t\t\tend",
        "\t\t\tend",
        "\t\t\tif done then",
        "\t\t\t\tLOG.debug(\"[replaceByCode] code=%s -> %s\", tostring(code), cardStr(newEntry))",
        "\t\t\telse",
        "\t\t\t\tLOG.warn(\"[replaceByCode] code=%s not found (no-op)\", tostring(code))",
        "\t\t\tend",
        "\t\t\treturn { v = 3, entries = out }",
        "\t\tend",
        "",
        "\t\t-- Target selection order: UID → Code → pool(UID) → pool(Code) → any eligible month",
        "\t\tlocal function pickTarget(store)",
        "\t\t\tlocal entries = (store and store.entries) or {}",
        "",
        "\t\t\t-- 0) direct UID(s)",
        "\t\t\tif uidSet and next(uidSet) ~= nil then",
        "\t\t\t\tlocal list = {}",
        "\t\t\t\tfor _, e in ipairs(entries) do",
        "\t\t\t\t\tif e and e.uid and uidSet[e.uid] and monthHasChaff(monthFromCard(e)) then",
        "\t\t\t\t\t\tlist[#list+1] = e",
        "\t\t\t\t\tend",
        "\t\t\t\tend",
        "\t\t\t\tLOG.debug(\"[pick] direct-uid candidates=%d\", #list)",
        "\t\t\t\tif #list > 0 then return list[rng:NextInteger(1, #list)], \"direct-uid\" end",
        "\t\t\tend",
        "",
        "\t\t\t-- 1) direct code(s)",
        "\t\t\tif codeSet then",
        "\t\t\t\tlocal list = {}",
        "\t\t\t\tfor _, e in ipairs(entries) do",
        "\t\t\t\t\tif e and e.code and codeSet[e.code] and monthHasChaff(monthFromCard(e)) then",
        "\t\t\t\t\t\tlist[#list+1] = e",
        "\t\t\t\t\tend",
        "\t\t\t\tend",
        "\t\t\t\tLOG.debug(\"[pick] direct-code candidates=%d\", #list)",
        "\t\t\t\tif #list > 0 then return list[rng:NextInteger(1, #list)], \"direct-code\" end",
        "\t\t\tend",
        "",
        "\t\t\t-- 2) pool by UID",
        "\t\t\tif poolUidSet then",
        "\t\t\t\tlocal cand = {}",
        "\t\t\t\tfor _, e in ipairs(entries) do",
        "\t\t\t\t\tif e and e.uid and poolUidSet[e.uid] and monthHasChaff(monthFromCard(e)) then",
        "\t\t\t\t\t\tcand[#cand+1] = e",
        "\t\t\t\t\tend",
        "\t\t\t\tend",
        "\t\t\t\tLOG.debug(\"[pick] pool-uid candidates=%d\", #cand)",
        "\t\t\t\tif #cand > 0 then return cand[rng:NextInteger(1, #cand)], \"pool-uid\" end",
        "\t\t\tend",
        "",
        "\t\t\t-- 3) pool by code",
        "\t\t\tif poolCodeSet then",
        "\t\t\t\tlocal cand = {}",
        "\t\t\t\tfor _, e in ipairs(entries) do",
        "\t\t\t\t\tif e and e.code and poolCodeSet[e.code] and monthHasChaff(monthFromCard(e)) then",
        "\t\t\t\t\t\tcand[#cand+1] = e",
        "\t\t\t\t\tend",
        "\t\t\t\tend",
        "\t\t\t\tLOG.debug(\"[pick] pool-code candidates=%d\", #cand)",
        "\t\t\t\tif #cand > 0 then return cand[rng:NextInteger(1, #cand)], \"pool-code\" end",
        "\t\t\tend",
        "",
        "\t\t\t-- 4) any entry whose month has \"chaff\"",
        "\t\t\tlocal all = {}",
        "\t\t\tfor _, e in ipairs(entries) do",
        "\t\t\t\tif monthHasChaff(monthFromCard(e)) then all[#all+1] = e end",
        "\t\t\tend",
        "\t\t\tLOG.debug(\"[pick] any-chaff-month candidates=%d\", #all)",
        "\t\t\tif #all > 0 then return all[rng:NextInteger(1, #all)], \"any-chaff-month\" end",
        "",
        "\t\t\treturn nil, \"none\"",
        "\t\tend",
        "",
        "\t\t--──────────────── Main (DeckStore.transact) ────────────────",
        "\t\tlocal t0 = os.clock()",
        "\t\tLOG.debug(\"[transact] run=%s enter\", tostring(runId))",
        "\t\treturn ctx.DeckStore.transact(runId, function(store)",
        "\t\t\tlocal storeSize = (store and store.entries and #store.entries) or 0",
        "\t\t\tLOG.debug(\"[store] size=%s\", tostring(storeSize))",
        "",
        "\t\t\tlocal target, reason = pickTarget(store)",
        "\t\t\tif not target then",
        "\t\t\t\tLOG.info(\"[result] no-eligible-target (pickReason=%s)\", tostring(reason))",
        "\t\t\t\treturn store, { ok = true, changed = 0, meta = \"no-eligible-target\", pickReason = reason }",
        "\t\t\tend",
        "",
        "\t\t\tLOG.debug(\"[target] via=%s %s\", tostring(reason), cardStr(target))",
        "",
        "\t\t\t-- If already tagged, skip (idempotent)",
        "\t\t\tif alreadyTagged(target) then",
        "\t\t\t\tLOG.info(\"[result] already-applied uid=%s code=%s (via=%s)\", tostring(target.uid), tostring(target.code), tostring(reason))",
        "\t\t\t\treturn store, { ok = true, changed = 0, meta = \"already-applied\", targetUid = target.uid, targetCode = target.code, pickReason = reason }",
        "\t\t\tend",
        "",
        "\t\t\t-- Convert to \"chaff\"",
        "\t\t\tlocal beforeIdx, beforeCode, beforeKind = target.idx, target.code, target.kind",
        "\t\t\tlocal next1 = ctx.DeckOps.convertKind(target, preferKind)",
        "\t\t\tlocal afterIdx, afterCode, afterKind = next1.idx, next1.code, next1.kind",
        "\t\t\tLOG.debug(\"[convert] idx:%s→%s code:%s→%s kind:%s→%s\",",
        "\t\t\t\ttostring(beforeIdx), tostring(afterIdx),",
        "\t\t\t\ttostring(beforeCode), tostring(afterCode),",
        "\t\t\t\ttostring(beforeKind), tostring(afterKind))",
        "",
        "\t\t\tif tostring(afterKind or \"\") ~= \"chaff\" then",
        "\t\t\t\tLOG.info(\"[result] month-has-no-chaff uid=%s code=%s (via=%s)\", tostring(target.uid), tostring(target.code), tostring(reason))",
        "\t\t\t\treturn store, { ok = true, changed = 0, meta = \"month-has-no-chaff\", targetUid = target.uid, targetCode = target.code, pickReason = reason }",
        "\t\t\tend",
        "",
        "\t\t\t-- Tag（UID 維持）",
        "\t\t\tlocal next2 = ctx.DeckOps.attachTag(next1, tagMark)",
        "\t\t\tif not next2.uid then next2.uid = target.uid end",
        "\t\t\tLOG.debug(\"[tagged] %s\", cardStr(next2))",
        "",
        "\t\t\t-- Replace: prefer UID when available",
        "\t\t\tif target.uid and target.uid ~= \"\" then",
        "\t\t\t\tstore = replaceOneByUid(store, target.uid, next2)",
        "\t\t\telse",
        "\t\t\t\tstore = replaceOneByCode(store, target.code, next2)",
        "\t\t\tend",
        "",
        "\t\t\tlocal dt = (os.clock() - t0) * 1000",
        "\t\t\tLOG.info(\"[result] ok changed=1 uid=%s code=%s via=%s in %.2fms\",",
        "\t\t\t\ttostring(target.uid), tostring(target.code), tostring(reason), dt)",
        "\t\t\treturn store, {",
        "\t\t\t\tok         = true,",
        "\t\t\t\tchanged    = 1,",
        "\t\t\t\ttargetUid  = target.uid,",
        "\t\t\t\ttargetCode = target.code,",
        "\t\t\t\tpickReason = reason,",
        "\t\t\t}"
      ],
      "truncated": true,
      "analysis": {
        "waitForChild": [
          "SharedModules",
          "Logger"
        ],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/shared/Deck/Effects/kito/Mi_Venom.lua",
      "ext": "lua",
      "binary": false,
      "size": 10163,
      "mtime": "2025-09-26T10:35:01.113277+00:00",
      "head": [
        "-- ReplicatedStorage/SharedModules/Deck/Effects/kito/Mi_Venom.lua",
        "-- \"巳（Venom）\"：対象札をカス化し、所持文を即時加算する",
        "--  - Effect ID: \"kito.mi_venom\"（必要なら別名を追加可能）",
        "--  - 対象選択: payload.uid / payload.uids / payload.poolUids（UID優先）",
        "--  - 既タグ \"eff:kito_mi_venom\" または kind==\"chaff\" は no-op",
        "--  - DeckStore は不変扱い。置換は transact 内で UID-first（無ければ code）で行う",
        "--  - 変更があった場合のみ res.meta.bankDelta = Balance.KITO_VENOM_CASH を返す",
        "--  - ★ Diagnostic logs（scope: Effects.kito.mi_venom）",
        "",
        "return function(Effects)",
        "\t--─────────────────────────────────────────────────────",
        "\t-- Imports / Logger",
        "\t--─────────────────────────────────────────────────────",
        "\tlocal RS = game:GetService(\"ReplicatedStorage\")",
        "\tlocal Shared = RS:WaitForChild(\"SharedModules\")",
        "",
        "\tlocal Balance = require(RS:WaitForChild(\"Config\"):WaitForChild(\"Balance\"))",
        "",
        "\tlocal LOG do",
        "\t\tlocal ok, Logger = pcall(function()",
        "\t\t\treturn require(Shared:WaitForChild(\"Logger\"))",
        "\t\tend)",
        "\t\tif ok and Logger and type(Logger.scope) == \"function\" then",
        "\t\t\tLOG = Logger.scope(\"Effects.kito.mi_venom\")",
        "\t\telse",
        "\t\t\tLOG = { info=function(...) end, debug=function(...) end, warn=function(...) warn(string.format(...)) end }",
        "\t\tend",
        "\tend",
        "",
        "\t--─────────────────────────────────────────────────────",
        "\t-- Handler",
        "\t--─────────────────────────────────────────────────────",
        "\tlocal function handler(ctx)",
        "\t\tlocal payload   = ctx.payload or {}",
        "\t\tlocal runId     = ctx.runId",
        "\t\tlocal rng       = ctx.rng or Random.new()",
        "",
        "\t\tlocal tagMark   = \"eff:kito_mi_venom\"",
        "\t\tlocal cashDelta = tonumber(Balance.KITO_VENOM_CASH or 5) or 5",
        "",
        "\t\t-- 受け取り（UID優先）",
        "\t\tlocal uid       = (typeof(payload.uid) == \"string\" and payload.uid) or nil",
        "\t\tlocal uids      = (typeof(payload.uids) == \"table\" and payload.uids) or nil",
        "\t\tlocal poolUids  = (typeof(payload.poolUids) == \"table\" and payload.poolUids) or nil",
        "\t\tlocal codes     = (typeof(payload.codes) == \"table\" and payload.codes) or nil -- 互換",
        "",
        "\t\t-- ログヘッダ",
        "\t\tlocal function head5(list)",
        "\t\t\tif typeof(list) ~= \"table\" then return \"-\" end",
        "\t\t\tlocal out, n = {}, math.min(#list, 5)",
        "\t\t\tfor i = 1, n do out[i] = tostring(list[i]) end",
        "\t\t\treturn table.concat(out, \",\")",
        "\t\tend",
        "",
        "\t\tLOG.debug(\"[deps] DeckStore=%s DeckOps=%s CardEngine=%s\",",
        "\t\t\ttostring(ctx.DeckStore ~= nil), tostring(ctx.DeckOps ~= nil), tostring(ctx.CardEngine ~= nil))",
        "\t\tLOG.info(\"[begin] run=%s uid=%s | uids[%s]=[%s] poolUids[%s]=[%s] codes[%s]=[%s]\",",
        "\t\t\ttostring(runId), tostring(uid),",
        "\t\t\ttostring(uids and #uids or 0), head5(uids),",
        "\t\t\ttostring(poolUids and #poolUids or 0), head5(poolUids),",
        "\t\t\ttostring(codes and #codes or 0), head5(codes)",
        "\t\t)",
        "",
        "\t\t-- 小道具",
        "\t\tlocal function listToSet(list)",
        "\t\t\tif typeof(list) ~= \"table\" then return nil end",
        "\t\t\tlocal s = {}",
        "\t\t\tfor _, v in ipairs(list) do s[v] = true end",
        "\t\t\treturn s",
        "\t\tend",
        "\t\tlocal uidSet     = listToSet(uids)",
        "\t\tlocal poolUidSet = listToSet(poolUids)",
        "\t\tlocal codeSet    = listToSet(codes)",
        "",
        "\t\tlocal function alreadyTagged(card)",
        "\t\t\tif typeof(card) ~= \"table\" or typeof(card.tags) ~= \"table\" then return false end",
        "\t\t\tfor _, t in ipairs(card.tags) do if t == tagMark then return true end end",
        "\t\t\treturn false",
        "\t\tend",
        "",
        "\t\tlocal function cardStr(c:any)",
        "\t\t\tif typeof(c) ~= \"table\" then return \"<nil>\" end",
        "\t\t\treturn string.format(\"{uid=%s code=%s kind=%s month=%s idx=%s tags=%s}\",",
        "\t\t\t\ttostring(c.uid), tostring(c.code), tostring(c.kind),",
        "\t\t\t\ttostring(c.month), tostring(c.idx),",
        "\t\t\t\t(function()",
        "\t\t\t\t\tif typeof(c.tags) ~= \"table\" then return \"[]\" end",
        "\t\t\t\t\tlocal t = {}",
        "\t\t\t\t\tfor i,v in ipairs(c.tags) do t[i] = tostring(v) end",
        "\t\t\t\t\treturn \"[\"..table.concat(t, \",\")..\"]\"",
        "\t\t\t\tend)()",
        "\t\t\t)",
        "\t\tend",
        "",
        "\t\t-- UID で1件置換",
        "\t\tlocal function replaceOneByUid(store, uidX, newEntry)",
        "\t\t\tlocal entries = (store and store.entries) or {}",
        "\t\t\tlocal n = #entries; if n == 0 then return store end",
        "\t\t\tlocal out = table.create(n)",
        "\t\t\tlocal done = false",
        "\t\t\tfor i = 1, n do",
        "\t\t\t\tlocal e = entries[i]",
        "\t\t\t\tif (not done) and e and e.uid == uidX then",
        "\t\t\t\t\tlocal c = table.clone(newEntry or {})",
        "\t\t\t\t\t-- UIDは維持し、空欄は旧値で補完",
        "\t\t\t\t\tc.uid   = e.uid",
        "\t\t\t\t\tc.code  = c.code  or e.code",
        "\t\t\t\t\tc.month = c.month or e.month",
        "\t\t\t\t\tc.idx   = c.idx   or e.idx",
        "\t\t\t\t\tout[i]  = c",
        "\t\t\t\t\tdone    = true",
        "\t\t\t\telse",
        "\t\t\t\t\tout[i] = e",
        "\t\t\t\tend",
        "\t\t\tend",
        "\t\t\tif done then",
        "\t\t\t\tLOG.debug(\"[replaceByUid] uid=%s -> %s\", tostring(uidX), cardStr(newEntry))",
        "\t\t\telse",
        "\t\t\t\tLOG.warn(\"[replaceByUid] uid=%s not found (no-op)\", tostring(uidX))",
        "\t\t\tend",
        "\t\t\treturn { v = 3, entries = out }",
        "\t\tend",
        "",
        "\t\t-- code で1件置換（レガシー）",
        "\t\tlocal function replaceOneByCode(store, codeX, newEntry)",
        "\t\t\tlocal entries = (store and store.entries) or {}",
        "\t\t\tlocal n = #entries; if n == 0 then return store end",
        "\t\t\tlocal out = table.create(n)",
        "\t\t\tlocal done = false",
        "\t\t\tfor i = 1, n do",
        "\t\t\t\tlocal e = entries[i]",
        "\t\t\t\tif (not done) and e and e.code == codeX then",
        "\t\t\t\t\tlocal c = table.clone(newEntry or {})",
        "\t\t\t\t\tc.uid   = e.uid    -- 可能ならUID維持",
        "\t\t\t\t\tc.code  = c.code  or e.code",
        "\t\t\t\t\tc.month = c.month or e.month",
        "\t\t\t\t\tc.idx   = c.idx   or e.idx",
        "\t\t\t\t\tout[i]  = c",
        "\t\t\t\t\tdone    = true",
        "\t\t\t\telse",
        "\t\t\t\t\tout[i] = e",
        "\t\t\t\tend",
        "\t\t\tend",
        "\t\t\tif done then",
        "\t\t\t\tLOG.debug(\"[replaceByCode] code=%s -> %s\", tostring(codeX), cardStr(newEntry))",
        "\t\t\telse",
        "\t\t\t\tLOG.warn(\"[replaceByCode] code=%s not found (no-op)\", tostring(codeX))",
        "\t\t\tend",
        "\t\t\treturn { v = 3, entries = out }",
        "\t\tend",
        "",
        "\t\t-- ターゲット選択（優先度: payload.uid → uids セット → poolUids セット → codes セット）",
        "\t\tlocal function pickTarget(store)",
        "\t\t\tlocal entries = (store and store.entries) or {}",
        "\t\t\tif #entries == 0 then return nil, \"empty-store\" end",
        "",
        "\t\t\t-- 0) direct uid",
        "\t\t\tif uid and uid ~= \"\" then",
        "\t\t\t\tfor _, e in ipairs(entries) do",
        "\t\t\t\t\tif e and e.uid == uid then",
        "\t\t\t\t\t\treturn e, \"direct-uid\"",
        "\t\t\t\t\tend",
        "\t\t\t\tend",
        "\t\t\tend",
        "",
        "\t\t\t-- 1) uids set",
        "\t\t\tif uidSet then",
        "\t\t\t\tlocal cand = {}",
        "\t\t\t\tfor _, e in ipairs(entries) do",
        "\t\t\t\t\tif e and e.uid and uidSet[e.uid] then",
        "\t\t\t\t\t\tcand[#cand+1] = e",
        "\t\t\t\t\tend",
        "\t\t\t\tend",
        "\t\t\t\tif #cand > 0 then",
        "\t\t\t\t\treturn cand[rng:NextInteger(1, #cand)], \"uids\"",
        "\t\t\t\tend",
        "\t\t\tend",
        "",
        "\t\t\t-- 2) poolUids set",
        "\t\t\tif poolUidSet then",
        "\t\t\t\tlocal cand = {}",
        "\t\t\t\tfor _, e in ipairs(entries) do",
        "\t\t\t\t\tif e and e.uid and poolUidSet[e.uid] then",
        "\t\t\t\t\t\tcand[#cand+1] = e",
        "\t\t\t\t\tend",
        "\t\t\t\tend",
        "\t\t\t\tif #cand > 0 then",
        "\t\t\t\t\treturn cand[rng:NextInteger(1, #cand)], \"poolUids\"",
        "\t\t\t\tend",
        "\t\t\tend",
        "",
        "\t\t\t-- 3) codes set（レガシー）",
        "\t\t\tif codeSet then",
        "\t\t\t\tlocal cand = {}",
        "\t\t\t\tfor _, e in ipairs(entries) do",
        "\t\t\t\t\tif e and e.code and codeSet[e.code] then",
        "\t\t\t\t\t\tcand[#cand+1] = e",
        "\t\t\t\t\tend",
        "\t\t\t\tend",
        "\t\t\t\tif #cand > 0 then",
        "\t\t\t\t\treturn cand[rng:NextInteger(1, #cand)], \"codes\"",
        "\t\t\t\tend",
        "\t\t\tend",
        "",
        "\t\t\t-- 4) 何も指定が無ければ no-op",
        "\t\t\treturn nil, \"no-candidate\"",
        "\t\tend",
        "",
        "\t\t--─────────────────────────────────────────────────────",
        "\t\t-- Main（DeckStore.transact）",
        "\t\t--─────────────────────────────────────────────────────",
        "\t\tlocal t0 = os.clock()",
        "\t\tLOG.debug(\"[transact] run=%s enter\", tostring(runId))",
        "",
        "\t\treturn ctx.DeckStore.transact(runId, function(store)",
        "\t\t\tlocal storeSize = (store and store.entries and #store.entries) or 0",
        "\t\t\tLOG.debug(\"[store] size=%s\", tostring(storeSize))",
        "",
        "\t\t\tlocal target, via = pickTarget(store)",
        "\t\t\tif not target then",
        "\t\t\t\tLOG.info(\"[result] no-target (via=%s)\", tostring(via))",
        "\t\t\t\treturn store, { ok = true, changed = 0, meta = \"no-target\", pickReason = via }",
        "\t\t\tend",
        "",
        "\t\t\tLOG.debug(\"[target] via=%s %s\", tostring(via), cardStr(target))",
        "",
        "\t\t\t-- 既タグ or 既カス → no-op",
        "\t\t\tif alreadyTagged(target) then",
        "\t\t\t\tLOG.info(\"[result] already-applied uid=%s code=%s\", tostring(target.uid), tostring(target.code))",
        "\t\t\t\treturn store, { ok = true, changed = 0, meta = \"already-applied\", targetUid = target.uid, targetCode = target.code }",
        "\t\t\tend",
        "\t\t\tif tostring(target.kind or \"\") == \"chaff\" then",
        "\t\t\t\tLOG.info(\"[result] already-chaff uid=%s code=%s\", tostring(target.uid), tostring(target.code))",
        "\t\t\t\treturn store, { ok = true, changed = 0, meta = \"already-chaff\", targetUid = target.uid, targetCode = target.code }",
        "\t\t\tend",
        "",
        "\t\t\t-- 変換: chaff 化 → タグ付け",
        "\t\t\tlocal beforeKind, beforeCode = target.kind, target.code",
        "\t\t\tlocal next1 = ctx.DeckOps.convertKind(target, \"chaff\")",
        "\t\t\tlocal afterKind, afterCode = next1.kind, next1.code",
        "\t\t\tLOG.debug(\"[convert] code:%s→%s kind:%s→%s\", tostring(beforeCode), tostring(afterCode), tostring(beforeKind), tostring(afterKind))",
        "",
        "\t\t\tlocal next2 = ctx.DeckOps.attachTag(next1, tagMark)",
        "\t\t\tif not next2.uid then next2.uid = target.uid end",
        "\t\t\tLOG.debug(\"[tagged] %s\", cardStr(next2))",
        "",
        "\t\t\t-- 置換（UID優先）",
        "\t\t\tif target.uid and target.uid ~= \"\" then",
        "\t\t\t\tstore = replaceOneByUid(store, target.uid, next2)",
        "\t\t\telse",
        "\t\t\t\tstore = replaceOneByCode(store, target.code, next2)",
        "\t\t\tend",
        "",
        "\t\t\tlocal dt = (os.clock() - t0) * 1000",
        "\t\t\tLOG.info(\"[result] ok changed=1 uid=%s code=%s via=%s bank:+%d in %.2fms\",",
        "\t\t\t\ttostring(target.uid), tostring(target.code), tostring(via), cashDelta, dt)",
        "",
        "\t\t\treturn store, {",
        "\t\t\t\tok      = true,",
        "\t\t\t\tchanged = 1,",
        "\t\t\t\tmeta    = { bankDelta = cashDelta },",
        "\t\t\t\ttargetUid  = target.uid,",
        "\t\t\t\ttargetCode = target.code,",
        "\t\t\t\tpickReason = via,",
        "\t\t\t}",
        "\t\tend)",
        "\tend",
        "",
        "\t-- 登録",
        "\tEffects.register(\"kito.mi_venom\", handler)",
        "\t-- （必要なら）レガシー別名を追加：",
        "\t-- Effects.register(\"Mi_Venom\", handler)",
        "end"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [
          "SharedModules",
          "Config",
          "Balance",
          "Logger"
        ],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/shared/Deck/Effects/kito/Tatsu_Copy.lua",
      "ext": "lua",
      "binary": false,
      "size": 13703,
      "mtime": "2025-10-02T17:24:54.946384+00:00",
      "head": [
        "-- ReplicatedStorage/SharedModules/Deck/Effects/kito/Tatsu_Copy.lua",
        "-- 辰（DOT-ONLY）：選んだ1枚を **完全複製** し、新規UIDを割当てて、デッキ内の最弱候補（chaff優先）を **上書き**",
        "--  - Effect ID: \"kito.tatsu_copy\"（DOT-ONLY）",
        "--  - 対象選択: payload.uid / payload.uids / payload.poolUids / payload.codes（UID優先）",
        "--  - 宛先は自動選定（sourceと同一UIDは除外）: chaff > ribbon/seed > bright",
        "--  - DeckStore は不変扱い。置換は transact 内で **UIDごと置換**（＝新規UIDを反映）",
        "--  - 既タグ \"eff:kito.tatsu_copy\" の **宛先** は no-op（冪等）",
        "--  - 「酒」など拡張フィールドも **deep clone** で丸ごと引き継ぐ",
        "--  - Diagnostic logs（scope: Effects.kito.tatsu_copy）",
        "",
        "return function(Effects)",
        "\t--─────────────────────────────────────────────────────",
        "\t-- Imports / Logger",
        "\t--─────────────────────────────────────────────────────",
        "\tlocal RS      = game:GetService(\"ReplicatedStorage\")",
        "\tlocal Shared  = RS:WaitForChild(\"SharedModules\")",
        "",
        "\tlocal LOG do",
        "\t\tlocal ok, Logger = pcall(function()",
        "\t\t\treturn require(Shared:WaitForChild(\"Logger\"))",
        "\t\tend)",
        "\t\tif ok and Logger and type(Logger.scope) == \"function\" then",
        "\t\t\tLOG = Logger.scope(\"Effects.kito.tatsu_copy\")",
        "\t\telse",
        "\t\t\tLOG = { info=function(...) end, debug=function(...) end, warn=function(...) warn(string.format(...)) end }",
        "\t\tend",
        "\tend",
        "",
        "\t--─────────────────────────────────────────────────────",
        "\t-- Handler",
        "\t--─────────────────────────────────────────────────────",
        "\tlocal function handler(ctx)",
        "\t\tlocal payload   = ctx.payload or {}",
        "\t\tlocal runId     = ctx.runId",
        "\t\tlocal rng       = ctx.rng or Random.new()",
        "",
        "\t\tlocal TAG       = \"eff:kito.tatsu_copy\"",
        "",
        "\t\t-- 受け取り（UID優先）",
        "\t\tlocal uid       = (typeof(payload.uid) == \"string\" and payload.uid) or nil",
        "\t\tlocal uids      = (typeof(payload.uids) == \"table\"  and payload.uids) or nil",
        "\t\tlocal poolUids  = (typeof(payload.poolUids) == \"table\" and payload.poolUids) or nil",
        "\t\tlocal codes     = (typeof(payload.codes) == \"table\" and payload.codes) or nil",
        "\t\tlocal poolCodes = (typeof(payload.poolCodes) == \"table\" and payload.poolCodes) or nil",
        "",
        "\t\t-- ログヘッダ",
        "\t\tlocal function head5(list)",
        "\t\t\tif typeof(list) ~= \"table\" then return \"-\" end",
        "\t\t\tlocal out, n = {}, math.min(#list, 5)",
        "\t\t\tfor i = 1, n do out[i] = tostring(list[i]) end",
        "\t\t\treturn table.concat(out, \",\")",
        "\t\tend",
        "",
        "\t\tLOG.debug(\"[deps] DeckStore=%s DeckOps=%s CardEngine=%s\",",
        "\t\t\ttostring(ctx.DeckStore ~= nil), tostring(ctx.DeckOps ~= nil), tostring(ctx.CardEngine ~= nil))",
        "\t\tLOG.info(\"[begin] run=%s | uid=%s uids[%s]=[%s] poolUids[%s]=[%s] codes[%s]=[%s] poolCodes[%s]=[%s]\",",
        "\t\t\ttostring(runId), tostring(uid),",
        "\t\t\ttostring(uids and #uids or 0), head5(uids),",
        "\t\t\ttostring(poolUids and #poolUids or 0), head5(poolUids),",
        "\t\t\ttostring(codes and #codes or 0), head5(codes),",
        "\t\t\ttostring(poolCodes and #poolCodes or 0), head5(poolCodes)",
        "\t\t)",
        "",
        "\t\t--─────────────────────────────────────────────────────",
        "\t\t-- helpers",
        "\t\t--─────────────────────────────────────────────────────",
        "\t\tlocal function listToSet(list)",
        "\t\t\tif typeof(list) ~= \"table\" then return nil end",
        "\t\t\tlocal s = {}",
        "\t\t\tfor _, v in ipairs(list) do s[v] = true end",
        "\t\t\treturn s",
        "\t\tend",
        "\t\tlocal uidSet      = listToSet(uids)",
        "\t\tlocal poolUidSet  = listToSet(poolUids)",
        "\t\tlocal codeSet     = listToSet(codes)",
        "\t\tlocal poolCodeSet = listToSet(poolCodes)",
        "",
        "\t\tlocal function alreadyTagged(card)",
        "\t\t\tif typeof(card) ~= \"table\" or typeof(card.tags) ~= \"table\" then return false end",
        "\t\t\tfor _, t in ipairs(card.tags) do if t == TAG then return true end end",
        "\t\t\treturn false",
        "\t\tend",
        "",
        "\t\tlocal function deepcopy(tbl, seen)",
        "\t\t\tif typeof(tbl) ~= \"table\" then return tbl end",
        "\t\t\tseen = seen or {}",
        "\t\t\tif seen[tbl] then return seen[tbl] end",
        "\t\t\tlocal out = {}",
        "\t\t\tseen[tbl] = out",
        "\t\t\tfor k, v in pairs(tbl) do",
        "\t\t\t\tout[deepcopy(k, seen)] = deepcopy(v, seen)",
        "\t\t\tend",
        "\t\t\treturn out",
        "\t\tend",
        "",
        "\t\tlocal function cardStr(c:any)",
        "\t\t\tif typeof(c) ~= \"table\" then return \"<nil>\" end",
        "\t\t\treturn string.format(\"{uid=%s code=%s kind=%s month=%s idx=%s tags=%s}\",",
        "\t\t\t\ttostring(c.uid), tostring(c.code), tostring(c.kind),",
        "\t\t\t\ttostring(c.month), tostring(c.idx),",
        "\t\t\t\t(function()",
        "\t\t\t\t\tif typeof(c.tags) ~= \"table\" then return \"[]\" end",
        "\t\t\t\t\tlocal t = {}",
        "\t\t\t\t\tfor i,v in ipairs(c.tags) do t[i] = tostring(v) end",
        "\t\t\t\t\treturn \"[\"..table.concat(t, \",\")..\"]\"",
        "\t\t\t\tend)()",
        "\t\t\t)",
        "\t\tend",
        "",
        "\t\t-- UID prefix 推定（code 優先、無ければ month/idx から作成）",
        "\t\tlocal function codePrefixOf(entry)",
        "\t\t\tlocal code = tostring(entry.code or \"\")",
        "\t\t\tif code ~= \"\" then return code end",
        "\t\t\tlocal mm = tonumber(entry.month); local ii = tonumber(entry.idx)",
        "\t\t\tif typeof(mm)==\"number\" and typeof(ii)==\"number\" then",
        "\t\t\t\treturn string.format(\"%02d%02d\", mm, ii)",
        "\t\t\tend",
        "\t\t\treturn \"0000\"",
        "\t\tend",
        "",
        "\t\t-- 既存UIDを走査して \"CODE#NNN\" の NNN の最大値+1 を採番",
        "\t\tlocal function allocNewUid(store, sourceEntry)",
        "\t\t\tlocal prefix = codePrefixOf(sourceEntry)",
        "\t\t\tlocal maxN = 0",
        "\t\t\tlocal entries = (store and store.entries) or {}",
        "\t\t\tfor _, e in ipairs(entries) do",
        "\t\t\t\tlocal uid0 = tostring(e.uid or \"\")",
        "\t\t\t\tif string.sub(uid0, 1, #prefix + 1) == (prefix .. \"#\") then",
        "\t\t\t\t\tlocal suffix = tonumber(string.sub(uid0, #prefix + 2)) or 0",
        "\t\t\t\t\tif suffix > maxN then maxN = suffix end",
        "\t\t\t\tend",
        "\t\t\tend",
        "\t\t\tlocal nextN = math.clamp(maxN + 1, 1, 9999)",
        "\t\t\treturn string.format(\"%s#%03d\", prefix, nextN)",
        "\t\tend",
        "",
        "\t\t-- UID で1件置換（※ここで **新規UID** を反映させる）",
        "\t\tlocal function replaceOneByUidWithNew(store, oldUid, newEntryWithNewUid)",
        "\t\t\tlocal entries = (store and store.entries) or {}",
        "\t\t\tlocal n = #entries; if n == 0 then return store end",
        "\t\t\tlocal out = table.create(n)",
        "\t\t\tlocal done = false",
        "\t\t\tfor i = 1, n do",
        "\t\t\t\tlocal e = entries[i]",
        "\t\t\t\tif (not done) and e and e.uid == oldUid then",
        "\t\t\t\t\tlocal c = deepcopy(newEntryWithNewUid or {})",
        "\t\t\t\t\t-- newEntry 側の uid/code/month/idx を **優先採用**（＝完全置換）",
        "\t\t\t\t\tout[i]  = c",
        "\t\t\t\t\tdone    = true",
        "\t\t\t\telse",
        "\t\t\t\t\tout[i] = e",
        "\t\t\t\tend",
        "\t\t\tend",
        "\t\t\tif done then",
        "\t\t\t\tLOG.debug(\"[replaceByUid(new)] old=%s -> %s\", tostring(oldUid), cardStr(newEntryWithNewUid))",
        "\t\t\telse",
        "\t\t\t\tLOG.warn(\"[replaceByUid(new)] uid=%s not found (no-op)\", tostring(oldUid))",
        "\t\t\tend",
        "\t\t\treturn { v = 3, entries = out }",
        "\t\tend",
        "",
        "\t\t-- code で1件置換（フォールバック／新UIDで上書き）",
        "\t\tlocal function replaceOneByCodeWithNew(store, codeX, newEntryWithNewUid)",
        "\t\t\tlocal entries = (store and store.entries) or {}",
        "\t\t\tlocal n = #entries; if n == 0 then return store end",
        "\t\t\tlocal out = table.create(n)",
        "\t\t\tlocal done = false",
        "\t\t\tfor i = 1, n do",
        "\t\t\t\tlocal e = entries[i]",
        "\t\t\t\tif (not done) and e and e.code == codeX then",
        "\t\t\t\t\tlocal c = deepcopy(newEntryWithNewUid or {})",
        "\t\t\t\t\tout[i]  = c",
        "\t\t\t\t\tdone    = true",
        "\t\t\t\telse",
        "\t\t\t\t\tout[i] = e",
        "\t\t\t\tend",
        "\t\t\tend",
        "\t\t\tif done then",
        "\t\t\t\tLOG.debug(\"[replaceByCode(new)] code=%s -> %s\", tostring(codeX), cardStr(newEntryWithNewUid))",
        "\t\t\telse",
        "\t\t\t\tLOG.warn(\"[replaceByCode(new)] code=%s not found (no-op)\", tostring(codeX))",
        "\t\t\tend",
        "\t\t\treturn { v = 3, entries = out }",
        "\t\tend",
        "",
        "\t\t-- 対象（コピー元）",
        "\t\tlocal function pickSource(store)",
        "\t\t\tlocal entries = (store and store.entries) or {}",
        "\t\t\tif #entries == 0 then return nil, \"empty-store\" end",
        "",
        "\t\t\t-- 0) direct uid",
        "\t\t\tif uid and uid ~= \"\" then",
        "\t\t\t\tfor _, e in ipairs(entries) do",
        "\t\t\t\t\tif e and e.uid == uid then return e, \"direct-uid\" end",
        "\t\t\t\tend",
        "\t\t\tend",
        "\t\t\t-- 1) uids set",
        "\t\t\tif uidSet then",
        "\t\t\t\tlocal cand = {}",
        "\t\t\t\tfor _, e in ipairs(entries) do",
        "\t\t\t\t\tif e and e.uid and uidSet[e.uid] then cand[#cand+1] = e end",
        "\t\t\t\tend",
        "\t\t\t\tif #cand > 0 then return cand[rng:NextInteger(1, #cand)], \"uids\" end",
        "\t\t\tend",
        "\t\t\t-- 2) poolUids set",
        "\t\t\tif poolUidSet then",
        "\t\t\t\tlocal cand = {}",
        "\t\t\t\tfor _, e in ipairs(entries) do",
        "\t\t\t\t\tif e and e.uid and poolUidSet[e.uid] then cand[#cand+1] = e end",
        "\t\t\t\tend",
        "\t\t\t\tif #cand > 0 then return cand[rng:NextInteger(1, #cand)], \"poolUids\" end",
        "\t\t\tend",
        "\t\t\t-- 3) codes set",
        "\t\t\tif codeSet then",
        "\t\t\t\tlocal cand = {}",
        "\t\t\t\tfor _, e in ipairs(entries) do",
        "\t\t\t\t\tif e and e.code and codeSet[e.code] then cand[#cand+1] = e end",
        "\t\t\t\tend",
        "\t\t\t\tif #cand > 0 then return cand[rng:NextInteger(1, #cand)], \"codes\" end",
        "\t\t\tend",
        "\t\t\t-- 4) poolCodes set",
        "\t\t\tif poolCodeSet then",
        "\t\t\t\tlocal cand = {}",
        "\t\t\t\tfor _, e in ipairs(entries) do",
        "\t\t\t\t\tif e and e.code and poolCodeSet[e.code] then cand[#cand+1] = e end",
        "\t\t\t\tend",
        "\t\t\t\tif #cand > 0 then return cand[rng:NextInteger(1, #cand)], \"poolCodes\" end",
        "\t\t\tend",
        "\t\t\treturn nil, \"no-candidate\"",
        "\t\tend",
        "",
        "\t\t-- 宛先（最弱候補）を自動選定：chaff(1) < ribbon/seed(2) < bright(3)",
        "\t\tlocal function pickDestWeakest(store, sourceUid)",
        "\t\t\tlocal entries = (store and store.entries) or {}",
        "\t\t\tif #entries == 0 then return nil end",
        "\t\t\tlocal function prioOf(e)",
        "\t\t\t\tlocal k = tostring(e.kind or \"\")",
        "\t\t\t\tif k == \"chaff\" then return 1 end",
        "\t\t\t\tif k == \"ribbon\" or k == \"seed\" then return 2 end",
        "\t\t\t\treturn 3",
        "\t\t\tend",
        "\t\t\tlocal best, bestP = nil, math.huge",
        "\t\t\tfor _, e in ipairs(entries) do",
        "\t\t\t\tif e and e.uid ~= sourceUid then",
        "\t\t\t\t\tlocal p = prioOf(e)",
        "\t\t\t\t\tif p < bestP then best, bestP = e, p end",
        "\t\t\t\tend",
        "\t\t\tend",
        "\t\t\treturn best",
        "\t\tend",
        "",
        "\t\t--─────────────────────────────────────────────────────",
        "\t\t-- Main（DeckStore.transact）",
        "\t\t--─────────────────────────────────────────────────────",
        "\t\tlocal t0 = os.clock()",
        "\t\tLOG.debug(\"[transact] run=%s enter\", tostring(runId))",
        "",
        "\t\treturn ctx.DeckStore.transact(runId, function(store)",
        "\t\t\tlocal storeSize = (store and store.entries and #store.entries) or 0",
        "\t\t\tLOG.debug(\"[store] size=%s\", tostring(storeSize))",
        "",
        "\t\t\t-- 1) コピー元",
        "\t\t\tlocal source, via = pickSource(store)",
        "\t\t\tif not source then",
        "\t\t\t\tLOG.info(\"[result] no-source (via=%s)\", tostring(via))",
        "\t\t\t\treturn store, { ok = true, changed = 0, meta = \"no-source\", pickReason = via }",
        "\t\t\tend",
        "\t\t\tLOG.debug(\"[source] via=%s %s\", tostring(via), cardStr(source))",
        "",
        "\t\t\t-- 2) 宛先（弱い候補）",
        "\t\t\tlocal dest = pickDestWeakest(store, source.uid)",
        "\t\t\tif not dest then",
        "\t\t\t\tLOG.info(\"[result] no-dest (store empty or single)\")",
        "\t\t\t\treturn store, { ok = true, changed = 0, meta = \"no-dest\" }",
        "\t\t\tend",
        "\t\t\tLOG.debug(\"[dest] %s\", cardStr(dest))",
        "",
        "\t\t\tif alreadyTagged(dest) then",
        "\t\t\t\tLOG.info(\"[result] dest-already-applied uid=%s code=%s\", tostring(dest.uid), tostring(dest.code))",
        "\t\t\t\treturn store, { ok = true, changed = 0, meta = \"already-applied\", targetUid = dest.uid, targetCode = dest.code }",
        "\t\t\tend",
        "",
        "\t\t\t-- 3) 完全複製：source を deep clone（uid は付け替える）",
        "\t\t\tlocal copyAll = deepcopy(source)",
        "\t\t\tcopyAll.uid = allocNewUid(store, source)   -- ★ 新規UIDを採番",
        "\t\t\t-- tags は複製のうえ、今回のTAGを付与（DeckOps.attachTag があればそれを使う）",
        "\t\t\tif ctx.DeckOps and ctx.DeckOps.attachTag then",
        "\t\t\t\tcopyAll = ctx.DeckOps.attachTag(copyAll, TAG)",
        "\t\t\telse",
        "\t\t\t\tcopyAll.tags = typeof(copyAll.tags)==\"table\" and copyAll.tags or {}",
        "\t\t\t\ttable.insert(copyAll.tags, TAG)",
        "\t\t\tend",
        "",
        "\t\t\tLOG.debug(\"[copy(new-uid)] %s\", cardStr(copyAll))",
        "",
        "\t\t\t-- 4) 置換：宛先スロットを **copyAll（新UID）** で上書き（＝サイズは不変）",
        "\t\t\tif dest.uid and dest.uid ~= \"\" then",
        "\t\t\t\tstore = replaceOneByUidWithNew(store, dest.uid, copyAll)",
        "\t\t\telse",
        "\t\t\t\tstore = replaceOneByCodeWithNew(store, dest.code, copyAll)"
      ],
      "truncated": true,
      "analysis": {
        "waitForChild": [
          "SharedModules",
          "Logger"
        ],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/shared/Deck/Effects/kito/Tori_Brighten.lua",
      "ext": "lua",
      "binary": false,
      "size": 12652,
      "mtime": "2025-10-02T03:49:07.896519+00:00",
      "head": [
        "-- ReplicatedStorage/SharedModules/Deck/Effects/kito/Tori_Brighten.lua",
        "-- Rooster (KITO): convert one target card to \"bright\" (UID-first)",
        "--  - Effect IDs: \"kito.tori_brighten\" (primary), \"Tori_Brighten\" (legacy alias)",
        "--  - Prioritize payload.uid / payload.uids / payload.poolUids (UID uniquely identifies one card)",
        "--  - Fallback to codes only if no UID is provided",
        "--  - DeckStore (v3) is treated as immutable; use DeckStore.transact to replace one entry (UID-first)",
        "--  - RNG is separated (ctx.rng preferred, otherwise Random.new())",
        "--  - If the month has no \"bright\", do nothing (meta returned)",
        "--  - Diagnostic logs (scope: Effects.kito.tori_brighten)",
        "return function(Effects)",
        "\t--─────────────────────────────────────────────────────",
        "\t-- Logger (optional)",
        "\t--─────────────────────────────────────────────────────",
        "\tlocal LOG do",
        "\t\tlocal ok, Logger = pcall(function()",
        "\t\t\treturn require(game:GetService(\"ReplicatedStorage\")",
        "\t\t\t\t:WaitForChild(\"SharedModules\")",
        "\t\t\t\t:WaitForChild(\"Logger\"))",
        "\t\tend)",
        "\t\tif ok and Logger and type(Logger.scope) == \"function\" then",
        "\t\t\tLOG = Logger.scope(\"Effects.kito.tori_brighten\")",
        "\t\telse",
        "\t\t\tLOG = { info=function(...) end, debug=function(...) end, warn=function(...) warn(string.format(...)) end }",
        "\t\tend",
        "\tend",
        "",
        "\t--─────────────────────────────────────────────────────",
        "\t-- Shared handler for both effect IDs",
        "\t--─────────────────────────────────────────────────────",
        "\tlocal function handler(ctx)",
        "\t\tlocal payload     = ctx.payload or {}",
        "\t\tlocal uidScalar   = (typeof(payload.uid)  == \"string\" and payload.uid)  or nil",
        "\t\tlocal uids        = (typeof(payload.uids) == \"table\"  and payload.uids) or nil",
        "\t\tlocal poolUids    = (typeof(payload.poolUids) == \"table\" and payload.poolUids) or nil",
        "\t\tlocal codes       = (typeof(payload.codes) == \"table\" and payload.codes) or nil -- legacy compat",
        "\t\tlocal poolCodes   = (typeof(payload.poolCodes) == \"table\" and payload.poolCodes) or nil -- legacy compat",
        "",
        "\t\tlocal tagMark     = tostring(payload.tag or \"eff:kito_tori_bright\")",
        "\t\tlocal pref        = tostring(payload.preferKind or \"bright\"):lower()",
        "\t\tlocal preferKind  = (pref == \"bright\") and \"bright\" or \"bright\" -- normalize to EN \"bright\"",
        "",
        "\t\tlocal runId       = ctx.runId",
        "\t\tlocal rng         = ctx.rng or Random.new()",
        "",
        "\t\t-- quick payload summary for logs",
        "\t\tlocal function head5(list)",
        "\t\t\tif typeof(list) ~= \"table\" then return \"-\" end",
        "\t\t\tlocal out, n = {}, math.min(#list, 5)",
        "\t\t\tfor i = 1, n do out[i] = tostring(list[i]) end",
        "\t\t\treturn table.concat(out, \",\")",
        "\t\tend",
        "",
        "\t\tLOG.debug(\"[deps] DeckStore=%s DeckOps=%s CardEngine=%s\",",
        "\t\t\ttostring(ctx.DeckStore ~= nil), tostring(ctx.DeckOps ~= nil), tostring(ctx.CardEngine ~= nil))",
        "\t\tLOG.info(\"[begin] run=%s prefer=%s tag=%s | uid=%s uids[%s]=[%s] poolUids[%s]=[%s] codes[%s]=[%s] poolCodes[%s]=[%s]\",",
        "\t\t\ttostring(runId), preferKind, tagMark, tostring(uidScalar),",
        "\t\t\ttostring(uids and #uids or 0), head5(uids),",
        "\t\t\ttostring(poolUids and #poolUids or 0), head5(poolUids),",
        "\t\t\ttostring(codes and #codes or 0), head5(codes),",
        "\t\t\ttostring(poolCodes and #poolCodes or 0), head5(poolCodes)",
        "\t\t)",
        "",
        "\t\t--─────────────────────────────────────────────────────",
        "\t\t-- helpers",
        "\t\t--─────────────────────────────────────────────────────",
        "\t\tlocal function listToSet(list)",
        "\t\t\tif typeof(list) ~= \"table\" then return nil end",
        "\t\t\tlocal s = {}",
        "\t\t\tfor _, v in ipairs(list) do s[v] = true end",
        "\t\t\treturn s",
        "\t\tend",
        "",
        "\t\tlocal uidSet = listToSet(uids) or {}",
        "\t\tif uidScalar then uidSet[uidScalar] = true end",
        "\t\tlocal poolUidSet  = listToSet(poolUids)",
        "\t\tlocal codeSet     = listToSet(codes)",
        "\t\tlocal poolCodeSet = listToSet(poolCodes)",
        "",
        "\t\tlocal function monthFromCard(card:any): number?",
        "\t\t\tif not card then return nil end",
        "\t\t\tif card.month ~= nil then",
        "\t\t\t\tlocal m = tonumber(card.month)",
        "\t\t\t\tif typeof(m) == \"number\" then return m end",
        "\t\t\tend",
        "\t\t\tlocal code = tostring(card.code or \"\")",
        "\t\t\tif #code >= 2 then",
        "\t\t\t\tlocal mm = tonumber(string.sub(code, 1, 2))",
        "\t\t\t\tif typeof(mm) == \"number\" then return mm end",
        "\t\t\tend",
        "\t\t\treturn nil",
        "\t\tend",
        "",
        "\t\t-- EN-only: a month is eligible only if it contains a \"bright\" definition",
        "\t\tlocal function monthHasBright(month:number?): boolean",
        "\t\t\tif not month or not ctx.CardEngine or not ctx.CardEngine.cardsByMonth then return false end",
        "\t\t\tlocal defs = ctx.CardEngine.cardsByMonth[month]",
        "\t\t\tif typeof(defs) ~= \"table\" then return false end",
        "\t\t\tfor _, def in ipairs(defs) do",
        "\t\t\t\tif tostring(def.kind or \"\") == \"bright\" then",
        "\t\t\t\t\treturn true",
        "\t\t\t\tend",
        "\t\t\tend",
        "\t\t\treturn false",
        "\t\tend",
        "",
        "\t\tlocal function alreadyTagged(card)",
        "\t\t\tif typeof(card) ~= \"table\" or typeof(card.tags) ~= \"table\" then return false end",
        "\t\t\tfor _, t in ipairs(card.tags) do if t == tagMark then return true end end",
        "\t\t\treturn false",
        "\t\tend",
        "",
        "\t\tlocal function cardStr(c:any)",
        "\t\t\tif typeof(c) ~= \"table\" then return \"<nil>\" end",
        "\t\t\treturn string.format(\"{uid=%s code=%s kind=%s month=%s idx=%s tags=%s}\",",
        "\t\t\t\ttostring(c.uid), tostring(c.code), tostring(c.kind),",
        "\t\t\t\ttostring(c.month), tostring(c.idx),",
        "\t\t\t\t(function()",
        "\t\t\t\t\tif typeof(c.tags) ~= \"table\" then return \"[]\" end",
        "\t\t\t\t\tlocal t = {}",
        "\t\t\t\t\tfor i,v in ipairs(c.tags) do t[i] = tostring(v) end",
        "\t\t\t\t\treturn \"[\"..table.concat(t, \",\")..\"]\"",
        "\t\t\t\tend)()",
        "\t\t\t)",
        "\t\tend",
        "",
        "\t\t-- Replace one entry by UID (preserve UID and core fields)",
        "\t\tlocal function replaceOneByUid(store, uid, newEntry)",
        "\t\t\tlocal entries = (store and store.entries) or {}",
        "\t\t\tlocal n = #entries; if n == 0 then return store end",
        "\t\t\tlocal out = table.create(n)",
        "\t\t\tlocal done = false",
        "\t\t\tfor i = 1, n do",
        "\t\t\t\tlocal e = entries[i]",
        "\t\t\t\tif (not done) and e and e.uid == uid then",
        "\t\t\t\t\tlocal c = table.clone(newEntry or {})",
        "\t\t\t\t\tc.uid   = e.uid",
        "\t\t\t\t\tc.code  = c.code  or e.code",
        "\t\t\t\t\tc.month = c.month or e.month",
        "\t\t\t\t\tc.idx   = c.idx   or e.idx",
        "\t\t\t\t\tout[i]  = c",
        "\t\t\t\t\tdone    = true",
        "\t\t\t\telse",
        "\t\t\t\t\tout[i] = e",
        "\t\t\t\tend",
        "\t\t\tend",
        "\t\t\tif done then",
        "\t\t\t\tLOG.debug(\"[replaceByUid] uid=%s -> %s\", tostring(uid), cardStr(newEntry))",
        "\t\t\telse",
        "\t\t\t\tLOG.warn(\"[replaceByUid] uid=%s not found (no-op)\", tostring(uid))",
        "\t\t\tend",
        "\t\t\treturn { v = 3, entries = out }",
        "\t\tend",
        "",
        "\t\t-- Replace one entry by code (legacy fallback)",
        "\t\tlocal function replaceOneByCode(store, code, newEntry)",
        "\t\t\tlocal entries = (store and store.entries) or {}",
        "\t\t\tlocal n = #entries; if n == 0 then return store end",
        "\t\t\tlocal out = table.create(n)",
        "\t\t\tlocal done = false",
        "\t\t\tfor i = 1, n do",
        "\t\t\t\tlocal e = entries[i]",
        "\t\t\t\tif (not done) and e and e.code == code then",
        "\t\t\t\t\tlocal c = table.clone(newEntry or {})",
        "\t\t\t\t\tc.uid   = e.uid",
        "\t\t\t\t\tc.code  = c.code  or e.code",
        "\t\t\t\t\tc.month = c.month or e.month",
        "\t\t\t\t\tc.idx   = c.idx   or e.idx",
        "\t\t\t\t\tout[i]  = c",
        "\t\t\t\t\tdone    = true",
        "\t\t\t\telse",
        "\t\t\t\t\tout[i] = e",
        "\t\t\t\tend",
        "\t\t\tend",
        "\t\t\tif done then",
        "\t\t\t\tLOG.debug(\"[replaceByCode] code=%s -> %s\", tostring(code), cardStr(newEntry))",
        "\t\t\telse",
        "\t\t\t\tLOG.warn(\"[replaceByCode] code=%s not found (no-op)\", tostring(code))",
        "\t\t\tend",
        "\t\t\treturn { v = 3, entries = out }",
        "\t\tend",
        "",
        "\t\t-- Target selection order: UID → Code → pool(UID/Code) → any eligible month",
        "\t\tlocal function pickTarget(store)",
        "\t\t\tlocal entries = (store and store.entries) or {}",
        "\t\t\t-- 0) direct UID(s)",
        "\t\t\tif uidSet and next(uidSet) ~= nil then",
        "\t\t\t\tlocal list = {}",
        "\t\t\t\tfor _, e in ipairs(entries) do",
        "\t\t\t\t\tif e and e.uid and uidSet[e.uid] and monthHasBright(monthFromCard(e)) then",
        "\t\t\t\t\t\tlist[#list+1] = e",
        "\t\t\t\t\tend",
        "\t\t\t\tend",
        "\t\t\t\tLOG.debug(\"[pick] direct-uid candidates=%d\", #list)",
        "\t\t\t\tif #list > 0 then return list[rng:NextInteger(1, #list)], \"direct-uid\" end",
        "\t\t\tend",
        "\t\t\t-- 1) direct code(s)",
        "\t\t\tif codeSet then",
        "\t\t\t\tlocal list = {}",
        "\t\t\t\tfor _, e in ipairs(entries) do",
        "\t\t\t\t\tif e and e.code and codeSet[e.code] and monthHasBright(monthFromCard(e)) then",
        "\t\t\t\t\t\tlist[#list+1] = e",
        "\t\t\t\t\tend",
        "\t\t\t\tend",
        "\t\t\t\tLOG.debug(\"[pick] direct-code candidates=%d\", #list)",
        "\t\t\t\tif #list > 0 then return list[rng:NextInteger(1, #list)], \"direct-code\" end",
        "\t\t\tend",
        "\t\t\t-- 2) pool by UID",
        "\t\t\tif poolUidSet then",
        "\t\t\t\tlocal cand = {}",
        "\t\t\t\tfor _, e in ipairs(entries) do",
        "\t\t\t\t\tif e and e.uid and poolUidSet[e.uid] and monthHasBright(monthFromCard(e)) then",
        "\t\t\t\t\t\tcand[#cand+1] = e",
        "\t\t\t\t\tend",
        "\t\t\t\tend",
        "\t\t\t\tLOG.debug(\"[pick] pool-uid candidates=%d\", #cand)",
        "\t\t\t\tif #cand > 0 then return cand[rng:NextInteger(1, #cand)], \"pool-uid\" end",
        "\t\t\tend",
        "\t\t\t-- 3) pool by code",
        "\t\t\tif poolCodeSet then",
        "\t\t\t\tlocal cand = {}",
        "\t\t\t\tfor _, e in ipairs(entries) do",
        "\t\t\t\t\tif e and e.code and poolCodeSet[e.code] and monthHasBright(monthFromCard(e)) then",
        "\t\t\t\t\t\tcand[#cand+1] = e",
        "\t\t\t\t\tend",
        "\t\t\t\tend",
        "\t\t\t\tLOG.debug(\"[pick] pool-code candidates=%d\", #cand)",
        "\t\t\t\tif #cand > 0 then return cand[rng:NextInteger(1, #cand)], \"pool-code\" end",
        "\t\t\tend",
        "\t\t\t-- 4) any entry whose month has \"bright\"",
        "\t\t\tlocal all = {}",
        "\t\t\tfor _, e in ipairs(entries) do",
        "\t\t\t\tif monthHasBright(monthFromCard(e)) then all[#all+1] = e end",
        "\t\t\tend",
        "\t\t\tLOG.debug(\"[pick] any-bright-month candidates=%d\", #all)",
        "\t\t\tif #all > 0 then return all[rng:NextInteger(1, #all)], \"any-bright-month\" end",
        "\t\t\treturn nil, \"none\"",
        "\t\tend",
        "",
        "\t\t--─────────────────────────────────────────────────────",
        "\t\t-- Main (DeckStore.transact)",
        "\t\t--─────────────────────────────────────────────────────",
        "\t\tlocal t0 = os.clock()",
        "\t\tLOG.debug(\"[transact] run=%s enter\", tostring(runId))",
        "\t\treturn ctx.DeckStore.transact(runId, function(store)",
        "\t\t\tlocal storeSize = (store and store.entries and #store.entries) or 0",
        "\t\t\tLOG.debug(\"[store] size=%s\", tostring(storeSize))",
        "",
        "\t\t\tlocal target, reason = pickTarget(store)",
        "\t\t\tif not target then",
        "\t\t\t\tLOG.info(\"[result] no-eligible-target (pickReason=%s)\", tostring(reason))",
        "\t\t\t\treturn store, { ok = true, changed = 0, meta = \"no-eligible-target\", pickReason = reason }",
        "\t\t\tend",
        "",
        "\t\t\tLOG.debug(\"[target] via=%s %s\", tostring(reason), cardStr(target))",
        "",
        "\t\t\t-- If already tagged, skip (idempotent)",
        "\t\t\tif alreadyTagged(target) then",
        "\t\t\t\tLOG.info(\"[result] already-applied uid=%s code=%s (via=%s)\", tostring(target.uid), tostring(target.code), tostring(reason))",
        "\t\t\t\treturn store, { ok = true, changed = 0, meta = \"already-applied\", targetUid = target.uid, targetCode = target.code, pickReason = reason }",
        "\t\t\tend",
        "",
        "\t\t\t-- Convert to \"bright\"（同月の bright に idx を寄せる）",
        "\t\t\tlocal beforeIdx, beforeCode, beforeKind = target.idx, target.code, target.kind",
        "\t\t\tlocal next1 = ctx.DeckOps.convertKind(target, preferKind)",
        "\t\t\tlocal afterIdx, afterCode, afterKind = next1.idx, next1.code, next1.kind",
        "\t\t\tLOG.debug(\"[convert] idx:%s→%s code:%s→%s kind:%s→%s\",",
        "\t\t\t\ttostring(beforeIdx), tostring(afterIdx),",
        "\t\t\t\ttostring(beforeCode), tostring(afterCode),",
        "\t\t\t\ttostring(beforeKind), tostring(afterKind))",
        "",
        "\t\t\tif tostring(afterKind or \"\") ~= \"bright\" then",
        "\t\t\t\tLOG.info(\"[result] month-has-no-bright uid=%s code=%s (via=%s)\", tostring(target.uid), tostring(target.code), tostring(reason))",
        "\t\t\t\treturn store, { ok = true, changed = 0, meta = \"month-has-no-bright\", targetUid = target.uid, targetCode = target.code, pickReason = reason }",
        "\t\t\tend",
        "",
        "\t\t\t-- Tag（UID 維持）",
        "\t\t\tlocal next2 = ctx.DeckOps.attachTag(next1, tagMark)",
        "\t\t\tif not next2.uid then next2.uid = target.uid end",
        "\t\t\tLOG.debug(\"[tagged] %s\", cardStr(next2))",
        "",
        "\t\t\t-- Replace: prefer UID when available",
        "\t\t\tif target.uid and target.uid ~= \"\" then",
        "\t\t\t\tstore = replaceOneByUid(store, target.uid, next2)",
        "\t\t\telse",
        "\t\t\t\tstore = replaceOneByCode(store, target.code, next2)",
        "\t\t\tend",
        "",
        "\t\t\tlocal dt = (os.clock() - t0) * 1000",
        "\t\t\tLOG.info(\"[result] ok changed=1 uid=%s code=%s via=%s in %.2fms\",",
        "\t\t\t\ttostring(target.uid), tostring(target.code), tostring(reason), dt)",
        "\t\t\treturn store, {",
        "\t\t\t\tok       = true,",
        "\t\t\t\tchanged  = 1,",
        "\t\t\t\ttargetUid  = target.uid,",
        "\t\t\t\ttargetCode = target.code,",
        "\t\t\t\tpickReason = reason,",
        "\t\t\t}",
        "\t\tend)",
        "\tend",
        ""
      ],
      "truncated": true,
      "analysis": {
        "waitForChild": [
          "SharedModules",
          "Logger"
        ],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/shared/Deck/Effects/kito/Uma_Seedize.lua",
      "ext": "lua",
      "binary": false,
      "size": 14064,
      "mtime": "2025-10-02T03:28:01.544793+00:00",
      "head": [
        "-- ReplicatedStorage/SharedModules/Deck/Effects/kito/Uma_Seedize.lua",
        "-- Uma (KITO / DOT-ONLY): convert one target card to \"seed\" (UID-first)",
        "--  - Effect ID: \"kito.uma_seed\"（唯一の真実）",
        "--  - Prioritize payload.uid / payload.uids / payload.poolUids (UID uniquely identifies one card)",
        "--  - Fallback to codes only if no UID is provided",
        "--  - DeckStore (v3) is treated as immutable; use DeckStore.transact to replace one entry (UID-first)",
        "--  - RNG is separated (ctx.rng preferred, otherwise Random.new())",
        "--  - If the month has no \"seed\", do nothing (meta returned)",
        "--  - Diagnostic logs (scope: Effects.kito.uma_seed)",
        "",
        "return function(Effects)",
        "\t--─────────────────────────────────────────────────────",
        "\t-- Logger (optional)",
        "\t--─────────────────────────────────────────────────────",
        "\tlocal LOG do",
        "\t\tlocal ok, Logger = pcall(function()",
        "\t\t\treturn require(game:GetService(\"ReplicatedStorage\")",
        "\t\t\t\t:WaitForChild(\"SharedModules\")",
        "\t\t\t\t:WaitForChild(\"Logger\"))",
        "\t\tend)",
        "\t\tif ok and Logger and type(Logger.scope) == \"function\" then",
        "\t\t\tLOG = Logger.scope(\"Effects.kito.uma_seed\")",
        "\t\telse",
        "\t\t\tLOG = { info=function(...) end, debug=function(...) end, warn=function(...) warn(string.format(...)) end }",
        "\t\tend",
        "\tend",
        "",
        "\t--─────────────────────────────────────────────────────",
        "\t-- Shared handler (DOT-ONLY)",
        "\t--─────────────────────────────────────────────────────",
        "\tlocal function handler(ctx)",
        "\t\tlocal payload     = ctx.payload or {}",
        "\t\tlocal uidScalar   = (typeof(payload.uid)  == \"string\" and payload.uid)  or nil",
        "\t\tlocal uids        = (typeof(payload.uids) == \"table\"  and payload.uids) or nil",
        "\t\tlocal poolUids    = (typeof(payload.poolUids) == \"table\" and payload.poolUids) or nil",
        "\t\tlocal codes       = (typeof(payload.codes) == \"table\" and payload.codes) or nil -- legacy compat (code選択だけ)",
        "\t\tlocal poolCodes   = (typeof(payload.poolCodes) == \"table\" and payload.poolCodes) or nil -- legacy compat",
        "",
        "\t\t-- ★ DOT-ONLY タグ表記",
        "\t\tlocal tagMark     = tostring(payload.tag or \"eff:kito.uma_seed\")",
        "\t\tlocal preferKind  = \"seed\"",
        "",
        "\t\tlocal runId       = ctx.runId",
        "\t\tlocal rng         = ctx.rng or Random.new()",
        "",
        "\t\tlocal function head5(list)",
        "\t\t\tif typeof(list) ~= \"table\" then return \"-\" end",
        "\t\t\tlocal out, n = {}, math.min(#list, 5)",
        "\t\t\tfor i = 1, n do out[i] = tostring(list[i]) end",
        "\t\t\treturn table.concat(out, \",\")",
        "\t\tend",
        "",
        "\t\tLOG.debug(\"[deps] DeckStore=%s DeckOps=%s CardEngine=%s\",",
        "\t\t\ttostring(ctx.DeckStore ~= nil), tostring(ctx.DeckOps ~= nil), tostring(ctx.CardEngine ~= nil))",
        "\t\tLOG.info(\"[begin] run=%s tag=%s | uid=%s uids[%s]=[%s] poolUids[%s]=[%s] codes[%s]=[%s] poolCodes[%s]=[%s]\",",
        "\t\t\ttostring(runId), tagMark, tostring(uidScalar),",
        "\t\t\ttostring(uids and #uids or 0), head5(uids),",
        "\t\t\ttostring(poolUids and #poolUids or 0), head5(poolUids),",
        "\t\t\ttostring(codes and #codes or 0), head5(codes),",
        "\t\t\ttostring(poolCodes and #poolCodes or 0), head5(poolCodes)",
        "\t\t)",
        "",
        "\t\t--─────────────────────────────────────────────────────",
        "\t\t-- helpers",
        "\t\t--─────────────────────────────────────────────────────",
        "\t\tlocal function listToSet(list)",
        "\t\t\tif typeof(list) ~= \"table\" then return nil end",
        "\t\t\tlocal s = {}",
        "\t\t\tfor _, v in ipairs(list) do s[v] = true end",
        "\t\t\treturn s",
        "\t\tend",
        "",
        "\t\tlocal uidSet = listToSet(uids) or {}",
        "\t\tif uidScalar then uidSet[uidScalar] = true end",
        "\t\tlocal poolUidSet  = listToSet(poolUids)",
        "\t\tlocal codeSet     = listToSet(codes)",
        "\t\tlocal poolCodeSet = listToSet(poolCodes)",
        "",
        "\t\tlocal function monthFromCard(card:any): number?",
        "\t\t\tif not card then return nil end",
        "\t\t\tif card.month ~= nil then",
        "\t\t\t\tlocal m = tonumber(card.month)",
        "\t\t\t\tif typeof(m) == \"number\" then return m end",
        "\t\t\tend",
        "\t\t\tlocal code = tostring(card.code or \"\")",
        "\t\t\tif #code >= 2 then",
        "\t\t\t\tlocal mm = tonumber(string.sub(code, 1, 2))",
        "\t\t\t\tif typeof(mm) == \"number\" then return mm end",
        "\t\t\tend",
        "\t\t\treturn nil",
        "\t\tend",
        "",
        "\t\tlocal function monthHasKind(month:number?, kind:string): boolean",
        "\t\t\tif not month or not ctx.CardEngine or not ctx.CardEngine.cardsByMonth then return false end",
        "\t\t\tlocal defs = ctx.CardEngine.cardsByMonth[month]",
        "\t\t\tif typeof(defs) ~= \"table\" then return false end",
        "\t\t\tfor _, def in ipairs(defs) do",
        "\t\t\t\tif tostring(def.kind or \"\") == kind then",
        "\t\t\t\t\treturn true",
        "\t\t\t\tend",
        "\t\t\tend",
        "\t\t\treturn false",
        "\t\tend",
        "",
        "\t\tlocal function alreadyTagged(card)",
        "\t\t\tif typeof(card) ~= \"table\" or typeof(card.tags) ~= \"table\" then return false end",
        "\t\t\tfor _, t in ipairs(card.tags) do if t == tagMark then return true end end",
        "\t\t\treturn false",
        "\t\tend",
        "",
        "\t\tlocal function cardStr(c:any)",
        "\t\t\tif typeof(c) ~= \"table\" then return \"<nil>\" end",
        "\t\t\treturn string.format(\"{uid=%s code=%s kind=%s month=%s idx=%s tags=%s}\",",
        "\t\t\t\ttostring(c.uid), tostring(c.code), tostring(c.kind),",
        "\t\t\t\ttostring(c.month), tostring(c.idx),",
        "\t\t\t\t(function()",
        "\t\t\t\t\tif typeof(c.tags) ~= \"table\" then return \"[]\" end",
        "\t\t\t\t\tlocal t = {}",
        "\t\t\t\t\tfor i,v in ipairs(c.tags) do t[i] = tostring(v) end",
        "\t\t\t\t\treturn \"[\"..table.concat(t, \",\")..\"]\"",
        "\t\t\t\tend)()",
        "\t\t\t)",
        "\t\tend",
        "",
        "\t\t-- Replace one entry by UID (preserve UID and core fields)",
        "\t\tlocal function replaceOneByUid(store, uid, newEntry)",
        "\t\t\tlocal entries = (store and store.entries) or {}",
        "\t\t\tlocal n = #entries; if n == 0 then return store end",
        "\t\t\tlocal out = table.create(n)",
        "\t\t\tlocal done = false",
        "\t\t\tfor i = 1, n do",
        "\t\t\t\tlocal e = entries[i]",
        "\t\t\t\tif (not done) and e and e.uid == uid then",
        "\t\t\t\t\tlocal c = table.clone(newEntry or {})",
        "\t\t\t\t\tc.uid   = e.uid",
        "\t\t\t\t\tc.code  = c.code  or e.code",
        "\t\t\t\t\tc.month = c.month or e.month",
        "\t\t\t\t\tc.idx   = c.idx   or e.idx",
        "\t\t\t\t\tout[i]  = c",
        "\t\t\t\t\tdone    = true",
        "\t\t\t\telse",
        "\t\t\t\t\tout[i] = e",
        "\t\t\t\tend",
        "\t\t\tend",
        "\t\t\tif done then",
        "\t\t\t\tLOG.debug(\"[replaceByUid] uid=%s -> %s\", tostring(uid), cardStr(newEntry))",
        "\t\t\telse",
        "\t\t\t\tLOG.warn(\"[replaceByUid] uid=%s not found (no-op)\", tostring(uid))",
        "\t\t\tend",
        "\t\t\treturn { v = 3, entries = out }",
        "\t\tend",
        "",
        "\t\t-- Replace one entry by code (legacy fallback)",
        "\t\tlocal function replaceOneByCode(store, code, newEntry)",
        "\t\t\tlocal entries = (store and store.entries) or {}",
        "\t\t\tlocal n = #entries; if n == 0 then return store end",
        "\t\t\tlocal out = table.create(n)",
        "\t\t\tlocal done = false",
        "\t\t\tfor i = 1, n do",
        "\t\t\t\tlocal e = entries[i]",
        "\t\t\t\tif (not done) and e and e.code == code then",
        "\t\t\t\t\tlocal c = table.clone(newEntry or {})",
        "\t\t\t\t\tc.uid   = e.uid",
        "\t\t\t\t\tc.code  = c.code  or e.code",
        "\t\t\t\t\tc.month = c.month or e.month",
        "\t\t\t\t\tc.idx   = c.idx   or e.idx",
        "\t\t\t\t\tout[i]  = c",
        "\t\t\t\t\tdone    = true",
        "\t\t\t\telse",
        "\t\t\t\t\tout[i] = e",
        "\t\t\t\tend",
        "\t\t\tend",
        "\t\t\tif done then",
        "\t\t\t\tLOG.debug(\"[replaceByCode] code=%s -> %s\", tostring(code), cardStr(newEntry))",
        "\t\t\telse",
        "\t\t\t\tLOG.warn(\"[replaceByCode] code=%s not found (no-op)\", tostring(code))",
        "\t\t\tend",
        "\t\t\treturn { v = 3, entries = out }",
        "\t\tend",
        "",
        "\t\t-- Target selection order: UID → Code → pool(UID/Code) → any eligible month",
        "\t\tlocal function pickTarget(store)",
        "\t\t\tlocal entries = (store and store.entries) or {}",
        "\t\t\t-- 0) direct UID(s)",
        "\t\t\tif uidSet and next(uidSet) ~= nil then",
        "\t\t\t\tlocal list = {}",
        "\t\t\t\tfor _, e in ipairs(entries) do",
        "\t\t\t\t\tif e and e.uid and uidSet[e.uid] and monthHasKind(monthFromCard(e), \"seed\") then",
        "\t\t\t\t\t\tlist[#list+1] = e",
        "\t\t\t\t\tend",
        "\t\t\t\tend",
        "\t\t\t\tLOG.debug(\"[pick] direct-uid candidates=%d\", #list)",
        "\t\t\t\tif #list > 0 then return list[rng:NextInteger(1, #list)], \"direct-uid\" end",
        "\t\t\tend",
        "\t\t\t-- 1) direct code(s)",
        "\t\t\tif codeSet then",
        "\t\t\t\tlocal list = {}",
        "\t\t\t\tfor _, e in ipairs(entries) do",
        "\t\t\t\t\tif e and e.code and codeSet[e.code] and monthHasKind(monthFromCard(e), \"seed\") then",
        "\t\t\t\t\t\tlist[#list+1] = e",
        "\t\t\t\t\tend",
        "\t\t\t\tend",
        "\t\t\t\tLOG.debug(\"[pick] direct-code candidates=%d\", #list)",
        "\t\t\t\tif #list > 0 then return list[rng:NextInteger(1, #list)], \"direct-code\" end",
        "\t\t\tend",
        "\t\t\t-- 2) pool by UID",
        "\t\t\tif poolUidSet then",
        "\t\t\t\tlocal cand = {}",
        "\t\t\t\tfor _, e in ipairs(entries) do",
        "\t\t\t\t\tif e and e.uid and poolUidSet[e.uid] and monthHasKind(monthFromCard(e), \"seed\") then",
        "\t\t\t\t\t\tcand[#cand+1] = e",
        "\t\t\t\t\tend",
        "\t\t\t\tend",
        "\t\t\t\tLOG.debug(\"[pick] pool-uid candidates=%d\", #cand)",
        "\t\t\t\tif #cand > 0 then return cand[rng:NextInteger(1, #cand)], \"pool-uid\" end",
        "\t\t\tend",
        "\t\t\t-- 3) pool by code",
        "\t\t\tif poolCodeSet then",
        "\t\t\t\tlocal cand = {}",
        "\t\t\t\tfor _, e in ipairs(entries) do",
        "\t\t\t\t\tif e and e.code and poolCodeSet[e.code] and monthHasKind(monthFromCard(e), \"seed\") then",
        "\t\t\t\t\t\tcand[#cand+1] = e",
        "\t\t\t\t\tend",
        "\t\t\t\tend",
        "\t\t\t\tLOG.debug(\"[pick] pool-code candidates=%d\", #cand)",
        "\t\t\t\tif #cand > 0 then return cand[rng:NextInteger(1, #cand)], \"pool-code\" end",
        "\t\t\tend",
        "\t\t\t-- 4) any entry whose month has \"seed\"",
        "\t\t\tlocal all = {}",
        "\t\t\tfor _, e in ipairs(entries) do",
        "\t\t\t\tif monthHasKind(monthFromCard(e), \"seed\") then all[#all+1] = e end",
        "\t\t\tend",
        "\t\t\tLOG.debug(\"[pick] any-seed-month candidates=%d\", #all)",
        "\t\t\tif #all > 0 then return all[rng:NextInteger(1, #all)], \"any-seed-month\" end",
        "\t\t\treturn nil, \"none\"",
        "\t\tend",
        "",
        "\t\t--─────────────────────────────────────────────────────",
        "\t\t-- Main (DeckStore.transact)",
        "\t\t--─────────────────────────────────────────────────────",
        "\t\tlocal t0 = os.clock()",
        "\t\tLOG.debug(\"[transact] run=%s enter\", tostring(runId))",
        "\t\treturn ctx.DeckStore.transact(runId, function(store)",
        "\t\t\tlocal storeSize = (store and store.entries and #store.entries) or 0",
        "\t\t\tLOG.debug(\"[store] size=%s\", tostring(storeSize))",
        "",
        "\t\t\tlocal target, reason = pickTarget(store)",
        "\t\t\tif not target then",
        "\t\t\t\tLOG.info(\"[result] no-eligible-target (pickReason=%s)\", tostring(reason))",
        "\t\t\t\treturn store, { ok = true, changed = 0, meta = \"no-eligible-target\", pickReason = reason }",
        "\t\t\tend",
        "",
        "\t\t\tLOG.debug(\"[target] via=%s %s\", tostring(reason), cardStr(target))",
        "",
        "\t\t\t-- If already tagged, skip (idempotent)",
        "\t\t\tif alreadyTagged(target) then",
        "\t\t\t\tLOG.info(\"[result] already-applied uid=%s code=%s (via=%s)\", tostring(target.uid), tostring(target.code), tostring(reason))",
        "\t\t\t\treturn store, { ok = true, changed = 0, meta = \"already-applied\", targetUid = target.uid, targetCode = target.code, pickReason = reason }",
        "\t\t\tend",
        "",
        "\t\t\t-- Convert to \"seed\"（同月の seed に idx を寄せる）",
        "\t\t\tlocal beforeIdx, beforeCode, beforeKind = target.idx, target.code, target.kind",
        "\t\t\tlocal next1 = ctx.DeckOps.convertKind(target, preferKind)",
        "\t\t\tlocal afterIdx, afterCode, afterKind = next1.idx, next1.code, next1.kind",
        "\t\t\tLOG.debug(\"[convert] idx:%s→%s code:%s→%s kind:%s→%s\",",
        "\t\t\t\ttostring(beforeIdx), tostring(afterIdx),",
        "\t\t\t\ttostring(beforeCode), tostring(afterCode),",
        "\t\t\t\ttostring(beforeKind), tostring(afterKind))",
        "",
        "\t\t\tif tostring(afterKind or \"\") ~= \"seed\" then",
        "\t\t\t\tLOG.info(\"[result] month-has-no-seed uid=%s code=%s (via=%s)\", tostring(target.uid), tostring(target.code), tostring(reason))",
        "\t\t\t\treturn store, { ok = true, changed = 0, meta = \"month-has-no-seed\", targetUid = target.uid, targetCode = target.code, pickReason = reason }",
        "\t\t\tend",
        "",
        "\t\t\t-- Tag（UID 維持）",
        "\t\t\tlocal next2 = ctx.DeckOps.attachTag(next1, tagMark)",
        "\t\t\tif not next2.uid then next2.uid = target.uid end",
        "\t\t\tLOG.debug(\"[tagged] %s\", cardStr(next2))",
        "",
        "\t\t\t-- Replace: prefer UID when available",
        "\t\t\tif target.uid and target.uid ~= \"\" then",
        "\t\t\t\tstore = replaceOneByUid(store, target.uid, next2)",
        "\t\t\telse",
        "\t\t\t\tstore = replaceOneByCode(store, target.code, next2)",
        "\t\t\tend",
        "",
        "\t\t\tlocal dt = (os.clock() - t0) * 1000",
        "\t\t\tLOG.info(\"[result] ok changed=1 uid=%s code=%s via=%s in %.2fms\",",
        "\t\t\t\ttostring(target.uid), tostring(target.code), tostring(reason), dt)",
        "\t\t\treturn store, {",
        "\t\t\t\tok         = true,",
        "\t\t\t\tchanged    = 1,",
        "\t\t\t\ttargetUid  = target.uid,",
        "\t\t\t\ttargetCode = target.code,",
        "\t\t\t\tpickReason = reason,",
        "\t\t\t}",
        "\t\tend)",
        "\tend",
        "",
        "\t--─────────────────────────────────────────────────────"
      ],
      "truncated": true,
      "analysis": {
        "waitForChild": [
          "SharedModules",
          "Logger"
        ],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/shared/Deck/Effects/kito/Usagi_Ribbonize.lua",
      "ext": "lua",
      "binary": false,
      "size": 13992,
      "mtime": "2025-10-02T03:35:15.152056+00:00",
      "head": [
        "-- ReplicatedStorage/SharedModules/Deck/Effects/kito/Usagi_Ribbonize.lua",
        "-- Usagi (KITO / DOT-ONLY): convert one target card to \"ribbon\" (UID-first)",
        "--  - Effect ID: \"kito.usagi_ribbon\"（唯一の真実）",
        "--  - Prioritize payload.uid / payload.uids / payload.poolUids (UID uniquely identifies one card)",
        "--  - Fallback to codes only if no UID is provided",
        "--  - DeckStore (v3) is treated as immutable; use DeckStore.transact to replace one entry (UID-first)",
        "--  - RNG is separated (ctx.rng preferred, otherwise Random.new())",
        "--  - If the month has no \"ribbon\", do nothing (meta returned)",
        "--  - Diagnostic logs (scope: Effects.kito.usagi_ribbon)",
        "",
        "return function(Effects)",
        "\t--─────────────────────────────────────────────────────",
        "\t-- Logger (optional)",
        "\t--─────────────────────────────────────────────────────",
        "\tlocal LOG do",
        "\t\tlocal ok, Logger = pcall(function()",
        "\t\t\treturn require(game:GetService(\"ReplicatedStorage\")",
        "\t\t\t\t:WaitForChild(\"SharedModules\")",
        "\t\t\t\t:WaitForChild(\"Logger\"))",
        "\t\tend)",
        "\t\tif ok and Logger and type(Logger.scope) == \"function\" then",
        "\t\t\tLOG = Logger.scope(\"Effects.kito.usagi_ribbon\")",
        "\t\telse",
        "\t\t\tLOG = { info=function(...) end, debug=function(...) end, warn=function(...) warn(string.format(...)) end }",
        "\t\tend",
        "\tend",
        "",
        "\t--─────────────────────────────────────────────────────",
        "\t-- Handler (DOT-ONLY)",
        "\t--─────────────────────────────────────────────────────",
        "\tlocal function handler(ctx)",
        "\t\tlocal payload     = ctx.payload or {}",
        "\t\tlocal uidScalar   = (typeof(payload.uid)  == \"string\" and payload.uid)  or nil",
        "\t\tlocal uids        = (typeof(payload.uids) == \"table\"  and payload.uids) or nil",
        "\t\tlocal poolUids    = (typeof(payload.poolUids) == \"table\" and payload.poolUids) or nil",
        "\t\tlocal codes       = (typeof(payload.codes) == \"table\" and payload.codes) or nil -- code指定のみ互換",
        "\t\tlocal poolCodes   = (typeof(payload.poolCodes) == \"table\" and payload.poolCodes) or nil -- 互換",
        "",
        "\t\t-- ★ DOT-ONLY タグ表記（Kito.apply_via_effects の tag=\"eff:<moduleId>\" と一致）",
        "\t\tlocal tagMark     = tostring(payload.tag or \"eff:kito.usagi_ribbon\")",
        "\t\tlocal preferKind  = \"ribbon\"",
        "",
        "\t\tlocal runId       = ctx.runId",
        "\t\tlocal rng         = ctx.rng or Random.new()",
        "",
        "\t\tlocal function head5(list)",
        "\t\t\tif typeof(list) ~= \"table\" then return \"-\" end",
        "\t\t\tlocal out, n = {}, math.min(#list, 5)",
        "\t\t\tfor i = 1, n do out[i] = tostring(list[i]) end",
        "\t\t\treturn table.concat(out, \",\")",
        "\t\tend",
        "",
        "\t\tLOG.debug(\"[deps] DeckStore=%s DeckOps=%s CardEngine=%s\",",
        "\t\t\ttostring(ctx.DeckStore ~= nil), tostring(ctx.DeckOps ~= nil), tostring(ctx.CardEngine ~= nil))",
        "\t\tLOG.info(\"[begin] run=%s tag=%s | uid=%s uids[%s]=[%s] poolUids[%s]=[%s] codes[%s]=[%s] poolCodes[%s]=[%s]\",",
        "\t\t\ttostring(runId), tagMark, tostring(uidScalar),",
        "\t\t\ttostring(uids and #uids or 0), head5(uids),",
        "\t\t\ttostring(poolUids and #poolUids or 0), head5(poolUids),",
        "\t\t\ttostring(codes and #codes or 0), head5(codes),",
        "\t\t\ttostring(poolCodes and #poolCodes or 0), head5(poolCodes)",
        "\t\t)",
        "",
        "\t\t--──────────────── helpers ────────────────",
        "\t\tlocal function listToSet(list)",
        "\t\t\tif typeof(list) ~= \"table\" then return nil end",
        "\t\t\tlocal s = {}",
        "\t\t\tfor _, v in ipairs(list) do s[v] = true end",
        "\t\t\treturn s",
        "\t\tend",
        "",
        "\t\tlocal uidSet = listToSet(uids) or {}",
        "\t\tif uidScalar then uidSet[uidScalar] = true end",
        "\t\tlocal poolUidSet  = listToSet(poolUids)",
        "\t\tlocal codeSet     = listToSet(codes)",
        "\t\tlocal poolCodeSet = listToSet(poolCodes)",
        "",
        "\t\tlocal function monthFromCard(card:any): number?",
        "\t\t\tif not card then return nil end",
        "\t\t\tif card.month ~= nil then",
        "\t\t\t\tlocal m = tonumber(card.month)",
        "\t\t\t\tif typeof(m) == \"number\" then return m end",
        "\t\t\tend",
        "\t\t\tlocal code = tostring(card.code or \"\")",
        "\t\t\tif #code >= 2 then",
        "\t\t\t\tlocal mm = tonumber(string.sub(code, 1, 2))",
        "\t\t\t\tif typeof(mm) == \"number\" then return mm end",
        "\t\t\tend",
        "\t\t\treturn nil",
        "\t\tend",
        "",
        "\t\tlocal function monthHasKind(month:number?, kind:string): boolean",
        "\t\t\tif not month or not ctx.CardEngine or not ctx.CardEngine.cardsByMonth then return false end",
        "\t\t\tlocal defs = ctx.CardEngine.cardsByMonth[month]",
        "\t\t\tif typeof(defs) ~= \"table\" then return false end",
        "\t\t\tfor _, def in ipairs(defs) do",
        "\t\t\t\tif tostring(def.kind or \"\") == kind then",
        "\t\t\t\t\treturn true",
        "\t\t\t\tend",
        "\t\t\tend",
        "\t\t\treturn false",
        "\t\tend",
        "",
        "\t\tlocal function alreadyTagged(card)",
        "\t\t\tif typeof(card) ~= \"table\" or typeof(card.tags) ~= \"table\" then return false end",
        "\t\t\tfor _, t in ipairs(card.tags) do if t == tagMark then return true end end",
        "\t\t\treturn false",
        "\t\tend",
        "",
        "\t\tlocal function cardStr(c:any)",
        "\t\t\tif typeof(c) ~= \"table\" then return \"<nil>\" end",
        "\t\t\treturn string.format(\"{uid=%s code=%s kind=%s month=%s idx=%s tags=%s}\",",
        "\t\t\t\ttostring(c.uid), tostring(c.code), tostring(c.kind),",
        "\t\t\t\ttostring(c.month), tostring(c.idx),",
        "\t\t\t\t(function()",
        "\t\t\t\t\tif typeof(c.tags) ~= \"table\" then return \"[]\" end",
        "\t\t\t\t\tlocal t = {}",
        "\t\t\t\t\tfor i,v in ipairs(c.tags) do t[i] = tostring(v) end",
        "\t\t\t\t\treturn \"[\"..table.concat(t, \",\")..\"]\"",
        "\t\t\t\tend)()",
        "\t\t\t)",
        "\t\tend",
        "",
        "\t\t-- Replace one entry by UID (preserve UID and core fields)",
        "\t\tlocal function replaceOneByUid(store, uid, newEntry)",
        "\t\t\tlocal entries = (store and store.entries) or {}",
        "\t\t\tlocal n = #entries; if n == 0 then return store end",
        "\t\t\tlocal out = table.create(n)",
        "\t\t\tlocal done = false",
        "\t\t\tfor i = 1, n do",
        "\t\t\t\tlocal e = entries[i]",
        "\t\t\t\tif (not done) and e and e.uid == uid then",
        "\t\t\t\t\tlocal c = table.clone(newEntry or {})",
        "\t\t\t\t\tc.uid   = e.uid",
        "\t\t\t\t\tc.code  = c.code  or e.code",
        "\t\t\t\t\tc.month = c.month or e.month",
        "\t\t\t\t\tc.idx   = c.idx   or e.idx",
        "\t\t\t\t\tout[i]  = c",
        "\t\t\t\t\tdone    = true",
        "\t\t\t\telse",
        "\t\t\t\t\tout[i] = e",
        "\t\t\t\tend",
        "\t\t\tend",
        "\t\t\tif done then",
        "\t\t\t\tLOG.debug(\"[replaceByUid] uid=%s -> %s\", tostring(uid), cardStr(newEntry))",
        "\t\t\telse",
        "\t\t\t\tLOG.warn(\"[replaceByUid] uid=%s not found (no-op)\", tostring(uid))",
        "\t\t\tend",
        "\t\t\treturn { v = 3, entries = out }",
        "\t\tend",
        "",
        "\t\t-- Replace one entry by code (legacy fallback)",
        "\t\tlocal function replaceOneByCode(store, code, newEntry)",
        "\t\t\tlocal entries = (store and store.entries) or {}",
        "\t\t\tlocal n = #entries; if n == 0 then return store end",
        "\t\t\tlocal out = table.create(n)",
        "\t\t\tlocal done = false",
        "\t\t\tfor i = 1, n do",
        "\t\t\t\tlocal e = entries[i]",
        "\t\t\t\tif (not done) and e and e.code == code then",
        "\t\t\t\t\tlocal c = table.clone(newEntry or {})",
        "\t\t\t\t\tc.uid   = e.uid",
        "\t\t\t\t\tc.code  = c.code  or e.code",
        "\t\t\t\t\tc.month = c.month or e.month",
        "\t\t\t\t\tc.idx   = c.idx   or e.idx",
        "\t\t\t\t\tout[i]  = c",
        "\t\t\t\t\tdone    = true",
        "\t\t\t\telse",
        "\t\t\t\t\tout[i] = e",
        "\t\t\t\tend",
        "\t\t\tend",
        "\t\t\tif done then",
        "\t\t\t\tLOG.debug(\"[replaceByCode] code=%s -> %s\", tostring(code), cardStr(newEntry))",
        "\t\t\telse",
        "\t\t\t\tLOG.warn(\"[replaceByCode] code=%s not found (no-op)\", tostring(code))",
        "\t\t\tend",
        "\t\t\treturn { v = 3, entries = out }",
        "\t\tend",
        "",
        "\t\t-- Target selection order: UID → Code → pool(UID/Code) → any eligible month",
        "\t\tlocal function pickTarget(store)",
        "\t\t\tlocal entries = (store and store.entries) or {}",
        "\t\t\t-- 0) direct UID(s)",
        "\t\t\tif uidSet and next(uidSet) ~= nil then",
        "\t\t\t\tlocal list = {}",
        "\t\t\t\tfor _, e in ipairs(entries) do",
        "\t\t\t\t\tif e and e.uid and uidSet[e.uid] and monthHasKind(monthFromCard(e), \"ribbon\") then",
        "\t\t\t\t\t\tlist[#list+1] = e",
        "\t\t\t\t\tend",
        "\t\t\t\tend",
        "\t\t\t\tLOG.debug(\"[pick] direct-uid candidates=%d\", #list)",
        "\t\t\t\tif #list > 0 then return list[rng:NextInteger(1, #list)], \"direct-uid\" end",
        "\t\t\tend",
        "\t\t\t-- 1) direct code(s)",
        "\t\t\tif codeSet then",
        "\t\t\t\tlocal list = {}",
        "\t\t\t\tfor _, e in ipairs(entries) do",
        "\t\t\t\t\tif e and e.code and codeSet[e.code] and monthHasKind(monthFromCard(e), \"ribbon\") then",
        "\t\t\t\t\t\tlist[#list+1] = e",
        "\t\t\t\t\tend",
        "\t\t\t\tend",
        "\t\t\t\tLOG.debug(\"[pick] direct-code candidates=%d\", #list)",
        "\t\t\t\tif #list > 0 then return list[rng:NextInteger(1, #list)], \"direct-code\" end",
        "\t\t\tend",
        "\t\t\t-- 2) pool by UID",
        "\t\t\tif poolUidSet then",
        "\t\t\t\tlocal cand = {}",
        "\t\t\t\tfor _, e in ipairs(entries) do",
        "\t\t\t\t\tif e and e.uid and poolUidSet[e.uid] and monthHasKind(monthFromCard(e), \"ribbon\") then",
        "\t\t\t\t\t\tcand[#cand+1] = e",
        "\t\t\t\t\tend",
        "\t\t\t\tend",
        "\t\t\t\tLOG.debug(\"[pick] pool-uid candidates=%d\", #cand)",
        "\t\t\t\tif #cand > 0 then return cand[rng:NextInteger(1, #cand)], \"pool-uid\" end",
        "\t\t\tend",
        "\t\t\t-- 3) pool by code",
        "\t\t\tif poolCodeSet then",
        "\t\t\t\tlocal cand = {}",
        "\t\t\t\tfor _, e in ipairs(entries) do",
        "\t\t\t\t\tif e and e.code and poolCodeSet[e.code] and monthHasKind(monthFromCard(e), \"ribbon\") then",
        "\t\t\t\t\t\tcand[#cand+1] = e",
        "\t\t\t\t\tend",
        "\t\t\t\tend",
        "\t\t\t\tLOG.debug(\"[pick] pool-code candidates=%d\", #cand)",
        "\t\t\t\tif #cand > 0 then return cand[rng:NextInteger(1, #cand)], \"pool-code\" end",
        "\t\t\tend",
        "\t\t\t-- 4) any entry whose month has \"ribbon\"",
        "\t\t\tlocal all = {}",
        "\t\t\tfor _, e in ipairs(entries) do",
        "\t\t\t\tif monthHasKind(monthFromCard(e), \"ribbon\") then all[#all+1] = e end",
        "\t\t\tend",
        "\t\t\tLOG.debug(\"[pick] any-ribbon-month candidates=%d\", #all)",
        "\t\t\tif #all > 0 then return all[rng:NextInteger(1, #all)], \"any-ribbon-month\" end",
        "\t\t\treturn nil, \"none\"",
        "\t\tend",
        "",
        "\t\t--─────────────────────────────────────────────────────",
        "\t\t-- Main (DeckStore.transact)",
        "\t\t--─────────────────────────────────────────────────────",
        "\t\tlocal t0 = os.clock()",
        "\t\tLOG.debug(\"[transact] run=%s enter\", tostring(runId))",
        "\t\treturn ctx.DeckStore.transact(runId, function(store)",
        "\t\t\tlocal storeSize = (store and store.entries and #store.entries) or 0",
        "\t\t\tLOG.debug(\"[store] size=%s\", tostring(storeSize))",
        "",
        "\t\t\tlocal target, reason = pickTarget(store)",
        "\t\t\tif not target then",
        "\t\t\t\tLOG.info(\"[result] no-eligible-target (pickReason=%s)\", tostring(reason))",
        "\t\t\t\treturn store, { ok = true, changed = 0, meta = \"no-eligible-target\", pickReason = reason }",
        "\t\t\tend",
        "",
        "\t\t\tLOG.debug(\"[target] via=%s %s\", tostring(reason), cardStr(target))",
        "",
        "\t\t\t-- If already tagged, skip (idempotent)",
        "\t\t\tif alreadyTagged(target) then",
        "\t\t\t\tLOG.info(\"[result] already-applied uid=%s code=%s (via=%s)\", tostring(target.uid), tostring(target.code), tostring(reason))",
        "\t\t\t\treturn store, { ok = true, changed = 0, meta = \"already-applied\", targetUid = target.uid, targetCode = target.code, pickReason = reason }",
        "\t\t\tend",
        "",
        "\t\t\t-- Convert to \"ribbon\"（同月の ribbon に idx を寄せる）",
        "\t\t\tlocal beforeIdx, beforeCode, beforeKind = target.idx, target.code, target.kind",
        "\t\t\tlocal next1 = ctx.DeckOps.convertKind(target, preferKind)",
        "\t\t\tlocal afterIdx, afterCode, afterKind = next1.idx, next1.code, next1.kind",
        "\t\t\tLOG.debug(\"[convert] idx:%s→%s code:%s→%s kind:%s→%s\",",
        "\t\t\t\ttostring(beforeIdx), tostring(afterIdx),",
        "\t\t\t\ttostring(beforeCode), tostring(afterCode),",
        "\t\t\t\ttostring(beforeKind), tostring(afterKind))",
        "",
        "\t\t\tif tostring(afterKind or \"\") ~= \"ribbon\" then",
        "\t\t\t\tLOG.info(\"[result] month-has-no-ribbon uid=%s code=%s (via=%s)\", tostring(target.uid), tostring(target.code), tostring(reason))",
        "\t\t\t\treturn store, { ok = true, changed = 0, meta = \"month-has-no-ribbon\", targetUid = target.uid, targetCode = target.code, pickReason = reason }",
        "\t\t\tend",
        "",
        "\t\t\t-- Tag（UID 維持）",
        "\t\t\tlocal next2 = ctx.DeckOps.attachTag(next1, tagMark)",
        "\t\t\tif not next2.uid then next2.uid = target.uid end",
        "\t\t\tLOG.debug(\"[tagged] %s\", cardStr(next2))",
        "",
        "\t\t\t-- Replace: prefer UID when available",
        "\t\t\tif target.uid and target.uid ~= \"\" then",
        "\t\t\t\tstore = replaceOneByUid(store, target.uid, next2)",
        "\t\t\telse",
        "\t\t\t\tstore = replaceOneByCode(store, target.code, next2)",
        "\t\t\tend",
        "",
        "\t\t\tlocal dt = (os.clock() - t0) * 1000",
        "\t\t\tLOG.info(\"[result] ok changed=1 uid=%s code=%s via=%s in %.2fms\",",
        "\t\t\t\ttostring(target.uid), tostring(target.code), tostring(reason), dt)",
        "\t\t\treturn store, {",
        "\t\t\t\tok         = true,",
        "\t\t\t\tchanged    = 1,",
        "\t\t\t\ttargetUid  = target.uid,",
        "\t\t\t\ttargetCode = target.code,",
        "\t\t\t\tpickReason = reason,",
        "\t\t\t}",
        "\t\tend)",
        "\tend",
        "",
        "\t--─────────────────────────────────────────────────────",
        "\t-- canApply（UIグレーアウト等に利用） DOT-ONLY",
        "\t--  - 条件: まだ \"ribbon\" でない ＆ 対象月に ribbon 定義がある ＆ 既タグなし"
      ],
      "truncated": true,
      "analysis": {
        "waitForChild": [
          "SharedModules",
          "Logger"
        ],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/shared/Deck/EffectsRegisterAll.lua",
      "ext": "lua",
      "binary": false,
      "size": 12453,
      "mtime": "2025-10-02T03:19:08.115657+00:00",
      "head": [
        "-- ReplicatedStorage/SharedModules/Deck/EffectsRegisterAll.lua",
        "-- Deck/Effects 以下の ModuleScript を自動スキャンして EffectsRegistry に一括登録する",
        "--",
        "-- サポートするモジュールの返り値（3通りすべて対応）:",
        "--   1) ビルダー関数: function(Effects) -> ()           -- ← 推奨: builder内で Effects.register(...) などを呼ぶ",
        "--   2) ハンドラ関数: function(ctx) -> ...              -- 旧来: 直接適用される関数",
        "--   3) 設定テーブル: { id|name, apply|run|exec|call }  -- 旧来: idと関数をテーブルで返す",
        "--",
        "-- 登録キーの決定優先度:",
        "--   テーブル返り値: payload.id > payload.name > module._id > ModuleScript.Name",
        "--   関数返り値(ハンドラ扱い): module._id > ModuleScript.Name",
        "--",
        "-- 追加: canApply 登録の標準化",
        "--   - Effects.registerCanApply(id, fn) をビルダーからも呼べるようプロキシを提供",
        "--   - 本ファイルでも酉/巳の canApply を中央登録する（UIグレーアウト/サーバ最終判定の唯一の正）",
        "--",
        "-- ★ ドット化ポリシー（KITO専用）:",
        "--   - kito 系の登録キーは「kito.*」のみを受け付ける（kito_ やレガシー別名は登録しない）",
        "",
        "local RS = game:GetService(\"ReplicatedStorage\")",
        "",
        "-- Logger は任意（無ければダミー）",
        "local function getLogger()",
        "\tlocal ok, Logger = pcall(function()",
        "\t\treturn require(RS:WaitForChild(\"SharedModules\"):WaitForChild(\"Logger\"))",
        "\tend)",
        "\tif ok and Logger then",
        "\t\treturn Logger.scope(\"EffectsBootstrap\")",
        "\tend",
        "\treturn {",
        "\t\tinfo  = function(...) end,",
        "\t\twarn  = function(...) warn(string.format(...)) end,",
        "\t\tdebug = function(...) end,",
        "\t}",
        "end",
        "local LOG = getLogger()",
        "",
        "local Shared     = RS:WaitForChild(\"SharedModules\")",
        "local DeckFolder = script.Parent",
        "local Registry   = require(DeckFolder:WaitForChild(\"EffectsRegistry\"))",
        "",
        "-- 依存（canApply用）",
        "local CardEngine = require(Shared:WaitForChild(\"CardEngine\"))",
        "",
        "--====================",
        "-- 内部 util",
        "--====================",
        "local function tryRequire(mod: Instance)",
        "\tlocal ok, res = pcall(require, mod)",
        "\tif not ok then",
        "\t\tLOG.warn(\"require failed: %s | err=%s\", mod:GetFullName(), tostring(res))",
        "\t\treturn nil",
        "\tend",
        "\treturn res",
        "end",
        "",
        "local function pickFn(from:any)",
        "\tif type(from) == \"function\" then",
        "\t\treturn from",
        "\tend",
        "\tif type(from) == \"table\" then",
        "\t\tfor _, k in ipairs({ \"apply\", \"run\", \"exec\", \"call\" }) do",
        "\t\t\tif type(from[k]) == \"function\" then",
        "\t\t\t\treturn from[k]",
        "\t\t\tend",
        "\t\tend",
        "\tend",
        "\treturn nil",
        "end",
        "",
        "local function pickId(modInst: Instance, payload:any)",
        "\t-- 明示指定があれば最優先（テーブル返り値）",
        "\tif type(payload) == \"table\" then",
        "\t\tif type(payload.id) == \"string\"   and #payload.id   > 0 then return payload.id   end",
        "\t\tif type(payload.name) == \"string\" and #payload.name > 0 then return payload.name end",
        "\tend",
        "\t-- モジュールが _id を持っていたら（ハンドラ関数返し時にも参照）",
        "\tif type(payload) == \"table\" and type(payload._id) == \"string\" and #payload._id > 0 then",
        "\t\treturn payload._id",
        "\tend",
        "\t-- それも無ければ ModuleScript の名前",
        "\treturn modInst.Name",
        "end",
        "",
        "-- ★ KITO の登録キーの妥当性チェック（ドット唯一）",
        "local function isKitoDot(id:string?): boolean",
        "\tid = tostring(id or \"\")",
        "\treturn id:sub(1,5) == \"kito.\"",
        "end",
        "local function isKitoUnderscore(id:string?): boolean",
        "\tid = tostring(id or \"\")",
        "\treturn id:sub(1,5) == \"kito_\"",
        "end",
        "local function isKitoLike(id:string?): boolean",
        "\tid = tostring(id or \"\")",
        "\treturn id:sub(1,4) == \"kito\"",
        "end",
        "",
        "local function assertKitoDotOrReject(id:string, modFullName:string): boolean",
        "\tif isKitoUnderscore(id) then",
        "\t\tLOG.warn(\"[DOT-ONLY] reject underscore id: %s (from %s)\", id, modFullName)",
        "\t\treturn false",
        "\tend",
        "\t-- 「kito なのにドットでもアンダーバーでもない」（例: \"Tori_Brighten\"）は弾く",
        "\tif isKitoLike(id) and (not isKitoDot(id)) then",
        "\t\tLOG.warn(\"[DOT-ONLY] reject non-dot kito id: %s (from %s)\", id, modFullName)",
        "\t\treturn false",
        "\tend",
        "\treturn true",
        "end",
        "",
        "-- Effects.register / registerCanApply をプロキシして捕捉し、本体 Registry に中継",
        "local function buildEffectsProxy(modInst: Instance)",
        "\tlocal captured = {}  -- { {id=id, fn=fn}, ... } ※register だけ捕捉（canApply は捕捉しなくてもOK）",
        "\tlocal Effects = {}",
        "",
        "\tfunction Effects.register(id: string, fn: any)",
        "\t\t-- ★ KITO はドットのみ受理",
        "\t\tif not assertKitoDotOrReject(id, modInst:GetFullName()) then",
        "\t\t\treturn",
        "\t\tend",
        "\t\tlocal ok, err = pcall(function()",
        "\t\t\tRegistry.register(id, fn)",
        "\t\tend)",
        "\t\tif not ok then",
        "\t\t\tLOG.warn(\"register failed via builder: id=%s mod=%s | err=%s\",",
        "\t\t\t\ttostring(id), modInst:GetFullName(), tostring(err))",
        "\t\t\treturn",
        "\t\tend",
        "\t\ttable.insert(captured, { id = id, fn = fn })",
        "\t\tLOG.info(\"registered: id=%s from=%s\", tostring(id), modInst:GetFullName())",
        "\tend",
        "",
        "\t-- ★ canApply のプロキシ（ビルダーがここから登録できる）",
        "\tfunction Effects.registerCanApply(id: string, fn: any)",
        "\t\t-- canApply も KITO の場合はドットのみ受理",
        "\t\tif not assertKitoDotOrReject(id, modInst:GetFullName()) then",
        "\t\t\treturn",
        "\t\tend",
        "\t\tlocal ok, err = pcall(function()",
        "\t\t\tRegistry.registerCanApply(id, fn)",
        "\t\tend)",
        "\t\tif not ok then",
        "\t\t\tLOG.warn(\"registerCanApply failed via builder: id=%s mod=%s | err=%s\",",
        "\t\t\t\ttostring(id), modInst:GetFullName(), tostring(err))",
        "\t\t\treturn",
        "\t\tend",
        "\t\tLOG.info(\"registered canApply: id=%s from=%s\", tostring(id), modInst:GetFullName())",
        "\tend",
        "",
        "\t-- 任意: ビルダーがログを使いたい場合",
        "\tfunction Effects.log(msg: string, ...)",
        "\t\tLOG.debug(\"[effects:%s] \"..tostring(msg), modInst.Name, ...)",
        "\tend",
        "",
        "\treturn Effects, captured",
        "end",
        "",
        "local function registerAsBuilder(modInst: Instance, builderFn: any): boolean",
        "\tlocal Effects, captured = buildEffectsProxy(modInst)",
        "\tlocal ok, err = pcall(function()",
        "\t\t-- ビルダーは副作用として Effects.register / registerCanApply を呼ぶ想定",
        "\t\tbuilderFn(Effects)",
        "\tend)",
        "\tif not ok then",
        "\t\tLOG.warn(\"builder call failed: %s | err=%s\", modInst:GetFullName(), tostring(err))",
        "\t\treturn false",
        "\tend",
        "\treturn #captured > 0",
        "end",
        "",
        "local function registerAsTable(modInst: Instance, payload: table): boolean",
        "\tlocal fn = pickFn(payload)",
        "\tif type(fn) ~= \"function\" then",
        "\t\tLOG.warn(\"skip (no callable) : %s\", modInst:GetFullName())",
        "\t\treturn false",
        "\tend",
        "\tlocal id = pickId(modInst, payload)",
        "\tif type(id) ~= \"string\" or #id == 0 then",
        "\t\tLOG.warn(\"skip (no id) : %s\", modInst:GetFullName())",
        "\t\treturn false",
        "\tend",
        "\t-- ★ KITO はドットのみ受理",
        "\tif not assertKitoDotOrReject(id, modInst:GetFullName()) then",
        "\t\treturn false",
        "\tend",
        "\tlocal ok, err = pcall(function()",
        "\t\tRegistry.register(id, fn)",
        "\tend)",
        "\tif not ok then",
        "\t\tLOG.warn(\"register failed: id=%s mod=%s | err=%s\", tostring(id), modInst:GetFullName(), tostring(err))",
        "\t\treturn false",
        "\tend",
        "\tLOG.info(\"registered: id=%s from=%s\", id, modInst:GetFullName())",
        "\treturn true",
        "end",
        "",
        "local function registerAsHandler(modInst: Instance, handlerFn: any): boolean",
        "\t-- 関数返り値が「ctxハンドラ」前提の旧流儀",
        "\tlocal fakePayload = { _id = nil }",
        "\tlocal id = pickId(modInst, fakePayload) -- _id が無ければファイル名",
        "\tif type(id) ~= \"string\" or #id == 0 then",
        "\t\tid = modInst.Name",
        "\tend",
        "\t-- ★ KITO はドットのみ受理（モジュール名由来のレガシー別名は登録しない）",
        "\tif not assertKitoDotOrReject(id, modInst:GetFullName()) then",
        "\t\treturn false",
        "\tend",
        "\tlocal ok, err = pcall(function()",
        "\t\tRegistry.register(id, handlerFn)",
        "\tend)",
        "\tif not ok then",
        "\t\tLOG.warn(\"register failed: id=%s mod=%s | err=%s\", tostring(id), modInst:GetFullName(), tostring(err))",
        "\t\treturn false",
        "\tend",
        "\tLOG.info(\"registered: id=%s from=%s\", id, modInst:GetFullName())",
        "\treturn true",
        "end",
        "",
        "local function registerOne(modInst: Instance)",
        "\tlocal payload = tryRequire(modInst)",
        "\tif payload == nil then return false end",
        "",
        "\t-- 優先: 関数返り値はまず「ビルダー」として試す",
        "\tif type(payload) == \"function\" then",
        "\t\tif registerAsBuilder(modInst, payload) then",
        "\t\t\t-- ビルダーとして 1件以上の register を捕捉できた",
        "\t\t\treturn true",
        "\t\tend",
        "\t\t-- 捕捉できなかった場合は旧流儀の「ctxハンドラ関数」として登録を試みる",
        "\t\treturn registerAsHandler(modInst, payload)",
        "\tend",
        "",
        "\t-- テーブル返り値は従来どおり",
        "\tif type(payload) == \"table\" then",
        "\t\treturn registerAsTable(modInst, payload)",
        "\tend",
        "",
        "\tLOG.warn(\"skip (unsupported export type=%s) : %s\", typeof(payload), modInst:GetFullName())",
        "\treturn false",
        "end",
        "",
        "local function isModuleScript(x: Instance): boolean",
        "\treturn x and x:IsA(\"ModuleScript\")",
        "end",
        "",
        "local function scanAndRegister(root: Instance)",
        "\tlocal count = 0",
        "\t-- 深さ優先で下にある ModuleScript を全て対象にする",
        "\tlocal stack = { root }",
        "\twhile #stack > 0 do",
        "\t\tlocal cur = table.remove(stack)",
        "\t\tfor _, ch in ipairs(cur:GetChildren()) do",
        "\t\t\tif isModuleScript(ch) then",
        "\t\t\t\tif registerOne(ch) then",
        "\t\t\t\t\tcount += 1",
        "\t\t\t\tend",
        "\t\t\telse",
        "\t\t\t\t-- フォルダ/サブツリーも潜る",
        "\t\t\t\ttable.insert(stack, ch)",
        "\t\t\tend",
        "\t\tend",
        "\tend",
        "\treturn count",
        "end",
        "",
        "--====================",
        "-- canApply（酉/巳）の中央登録（★DOT ONLY）",
        "--====================",
        "local function hasTag(card:any, mark:string): boolean",
        "\tif typeof(card) ~= \"table\" or typeof(card.tags) ~= \"table\" then return false end",
        "\tfor _, t in ipairs(card.tags) do",
        "\t\tif t == mark then return true end",
        "\tend",
        "\treturn false",
        "end",
        "",
        "local function monthHasBright(month:number?): boolean",
        "\tif not month or not CardEngine or not CardEngine.cardsByMonth then return false end",
        "\tlocal defs = CardEngine.cardsByMonth[month]",
        "\tif typeof(defs) ~= \"table\" then return false end",
        "\tfor _, def in ipairs(defs) do",
        "\t\tif tostring(def.kind or \"\") == \"bright\" then",
        "\t\t\treturn true",
        "\t\tend",
        "\tend",
        "\treturn false",
        "end",
        "",
        "local function parseMonthFromCard(card:any): number?",
        "\tif typeof(card) ~= \"table\" then return nil end",
        "\tif card.month ~= nil then",
        "\t\tlocal m = tonumber(card.month)",
        "\t\tif typeof(m) == \"number\" then return m end",
        "\tend",
        "\tlocal code = tostring(card.code or \"\")",
        "\tif #code >= 2 then",
        "\t\tlocal mm = tonumber(string.sub(code, 1, 2))",
        "\t\tif typeof(mm) == \"number\" then return mm end",
        "\tend"
      ],
      "truncated": true,
      "analysis": {
        "waitForChild": [
          "SharedModules",
          "Logger",
          "SharedModules",
          "EffectsRegistry",
          "CardEngine"
        ],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/shared/Deck/EffectsRegistry.lua",
      "ext": "lua",
      "binary": false,
      "size": 9663,
      "mtime": "2025-10-02T03:24:35.887444+00:00",
      "head": [
        "-- ReplicatedStorage/SharedModules/Deck/EffectsRegistry.lua",
        "-- Step E: 効果ハブ（集約と実行の窓口）",
        "-- 責務：",
        "--  - register(id, handler) で効果を登録",
        "--  - apply(runId, effectId, payload?) で効果を実行",
        "--  - handler 内で DeckStore / DeckOps / CardEngine を自由に使えるよう依存を注入",
        "--  - registerCanApply(id, fn) / canApply(id, card, ctx) で「適格判定」を統一提供（Serverが唯一の正）",
        "--",
        "-- ポリシー：",
        "--  - Deck の変更は DeckStore.transact を通す（純関数 DeckOps で生成→差し替え）",
        "--  - ここでは「登録と実行の枠」だけ提供。個別効果のロジックは別モジュールで定義して register する",
        "-- v0.9.2-dot: KITO は「ドット唯一の真実」。'kito_' やレガシー別名の登録・適用を拒否",
        "-- v0.9.1-patch: apply() が (store, result) 戻り値に対応（第二戻り値優先）",
        "",
        "local RS = game:GetService(\"ReplicatedStorage\")",
        "local Shared = RS:WaitForChild(\"SharedModules\")",
        "",
        "-- 依存（注入するための“共通道具”）",
        "local DeckStore  = require(Shared:WaitForChild(\"Deck\"):WaitForChild(\"DeckStore\"))",
        "local DeckOps    = require(Shared:WaitForChild(\"Deck\"):WaitForChild(\"DeckOps\"))",
        "local CardEngine = require(Shared:WaitForChild(\"CardEngine\"))",
        "",
        "-- 任意ロガー（無依存ノイズ抑制）",
        "local LOG do",
        "\tlocal ok, Logger = pcall(function()",
        "\t\treturn require(Shared:WaitForChild(\"Logger\"))",
        "\tend)",
        "\tif ok and Logger and type(Logger.scope) == \"function\" then",
        "\t\tLOG = Logger.scope(\"EffectsRegistry\")",
        "\telse",
        "\t\tLOG = { info=function(...) end, debug=function(...) end, warn=function(...) warn(string.format(...)) end }",
        "\tend",
        "end",
        "",
        "-- ドット化ユーティリティ",
        "local function isKitoDot(id:string?): boolean",
        "\tid = tostring(id or \"\")",
        "\treturn id:sub(1,5) == \"kito.\"",
        "end",
        "local function isKitoUnderscore(id:string?): boolean",
        "\tid = tostring(id or \"\")",
        "\treturn id:sub(1,5) == \"kito_\"",
        "end",
        "local function isKitoLike(id:string?): boolean",
        "\tid = tostring(id or \"\")",
        "\treturn id:sub(1,4) == \"kito\"",
        "end",
        "",
        "-- 登録テーブル",
        "local Registry: {[string]: (any)->(any)} = {}",
        "local CanApplyRegistry: {[string]: (any, any)->(boolean, string?)} = {} -- (card, ctx) -> (ok, reason?)",
        "",
        "local M = {}",
        "",
        "export type ApplyResult = {",
        "\tok: boolean,",
        "\tchanged: number?,      -- 変更枚数（任意）",
        "\tmeta: any?,            -- 効果側からの追加情報（任意）",
        "\terror: string?,        -- エラー文字列（失敗時）",
        "}",
        "",
        "--========================================================",
        "-- 内部: ハンドラに渡す ctx の生成",
        "--========================================================",
        "local function buildCtx(runId:any, payload:any?): any",
        "\t-- rng は payload.rng（Random型）を優先注入。無ければ各ハンドラ側で Random.new() フォールバック想定。",
        "\tlocal rng",
        "\tif typeof(payload) == \"table\" then",
        "\t\tif typeof(payload.rng) == \"Random\" then",
        "\t\t\trng = payload.rng",
        "\t\telseif typeof(payload.rngSeed) == \"number\" then",
        "\t\t\t-- 任意: 数値seedが来たらここでRandom化",
        "\t\t\tlocal ok, r = pcall(function() return Random.new(payload.rngSeed) end)",
        "\t\t\tif ok and typeof(r) == \"Random\" then rng = r end",
        "\t\tend",
        "\tend",
        "",
        "\treturn {",
        "\t\trunId   = runId,",
        "\t\tpayload = payload,",
        "",
        "\t\t-- 共通道具（依存の注入）",
        "\t\tDeckStore  = DeckStore,",
        "\t\tDeckOps    = DeckOps,",
        "\t\tCardEngine = CardEngine,",
        "",
        "\t\t-- （任意）RNG",
        "\t\trng = rng,",
        "",
        "\t\t-- よく使う補助（必要最小限）",
        "\t\tselectByCodes = function(deck, codes: {string})",
        "\t\t\tlocal out = {}",
        "\t\t\tif typeof(deck) ~= \"table\" or typeof(codes) ~= \"table\" then",
        "\t\t\t\treturn out",
        "\t\t\tend",
        "\t\t\t-- entriesByCode 優先、無ければ entries を走査",
        "\t\t\tif deck.entriesByCode and typeof(deck.entriesByCode) == \"table\" then",
        "\t\t\t\tfor _, code in ipairs(codes) do",
        "\t\t\t\t\tlocal c = deck.entriesByCode[code]",
        "\t\t\t\t\tif c then table.insert(out, c) end",
        "\t\t\t\tend",
        "\t\t\telseif deck.entries and typeof(deck.entries) == \"table\" then",
        "\t\t\t\tlocal want = {}",
        "\t\t\t\tfor _, code in ipairs(codes) do want[code] = true end",
        "\t\t\t\tfor _, c in ipairs(deck.entries) do",
        "\t\t\t\t\tif c and want[c.code] then table.insert(out, c) end",
        "\t\t\t\tend",
        "\t\t\tend",
        "\t\t\treturn out",
        "\t\tend,",
        "",
        "\t\t-- Deck 置換の薄いラッパ（プロジェクト依存：適宜置き換え）",
        "\t\treplace = function(deck, oldCode: string, newCard: any)",
        "\t\t\tif DeckStore.replaceEntry then",
        "\t\t\t\treturn DeckStore.replaceEntry(deck, oldCode, newCard)",
        "\t\t\telseif DeckStore.upsertEntry then",
        "\t\t\t\treturn DeckStore.upsertEntry(deck, oldCode, newCard)",
        "\t\t\telse",
        "\t\t\t\terror(\"DeckStore.replaceEntry/upsertEntry not found\")",
        "\t\t\tend",
        "\t\tend,",
        "\t}",
        "end",
        "",
        "--========================================================",
        "-- 効果本体の登録・参照",
        "--========================================================",
        "function M.register(id: string, handler: (ctx:any)->(any))",
        "\tassert(type(id) == \"string\" and #id > 0, \"EffectsRegistry.register: id must be non-empty string\")",
        "\tassert(type(handler) == \"function\", \"EffectsRegistry.register: handler must be function\")",
        "",
        "\t-- ★ ドット化ポリシー：KITO は 'kito.*' のみ受理",
        "\tif isKitoUnderscore(id) then",
        "\t\tLOG.warn(\"[DOT-ONLY] reject registering underscore kito id: %s\", id)",
        "\t\treturn",
        "\tend",
        "\t-- \"kito\" で始まるのにドットでもアンダーバーでもない旧別名（例: 'kitoTori'）も拒否",
        "\tif isKitoLike(id) and (not isKitoDot(id)) then",
        "\t\tLOG.warn(\"[DOT-ONLY] reject registering non-dot kito id: %s\", id)",
        "\t\treturn",
        "\tend",
        "",
        "\tif Registry[id] ~= nil then",
        "\t\twarn((\"[EffectsRegistry] overwriting existing effect id: %s\"):format(id))",
        "\tend",
        "\tRegistry[id] = handler",
        "\tLOG.debug(\"[register] id=%s\", id)",
        "end",
        "",
        "function M.has(id: string): boolean",
        "\treturn Registry[id] ~= nil",
        "end",
        "",
        "function M.list(): {string}",
        "\tlocal t = {}",
        "\tfor k,_ in pairs(Registry) do table.insert(t, k) end",
        "\ttable.sort(t)",
        "\treturn t",
        "end",
        "",
        "--========================================================",
        "-- canApply（適格判定）の登録・参照",
        "--========================================================",
        "-- 登録: (card, ctx) -> (ok:boolean, reason:string?)",
        "function M.registerCanApply(id: string, fn: (any, any)->(boolean, string?))",
        "\tassert(type(id) == \"string\" and #id > 0, \"EffectsRegistry.registerCanApply: id must be non-empty string\")",
        "\tassert(type(fn) == \"function\", \"EffectsRegistry.registerCanApply: fn must be function\")",
        "",
        "\t-- ★ ドット化ポリシー：KITO は 'kito.*' のみ受理",
        "\tif isKitoUnderscore(id) then",
        "\t\tLOG.warn(\"[DOT-ONLY] reject registering canApply for underscore kito id: %s\", id)",
        "\t\treturn",
        "\tend",
        "\tif isKitoLike(id) and (not isKitoDot(id)) then",
        "\t\tLOG.warn(\"[DOT-ONLY] reject registering canApply for non-dot kito id: %s\", id)",
        "\t\treturn",
        "\tend",
        "",
        "\tif CanApplyRegistry[id] ~= nil then",
        "\t\twarn((\"[EffectsRegistry] overwriting existing canApply for id: %s\"):format(id))",
        "\tend",
        "\tCanApplyRegistry[id] = fn",
        "\tLOG.debug(\"[registerCanApply] id=%s\", id)",
        "end",
        "",
        "function M.hasCanApply(id: string): boolean",
        "\treturn CanApplyRegistry[id] ~= nil",
        "end",
        "",
        "-- 取得: 登録が無ければ true を返す（= フィルタ無し）",
        "function M.canApply(id: string, card:any, externCtx:any?): (boolean, string?)",
        "\tlocal fn = CanApplyRegistry[id]",
        "\tif not fn then",
        "\t\treturn true, \"no-check\"",
        "\tend",
        "\t-- externCtx が来ていればそれをベースに最小限の依存を補完",
        "\tlocal ctx = externCtx or {}",
        "\tif ctx.DeckStore == nil then ctx.DeckStore = DeckStore end",
        "\tif ctx.DeckOps   == nil then ctx.DeckOps   = DeckOps   end",
        "\tif ctx.CardEngine== nil then ctx.CardEngine= CardEngine end",
        "\tlocal ok, reason = fn(card, ctx)",
        "\treturn ok and true or false, reason",
        "end",
        "",
        "--========================================================",
        "-- 効果の実行",
        "--========================================================",
        "-- runId: DeckStore のランID（ゲーム/ラウンドなどの単位）",
        "-- effectId: 登録した効果ID",
        "-- payload: 効果固有の入力（対象UID/コード配列・poolUidsなど）",
        "function M.apply(runId: any, effectId: string, payload: any?): ApplyResult",
        "\tif type(effectId) ~= \"string\" or #effectId == 0 then",
        "\t\treturn { ok = false, error = \"effectId is invalid\" }",
        "\tend",
        "",
        "\t-- ★ ドット化ポリシー：KITO のアンダーバー呼び出しは即拒否（早期に原因が分かるよう明示エラー）",
        "\tif isKitoUnderscore(effectId) then",
        "\t\treturn { ok = false, error = (\"underscore kito id is not supported; use dot id: %s -> %s\"):format(effectId, (\"kito.\"..effectId:sub(6))) }",
        "\tend",
        "\tif isKitoLike(effectId) and (not isKitoDot(effectId)) then",
        "\t\treturn { ok = false, error = (\"non-dot kito id is not supported: %s\"):format(effectId) }",
        "\tend",
        "",
        "\tlocal handler = Registry[effectId]",
        "\tif not handler then",
        "\t\treturn { ok = false, error = (\"effect '%s' not registered\"):format(tostring(effectId)) }",
        "\tend",
        "",
        "\tlocal ctx = buildCtx(runId, payload)",
        "",
        "\t-- 🔧 ハンドラが (store, result) を返す場合に対応：第二戻り値を優先",
        "\tlocal okCall, r1, r2 = pcall(handler, ctx)",
        "\tif not okCall then",
        "\t\tLOG.warn(\"[apply] error id=%s err=%s\", effectId, tostring(r1))",
        "\t\treturn { ok = false, error = tostring(r1) }",
        "\tend",
        "",
        "\tlocal res = (r2 ~= nil) and r2 or r1",
        "",
        "\t-- デッキストア風テーブルのみ返ってきた場合の救済（成功として扱う）",
        "\tlocal function looksLikeDeckStore(v:any)",
        "\t\treturn (type(v)==\"table\") and (type(v.entries)==\"table\" or type(v.v)==\"number\")",
        "\tend",
        "\tif looksLikeDeckStore(res) then",
        "\t\treturn { ok = true }",
        "\tend",
        "",
        "\t-- 正規化",
        "\tif typeof(res) ~= \"table\" then",
        "\t\treturn { ok = (res ~= false and res ~= nil), meta = res }",
        "\tend",
        "\tif res.ok == nil then res.ok = true end",
        "\treturn res :: ApplyResult",
        "end",
        "",
        "return M"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [
          "SharedModules",
          "Deck",
          "DeckStore",
          "Deck",
          "DeckOps",
          "CardEngine",
          "Logger"
        ],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/shared/DeckSampler.lua",
      "ext": "lua",
      "binary": false,
      "size": 5244,
      "mtime": "2025-09-26T09:22:24.664991+00:00",
      "head": [
        "-- ReplicatedStorage/SharedModules/DeckSampler.lua",
        "-- 目的: ラン中デッキ(state.deck)から K 枚ぶんの \"uid\" を無作為抽出する（重複なし）。",
        "-- 依存: Balance.KITO_POOL_SIZE / RunDeckUtil.ensureUids",
        "-- 追記: ctx.rng があればそれを優先使用。なければ時刻ベースでフォールバック。",
        "-- 追加: sampleAny12(state, ctx?) … 既定サイズ(KITO_POOL_SIZE)で抽出するショートカット。",
        "",
        "local RS = game:GetService(\"ReplicatedStorage\")",
        "",
        "local Balance     = require(RS:WaitForChild(\"Config\"):WaitForChild(\"Balance\"))",
        "local RunDeckUtil = require(RS:WaitForChild(\"SharedModules\"):WaitForChild(\"RunDeckUtil\"))",
        "",
        "local M = {}",
        "",
        "-- ───────────────── Logger（任意・無害）",
        "local LOG do",
        "\tlocal ok, Logger = pcall(function()",
        "\t\treturn require(RS:WaitForChild(\"SharedModules\"):WaitForChild(\"Logger\"))",
        "\tend)",
        "\tif ok and Logger and type(Logger.scope) == \"function\" then",
        "\t\tLOG = Logger.scope(\"DeckSampler\")",
        "\telse",
        "\t\tLOG = { info=function(...) end, debug=function(...) end, warn=function(...) warn(string.format(...)) end }",
        "\tend",
        "end",
        "",
        "-- ───────────────── RNG 取得（ctx.rng 優先）",
        "-- 引数 rngOrCtx は Random か、ctxテーブル（ctx.rng を見る）か、nil を受け付ける",
        "local function resolveRng(state:any, rngOrCtx:any?): Random",
        "\t-- 明示 Random",
        "\tif typeof(rngOrCtx) == \"Random\" then",
        "\t\treturn rngOrCtx",
        "\tend",
        "\t-- ctx テーブルから",
        "\tif typeof(rngOrCtx) == \"table\" and typeof(rngOrCtx.rng) == \"Random\" then",
        "\t\treturn rngOrCtx.rng",
        "\tend",
        "\t-- フォールバック: 時刻＋runId/seed風味",
        "\tlocal salt = 0",
        "\tif typeof(state) == \"table\" then",
        "\t\tlocal runId = tostring(state.runId or \"\")",
        "\t\t-- runId から数字だけ抽出して少しだけ安定性を持たせる（任意）",
        "\t\tlocal num = string.match(runId, \"%d+\")",
        "\t\tif num then salt = tonumber(num) or 0 end",
        "\tend",
        "\tlocal seed = (os.clock() * 1e6 + salt) % 2^31",
        "\treturn Random.new(seed)",
        "end",
        "",
        "-- ───────────────── 部分フィッシャー–イェーツ: K 枚だけランダム抽出",
        "-- 速度最適化: 全体シャッフルではなく「末尾K個をランダム化」して取り出す",
        "local function pickKIndices(total: number, want: number, rng: Random): {number}",
        "\t-- インデックス配列 [1..total]",
        "\tlocal idx = table.create(total)",
        "\tfor i = 1, total do",
        "\t\tidx[i] = i",
        "\tend",
        "\t-- i=total から total-want+1 まで部分シャッフル",
        "\tfor i = total, math.max(total - want + 1, 2), -1 do",
        "\t\tlocal j = rng:NextInteger(1, i)",
        "\t\tidx[i], idx[j] = idx[j], idx[i]",
        "\tend",
        "\t-- 末尾 want 件を返す",
        "\tlocal out = table.create(want)",
        "\tlocal p = 1",
        "\tfor i = total - want + 1, total do",
        "\t\tout[p] = idx[i]",
        "\t\tp += 1",
        "\tend",
        "\treturn out",
        "end",
        "",
        "-- ───────────────── デッキから uid の配列を K 個ぶん返す（Kが未指定なら既定値）",
        "-- 互換I/F: 呼び出しは従来どおり M.sampleUids(state [, k [, rngOrCtx]])",
        "function M.sampleUids(state:any, k:number?, rngOrCtx:any?): {string}",
        "\tif typeof(state) ~= \"table\" then return {} end",
        "\tif typeof(state.deck) ~= \"table\" then return {} end",
        "",
        "\t-- UID 付与を保証",
        "\tRunDeckUtil.ensureUids(state)",
        "",
        "\tlocal deck = state.deck",
        "\tlocal total = #deck",
        "\tif total <= 0 then return {} end",
        "",
        "\tlocal want = tonumber(k or Balance.KITO_POOL_SIZE) or 0",
        "\twant = math.clamp(want, 0, total)",
        "\tif want <= 0 then return {} end",
        "",
        "\tlocal rng = resolveRng(state, rngOrCtx)",
        "",
        "\t-- K 枚だけ部分シャッフルして取得",
        "\tlocal indices = pickKIndices(total, want, rng)",
        "",
        "\t-- UID配列を作成（万一の欠損はスキップして詰める）",
        "\tlocal out = table.create(want)",
        "\tlocal o = 1",
        "\tfor _, i in ipairs(indices) do",
        "\t\tlocal e = deck[i]",
        "\t\tlocal uid = e and e.uid",
        "\t\tif typeof(uid) == \"string\" and #uid > 0 then",
        "\t\t\tout[o] = uid",
        "\t\t\to += 1",
        "\t\telse",
        "\t\t\tLOG.warn(\"[sampleUids] missing uid at index=%s (skipped)\", tostring(i))",
        "\t\tend",
        "\tend",
        "\t-- 欠損があって want 未満になる場合は、余りのインデックスから補充を試みる",
        "\tif o <= want then",
        "\t\tfor i = 1, total do",
        "\t\t\t-- 既に選んだ index は飛ばす（簡易セット）",
        "\t\t\t-- ※ want が小さい前提のため O(n) で十分",
        "\t\t\tlocal used = false",
        "\t\t\tfor _, ii in ipairs(indices) do if ii == i then used = true break end end",
        "\t\t\tif not used then",
        "\t\t\t\tlocal e = deck[i]",
        "\t\t\t\tlocal uid = e and e.uid",
        "\t\t\t\tif typeof(uid) == \"string\" and #uid > 0 then",
        "\t\t\t\t\tout[o] = uid",
        "\t\t\t\t\to += 1",
        "\t\t\t\t\tif o > want then break end",
        "\t\t\t\tend",
        "\t\t\tend",
        "\t\tend",
        "\tend",
        "",
        "\t-- 最終長を want に合わせる（nil が入らないよう調整）",
        "\tif #out > want then",
        "\t\tfor i = #out, want + 1, -1 do",
        "\t\t\tout[i] = nil",
        "\t\tend",
        "\tend",
        "",
        "\tLOG.debug(\"[sampleUids] total=%d want=%d -> out=%d\", total, want, #out)",
        "\treturn out",
        "end",
        "",
        "-- ───────────────── 既定サイズ（Balance.KITO_POOL_SIZE）で抽出するショートカット",
        "-- 計画書での any12 に相当。rng は ctx か Random を渡せる。",
        "function M.sampleAny12(state:any, rngOrCtx:any?): {string}",
        "\tlocal k = tonumber(Balance.KITO_POOL_SIZE) or 12",
        "\treturn M.sampleUids(state, k, rngOrCtx)",
        "end",
        "",
        "return M"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [
          "Config",
          "Balance",
          "SharedModules",
          "RunDeckUtil",
          "SharedModules",
          "Logger"
        ],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/shared/LocaleUtil.lua",
      "ext": "lua",
      "binary": false,
      "size": 668,
      "mtime": "2025-09-19T10:38:44.127297+00:00",
      "head": [
        "-- LocaleUtil.lua (client/shared)",
        "local RS = game:GetService(\"ReplicatedStorage\")",
        "local Locale = require(RS:WaitForChild(\"Config\"):WaitForChild(\"Locale\"))",
        "",
        "local M = {}",
        "",
        "function M.norm(v:string?)",
        "\tv = tostring(v or \"\"):lower()",
        "\tif v==\"ja\" or v==\"en\" then return v end",
        "\tif v==\"jp\" then return \"ja\" end",
        "\treturn nil",
        "end",
        "",
        "function M.safeGlobal()",
        "\tif typeof(Locale.getGlobal)==\"function\" then",
        "\t\tlocal ok, val = pcall(Locale.getGlobal)",
        "\t\tif ok then return M.norm(val) end",
        "\tend",
        "\treturn nil",
        "end",
        "",
        "function M.pickInitial()",
        "\treturn M.safeGlobal()",
        "\t    or (type(Locale.pick)==\"function\" and (M.norm(Locale.pick()) or \"en\"))",
        "\t    or \"en\"",
        "end",
        "",
        "return M"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [
          "Config",
          "Locale"
        ],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 1,
          "ja_literals": 2
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/shared/Logger.lua",
      "ext": "lua",
      "binary": false,
      "size": 10996,
      "mtime": "2025-10-04T19:43:57.730523+00:00",
      "head": [
        "-- SharedModules/Logger.lua",
        "-- =========================================================",
        "-- ▼▼▼ ここだけ編集すればOK（保存式・手動切替） ▼▼▼",
        "-- ログ量: 1=少ない(WARN/ERROR) / 2=そこそこ(INFO以上) / 3=全部(DEBUGまで)",
        "local USER_VERBOSITY = 2  -- ★ここを 1 / 2 / 3 に変更して保存",
        "",
        "-- 「大量に出ているログ」を DEBUG に“降格”するルール",
        "-- 例: ScoreタグのINFOをDEBUGに落とす → infoToDebugTags = { \"Score\" }",
        "--     文言に \"P2_roles\" を含むINFOをDEBUGへ → infoToDebugContains = { \"P2_roles\" }",
        "--     Luaパターンで \"[P%d+_.*]\" を含むINFOをDEBUGへ → infoToDebugPatterns = { \"P%d+_%w+\" }",
        "local USER_DOWNGRADE = {",
        "\tinfoToDebugTags      = { \"Score\" },  -- ←デフォはScoreだけ降格。不要なら消してOK",
        "\tinfoToDebugContains  = {",
        "\t\t-- \"P2_roles\", \"P3_matsuri_kito\", \"P4_talisman\", \"P5_omamori\",",
        "\t},",
        "\tinfoToDebugPatterns  = {",
        "\t\t-- \"P%d+_%w+\",             -- 例: P2_xxx/P3_xxx...にマッチ",
        "\t\t-- \"pushState%.begin\",     -- 例: StateHubのbegin行を落とす",
        "\t},",
        "}",
        "-- ▲▲▲ ここだけ編集すればOK ▲▲▲",
        "-- =========================================================",
        "--",
        "-- 使い方:",
        "--   local RS = game:GetService(\"ReplicatedStorage\")",
        "--   local Logger = require(RS.SharedModules.Logger)",
        "--   local LOG = Logger.scope(\"RunScreen\")",
        "--   LOG.debug(\"boot %s\", tostring(version))",
        "--",
        "-- ※コードから明示的に変えたい場合:",
        "--   Logger.setVerbosity(3)",
        "--   Logger.configure({",
        "--     verbosity = 1,",
        "--     infoToDebugTags = { \"Score\", \"StateHub\" },",
        "--     infoToDebugContains = { \"P2_roles\" },",
        "--     infoToDebugPatterns = { \"pushState%%.begin\" },",
        "--   })",
        "--",
        "-- 既存APIの互換:",
        "--   Logger.setLevel/Logger.getLevel, Logger.scope, Logger.configure 等はそのまま",
        "",
        "local RunService   = game:GetService(\"RunService\")",
        "local HttpService  = game:GetService(\"HttpService\")",
        "",
        "local Logger = {}",
        "Logger.DEBUG = 10",
        "Logger.INFO  = 20",
        "Logger.WARN  = 30",
        "Logger.ERROR = 40",
        "Logger.NONE  = 99",
        "",
        "-- 1/2/3 → ログ閾値",
        "local VERBOSITY_TO_LEVEL = {",
        "\t[1] = Logger.WARN,  -- 少ない: WARN/ERROR",
        "\t[2] = Logger.INFO,  -- そこそこ: INFO/WARN/ERROR",
        "\t[3] = Logger.DEBUG, -- 全部: DEBUG含む",
        "}",
        "",
        "-- 初期レベル: USER_VERBOSITY優先。未設定/不正なら Studio=DEBUG / 公開=WARN",
        "local function _initialLevel()",
        "\tlocal v = tonumber(USER_VERBOSITY)",
        "\tif v and VERBOSITY_TO_LEVEL[v] then",
        "\t\treturn VERBOSITY_TO_LEVEL[v], v",
        "\tend",
        "\tlocal lvl = RunService:IsStudio() and Logger.DEBUG or Logger.WARN",
        "\treturn lvl, nil",
        "end",
        "",
        "local _initLevel, _initVerbosity = _initialLevel()",
        "",
        "local state = {",
        "\tlevel = _initLevel,          -- 初期レベル",
        "\tverbosity = _initVerbosity,  -- 1/2/3（USER_VERBOSITYが有効なら入る）",
        "\ttimePrefix = true,",
        "\tthrowOnError = false,        -- ERRORで error() したいなら true",
        "\tenabledTags = nil,           -- nil=全許可 / set型 {\"NAV\"=true, ...}",
        "\tdisabledTags = {},           -- set型",
        "\tdupWindowSec = 0.75,         -- 同一メッセージ抑制ウィンドウ（秒）",
        "\t_last = {},                  -- [key]=lastTime",
        "\tsink = nil,                  -- カスタム出力先 (function(level, line))",
        "",
        "\t-- 降格ルール（初期値はUSER_DOWNGRADEで与える）",
        "\tinfoToDebugTags = {},",
        "\tinfoToDebugContains = {},",
        "\tinfoToDebugPatterns = {},",
        "}",
        "",
        "-- USER_DOWNGRADE を state に反映（テーブルコピー）",
        "do",
        "\tif type(USER_DOWNGRADE) == \"table\" then",
        "\t\tif type(USER_DOWNGRADE.infoToDebugTags) == \"table\" then",
        "\t\t\tfor _, t in ipairs(USER_DOWNGRADE.infoToDebugTags) do",
        "\t\t\t\tstate.infoToDebugTags[tostring(t)] = true",
        "\t\t\tend",
        "\t\tend",
        "\t\tif type(USER_DOWNGRADE.infoToDebugContains) == \"table\" then",
        "\t\t\tfor _, s in ipairs(USER_DOWNGRADE.infoToDebugContains) do",
        "\t\t\t\ttable.insert(state.infoToDebugContains, tostring(s))",
        "\t\t\tend",
        "\t\tend",
        "\t\tif type(USER_DOWNGRADE.infoToDebugPatterns) == \"table\" then",
        "\t\t\tfor _, p in ipairs(USER_DOWNGRADE.infoToDebugPatterns) do",
        "\t\t\t\ttable.insert(state.infoToDebugPatterns, tostring(p))",
        "\t\t\tend",
        "\t\tend",
        "\tend",
        "end",
        "",
        "local LVL_NAME = {",
        "\t[Logger.DEBUG] = \"D\",",
        "\t[Logger.INFO]  = \"I\",",
        "\t[Logger.WARN]  = \"W\",",
        "\t[Logger.ERROR] = \"E\",",
        "}",
        "",
        "local function nowMs()",
        "\treturn os.clock()",
        "end",
        "",
        "local function safeJson(v)",
        "\tlocal ok, s = pcall(function()",
        "\t\t-- Instance を避けて簡易シリアライズ",
        "\t\tlocal function scrub(x, depth)",
        "\t\t\tdepth = depth or 0",
        "\t\t\tif depth > 3 then return \"<depth-limit>\" end",
        "\t\t\tif typeof(x) == \"Instance\" then",
        "\t\t\t\treturn (\"<Instance:%s:%s>\"):format(x.ClassName, x.Name)",
        "\t\t\telseif typeof(x) == \"table\" then",
        "\t\t\t\tlocal t = {}",
        "\t\t\t\tlocal i = 0",
        "\t\t\t\tfor k, vv in pairs(x) do",
        "\t\t\t\t\ti += 1",
        "\t\t\t\t\tif i > 32 then t[\"<truncated>\"] = true; break end",
        "\t\t\t\t\tt[tostring(k)] = scrub(vv, depth + 1)",
        "\t\t\t\tend",
        "\t\t\t\treturn t",
        "\t\t\telse",
        "\t\t\t\treturn x",
        "\t\t\tend",
        "\t\tend",
        "\t\treturn HttpService:JSONEncode(scrub(v))",
        "\tend)",
        "\tif ok then return s end",
        "\treturn tostring(v)",
        "end",
        "",
        "local function fmt(msg, ...)",
        "\tif select(\"#\", ...) == 0 then",
        "\t\treturn tostring(msg)",
        "\tend",
        "\t-- string.format が失敗（%流入等）するケースにも強い",
        "\tlocal ok, out = pcall(string.format, tostring(msg), ...)",
        "\tif ok then return out end",
        "\t-- フォーマット不可なら素朴に連結",
        "\tlocal parts = { tostring(msg) }",
        "\tfor i = 1, select(\"#\", ...) do",
        "\t\tlocal v = select(i, ...)",
        "\t\ttable.insert(parts, (typeof(v) == \"table\") and safeJson(v) or tostring(v))",
        "\tend",
        "\treturn table.concat(parts, \" | \")",
        "end",
        "",
        "local function shouldLog(tag, level)",
        "\tif level < state.level then return false end",
        "\tif state.enabledTags and not state.enabledTags[tag] then",
        "\t\treturn false",
        "\tend",
        "\tif state.disabledTags and state.disabledTags[tag] then",
        "\t\treturn false",
        "\tend",
        "\treturn true",
        "end",
        "",
        "local function sideLetter()",
        "\tif RunService:IsServer() then return \"S\" end",
        "\tif RunService:IsClient() then return \"C\" end",
        "\treturn \"-\"",
        "end",
        "",
        "local function output(level, tag, text)",
        "\tlocal prefixT = \"\"",
        "\tif state.timePrefix then",
        "\t\t-- hh:mm:ss（ざっくり）",
        "\t\tlocal t = os.time() % 86400",
        "\t\tlocal h = math.floor(t/3600)",
        "\t\tlocal m = math.floor((t%3600)/60)",
        "\t\tlocal s = t%60",
        "\t\tprefixT = string.format(\"%02d:%02d:%02d \", h, m, s)",
        "\tend",
        "\tlocal line = string.format(\"[%s]%s[%s][%s] %s\",",
        "\t\tLVL_NAME[level] or \"?\", prefixT, sideLetter(), tag, text)",
        "",
        "\tif state.sink then",
        "\t\tlocal ok = pcall(state.sink, level, line)",
        "\t\tif ok then return end",
        "\tend",
        "",
        "\tif level >= Logger.WARN then",
        "\t\twarn(line)",
        "\telse",
        "\t\tprint(line)",
        "\tend",
        "",
        "\tif level >= Logger.ERROR and state.throwOnError then",
        "\t\terror(line)",
        "\tend",
        "end",
        "",
        "local function dupKey(level, tag, text)",
        "\treturn string.format(\"%d|%s|%s\", level, tag, text)",
        "end",
        "",
        "-- INFOをDEBUGへ“降格”するかを判定",
        "local function maybeDowngrade(level, tag, text)",
        "\tif level ~= Logger.INFO then return level end",
        "",
        "\t-- タグ指定",
        "\tif state.infoToDebugTags and state.infoToDebugTags[tag] then",
        "\t\treturn Logger.DEBUG",
        "\tend",
        "",
        "\t-- 含む文字列",
        "\tif state.infoToDebugContains then",
        "\t\tfor _, s in ipairs(state.infoToDebugContains) do",
        "\t\t\tif s ~= \"\" and string.find(text, s, 1, true) then",
        "\t\t\t\treturn Logger.DEBUG",
        "\t\t\tend",
        "\t\tend",
        "\tend",
        "",
        "\t-- Luaパターン",
        "\tif state.infoToDebugPatterns then",
        "\t\tfor _, p in ipairs(state.infoToDebugPatterns) do",
        "\t\t\tif p ~= \"\" and string.find(text, p) then",
        "\t\t\t\treturn Logger.DEBUG",
        "\t\t\tend",
        "\t\tend",
        "\tend",
        "",
        "\treturn level",
        "end",
        "",
        "local function log(level, tag, msg, ...)",
        "\t-- 先に整形（降格で text を使うため）",
        "\tlocal text = fmt(msg, ...)",
        "",
        "\t-- 降格判定（主にINFO→DEBUG）",
        "\tlevel = maybeDowngrade(level, tag, text)",
        "",
        "\tif not shouldLog(tag, level) then return end",
        "",
        "\t-- 連打抑制",
        "\tlocal key = dupKey(level, tag, text)",
        "\tlocal t = nowMs()",
        "\tlocal last = state._last[key]",
        "\tif last and (t - last) < state.dupWindowSec then",
        "\t\treturn",
        "\tend",
        "\tstate._last[key] = t",
        "\toutput(level, tag, text)",
        "end",
        "",
        "-- ========= Public API =========",
        "",
        "-- 1/2/3 の簡易モード設定",
        "function Logger.setVerbosity(n)",
        "\tn = tonumber(n)",
        "\tif not n or not VERBOSITY_TO_LEVEL[n] then return end",
        "\tstate.verbosity = n",
        "\tstate.level = VERBOSITY_TO_LEVEL[n]",
        "end",
        "",
        "function Logger.getVerbosity()",
        "\treturn state.verbosity",
        "end",
        "",
        "function Logger.configure(opts)",
        "\tif typeof(opts) ~= \"table\" then return end",
        "",
        "\t-- verbosity があれば最優先（USER_VERBOSITYより後で呼ぶと上書き）",
        "\tif opts.verbosity ~= nil then",
        "\t\tLogger.setVerbosity(opts.verbosity)",
        "\tend",
        "",
        "\t-- level の直接指定も可（verbosity 未指定/無効時はこちらが効く）",
        "\tif opts.level ~= nil then",
        "\t\tstate.level = opts.level",
        "\tend",
        "",
        "\tif opts.timePrefix ~= nil then state.timePrefix = opts.timePrefix end",
        "\tif opts.throwOnError ~= nil then state.throwOnError = opts.throwOnError end",
        "\tif opts.dupWindowSec ~= nil then state.dupWindowSec = opts.dupWindowSec end",
        "\tif opts.sink ~= nil then state.sink = opts.sink end",
        "",
        "\tif opts.enableTags then",
        "\t\tlocal set = {}",
        "\t\tfor _, t in ipairs(opts.enableTags) do set[tostring(t)] = true end",
        "\t\tstate.enabledTags = set",
        "\tend",
        "\tif opts.disableTags then"
      ],
      "truncated": true,
      "analysis": {
        "waitForChild": [],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/shared/Modifiers.lua",
      "ext": "lua",
      "binary": false,
      "size": 90,
      "mtime": "2025-08-25T23:37:39.959466+00:00",
      "head": [
        "local M = {}",
        "-- TODO: 祭事（十干）・お守り効果（加点/倍率）",
        "return M"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/shared/NavClient.lua",
      "ext": "lua",
      "binary": false,
      "size": 1007,
      "mtime": "2025-09-17T06:04:23.676734+00:00",
      "head": [
        "-- ReplicatedStorage/SharedModules/NavClient.lua",
        "-- v0.9.3 Nav ラッパ：UI は Nav:next(\"home\"|\"next\"|\"save\") だけ呼ぶ",
        "",
        "local M = {}",
        "M.__index = M",
        "",
        "-- legacy = { GoHome: RemoteEvent?, GoNext: RemoteEvent?, SaveQuit: RemoteEvent? }",
        "function M.new(decideNext, legacy)",
        "\tlocal self = setmetatable({}, M)",
        "\tself.DecideNext = decideNext",
        "\tself.legacy = legacy or {}",
        "\treturn self",
        "end",
        "",
        "function M:next(op)",
        "\t-- ロガー整備前の暫定：DoD用ログ",
        "\tprint(\"NAV: next \" .. tostring(op))",
        "",
        "\t-- 正準",
        "\tif self.DecideNext and typeof(self.DecideNext.FireServer) == \"function\" then",
        "\t\tself.DecideNext:FireServer(op)",
        "\t\treturn",
        "\tend",
        "",
        "\t-- レガシー互換（段階的廃止）",
        "\tlocal lg = self.legacy or {}",
        "\tif op == \"home\" and lg.GoHome then lg.GoHome:FireServer(); return end",
        "\tif op == \"next\" and lg.GoNext then lg.GoNext:FireServer(); return end",
        "\tif op == \"save\" and lg.SaveQuit then lg.SaveQuit:FireServer(); return end",
        "",
        "\twarn(\"[NavClient] No route for op=\", op)",
        "end",
        "",
        "return M"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/shared/PickService.lua",
      "ext": "lua",
      "binary": false,
      "size": 2787,
      "mtime": "2025-08-24T19:16:40.508783+00:00",
      "head": [
        "-- ReplicatedStorage/SharedModules/PickService.lua",
        "local RS = game:GetService(\"ReplicatedStorage\")",
        "local StateHub = require(RS.SharedModules.StateHub)",
        "",
        "local Pick = {}",
        "",
        "local function countSameMonth(list, month)",
        "\tlocal idxs = {}",
        "\tfor i,card in ipairs(list) do if card.month == month then table.insert(idxs, i) end end",
        "\treturn idxs",
        "end",
        "",
        "local function sweepFourOnBoard(s)",
        "\tlocal seen = {}",
        "\tfor i,card in ipairs(s.board) do",
        "\t\tlocal m = card.month; seen[m] = seen[m] or {}; table.insert(seen[m], i)",
        "\tend",
        "\tfor _,idxs in pairs(seen) do",
        "\t\tif #idxs >= 4 then",
        "\t\t\ttable.sort(idxs, function(a,b) return a>b end)",
        "\t\t\tfor _,bi in ipairs(idxs) do",
        "\t\t\t\ttable.insert(s.dump, table.remove(s.board, bi))",
        "\t\t\tend",
        "\t\tend",
        "\tend",
        "end",
        "",
        "local function takeFromBoardByMonth(s, month, howMany)",
        "\tlocal takenCount = 0",
        "\tfor i = #s.board, 1, -1 do",
        "\t\tif s.board[i].month == month then",
        "\t\t\ttable.insert(s.taken, table.remove(s.board, i))",
        "\t\t\ttakenCount += 1",
        "\t\t\tif howMany and takenCount >= howMany then break end",
        "\t\tend",
        "\tend",
        "\treturn takenCount",
        "end",
        "",
        "local function drawOneFromDeck(s)",
        "\tif #s.deck <= 0 then return nil end",
        "\tlocal c = table.remove(s.deck)",
        "\ttable.insert(s.board, c)",
        "\treturn c",
        "end",
        "",
        "function Pick.bind(Remotes)",
        "\tRemotes.ReqPick.OnServerEvent:Connect(function(plr: Player, handIdx: number, boardIdx: number?)",
        "\t\tlocal s = StateHub.get(plr); if not s or s.phase~=\"play\" then return end",
        "\t\tif not handIdx or not s.hand[handIdx] then return end",
        "",
        "\t\tlocal playCard = table.remove(s.hand, handIdx)",
        "",
        "\t\tlocal idxsOnBoard = countSameMonth(s.board, playCard.month)",
        "\t\tif #idxsOnBoard == 3 then",
        "\t\t\ttable.insert(s.taken, playCard)",
        "\t\t\ttakeFromBoardByMonth(s, playCard.month, 3)",
        "\t\telse",
        "\t\t\tif #idxsOnBoard >= 1 then",
        "\t\t\t\tlocal matched = false",
        "\t\t\t\tif boardIdx and s.board[boardIdx] and s.board[boardIdx].month == playCard.month then",
        "\t\t\t\t\ttable.insert(s.taken, playCard)",
        "\t\t\t\t\ttable.insert(s.taken, table.remove(s.board, boardIdx))",
        "\t\t\t\t\tmatched = true",
        "\t\t\t\tend",
        "\t\t\t\tif not matched then",
        "\t\t\t\t\ttable.insert(s.taken, playCard)",
        "\t\t\t\t\ttakeFromBoardByMonth(s, playCard.month, 1)",
        "\t\t\t\tend",
        "\t\t\telse",
        "\t\t\t\ttable.insert(s.board, playCard)",
        "\t\t\tend",
        "\t\tend",
        "\t\tsweepFourOnBoard(s)",
        "",
        "\t\tlocal flip = drawOneFromDeck(s)",
        "\t\tif flip then",
        "\t\t\tlocal idxs2 = countSameMonth(s.board, flip.month)",
        "\t\t\tif #idxs2 >= 2 then",
        "\t\t\t\tlocal takenOne = false",
        "\t\t\t\tfor i = #s.board, 1, -1 do",
        "\t\t\t\t\tif s.board[i].month == flip.month and s.board[i] ~= flip then",
        "\t\t\t\t\t\ttable.insert(s.taken, table.remove(s.board, i))",
        "\t\t\t\t\t\ttakenOne = true; break",
        "\t\t\t\t\tend",
        "\t\t\t\tend",
        "\t\t\t\tfor i = #s.board, 1, -1 do",
        "\t\t\t\t\tif s.board[i] == flip then",
        "\t\t\t\t\t\ttable.insert(s.taken, table.remove(s.board, i))",
        "\t\t\t\t\t\tbreak",
        "\t\t\t\t\tend",
        "\t\t\t\tend",
        "\t\t\tend",
        "\t\t\tsweepFourOnBoard(s)",
        "\t\tend",
        "",
        "\t\tStateHub.pushState(plr)",
        "\tend)",
        "end",
        "",
        "return Pick"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/shared/PoolEditor.lua",
      "ext": "lua",
      "binary": false,
      "size": 1448,
      "mtime": "2025-09-24T16:46:07.433504+00:00",
      "head": [
        "-- ReplicatedStorage/SharedModules/PoolEditor.lua",
        "-- DEPRECATED: Deck リファクターにより役割を終了。",
        "-- すべてのデッキ編集は EffectsRegistry + DeckStore.transact + DeckOps に移行してください。",
        "--",
        "-- 互換のため public API(start/mutate/commit)は残すが、すべて no-op。",
        "-- 誤用に気づけるよう warn を出し、安全な戻り値を返す。",
        "",
        "local HttpService = game:GetService(\"HttpService\")",
        "",
        "local M = {}",
        "",
        "local function _warn(where: string)",
        "\twarn((\"[PoolEditor] DEPRECATED: '%s' was called. Use Deck/EffectsRegistry + DeckOps instead.\"):format(where))",
        "end",
        "",
        "-- セッション開始（ダミーを返す）",
        "-- 戻り値形式は維持: { id, version, createdAt, expiresAt, uids = {}, snap = {} }",
        "function M.start(_state: any, _k: number?)",
        "\t_warn(\"start\")",
        "\tlocal now = os.time()",
        "\treturn {",
        "\t\tid        = HttpService:GenerateGUID(false),",
        "\t\tversion   = 0,",
        "\t\tcreatedAt = now,",
        "\t\texpiresAt = now, -- すぐ失効扱い",
        "\t\tuids      = {},",
        "\t\tsnap      = {},",
        "\t}",
        "end",
        "",
        "-- mutate: 互換のため false を返す（変更なし）",
        "function M.mutate(_sess: any, _op: any): (boolean, any?)",
        "\t_warn(\"mutate\")",
        "\treturn false, \"PoolEditor is deprecated (no-op)\"",
        "end",
        "",
        "-- commit: 互換のため false を返す（変更なし）",
        "function M.commit(_state: any, _sess: any): (boolean, string)",
        "\t_warn(\"commit\")",
        "\treturn false, \"PoolEditor is deprecated (no-op)\"",
        "end",
        "",
        "return M"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/shared/RerollService.lua",
      "ext": "lua",
      "binary": false,
      "size": 3902,
      "mtime": "2025-10-03T20:06:07.520150+00:00",
      "head": [
        "-- ReplicatedStorage/SharedModules/RerollService.lua",
        "-- 場/手のリロールを分離（SSOT：rerollFieldLeft / rerollHandLeft が唯一の真実）",
        "-- 旧フィールド（rerollsLeft / handsLeft）には一切読まない・書かない",
        "",
        "local RS = game:GetService(\"ReplicatedStorage\")",
        "local CardEngine = require(RS.SharedModules.CardEngine)",
        "local StateHub   = require(RS.SharedModules.StateHub)",
        "",
        "local Reroll = {}",
        "",
        "--========================",
        "-- 内部ヘルパ",
        "--========================",
        "local function shuffleDeck(deck)",
        "\tCardEngine.shuffle(deck, os.time())",
        "end",
        "",
        "local function rebuildDeckWith(parts)",
        "\tlocal deck = {}",
        "\tlocal function push(list)",
        "\t\tif list then",
        "\t\t\tfor i = 1, #list do",
        "\t\t\t\ttable.insert(deck, list[i])",
        "\t\t\tend",
        "\t\tend",
        "\tend",
        "\tpush(parts.deck); push(parts.hand); push(parts.board); push(parts.dump)",
        "\treturn deck",
        "end",
        "",
        "-- 正準カウンタの存在を保証（run.reroll を参考に補完）。旧フィールドは触らない。",
        "local function ensureRerollCounters(s:any)",
        "\ts.run = s.run or {}",
        "\ts.run.reroll = s.run.reroll or {}",
        "",
        "\tif s.rerollFieldLeft == nil then",
        "\t\tlocal v = tonumber(s.run.reroll.field or 0) or 0",
        "\t\ts.rerollFieldLeft = v",
        "\tend",
        "\tif s.rerollHandLeft == nil then",
        "\t\tlocal v = tonumber(s.run.reroll.hand or 0) or 0",
        "\t\ts.rerollHandLeft = v",
        "\tend",
        "",
        "\ts.rerollFieldLeft = tonumber(s.rerollFieldLeft or 0) or 0",
        "\ts.rerollHandLeft  = tonumber(s.rerollHandLeft  or 0) or 0",
        "",
        "\t-- 正本を run.reroll にも常に反映（セーブ/復帰向け）",
        "\ts.run.reroll.field = s.rerollFieldLeft",
        "\ts.run.reroll.hand  = s.rerollHandLeft",
        "end",
        "",
        "local function decAndSync(s:any, key:string)",
        "\tensureRerollCounters(s)",
        "\tlocal v = tonumber(s[key] or 0) or 0",
        "\tif v <= 0 then return false end",
        "\ts[key] = v - 1",
        "",
        "\t-- 正本→run.reroll へ同期（旧フィールドは同期しない）",
        "\tif key == \"rerollFieldLeft\" then",
        "\t\ts.run.reroll.field = s.rerollFieldLeft",
        "\telseif key == \"rerollHandLeft\" then",
        "\t\ts.run.reroll.hand  = s.rerollHandLeft",
        "\tend",
        "\treturn true",
        "end",
        "",
        "--========================",
        "-- 実処理",
        "--========================",
        "local function doRerollAll(s)",
        "\t-- 盤面（hand/board/dump を山に戻し）から手札5/場8を再配り",
        "\tlocal newDeck = rebuildDeckWith({ deck = s.deck, hand = s.hand, board = s.board, dump = s.dump })",
        "\ts.hand, s.board, s.dump = {}, {}, {}",
        "\tshuffleDeck(newDeck)",
        "\tfor i = 1, 5 do",
        "\t\tif #newDeck > 0 then table.insert(s.hand,  table.remove(newDeck)) end",
        "\tend",
        "\tfor i = 1, 8 do",
        "\t\tif #newDeck > 0 then table.insert(s.board, table.remove(newDeck)) end",
        "\tend",
        "\ts.deck = newDeck",
        "end",
        "",
        "local function doRerollHand(s)",
        "\t-- 手札のみを山に戻して引き直す（場はそのまま）",
        "\tlocal newDeck = rebuildDeckWith({ deck = s.deck, hand = s.hand })",
        "\ts.hand = {}",
        "\tshuffleDeck(newDeck)",
        "\tfor i = 1, 5 do",
        "\t\tif #newDeck > 0 then table.insert(s.hand, table.remove(newDeck)) end",
        "\tend",
        "\ts.deck = newDeck",
        "end",
        "",
        "--========================",
        "-- バインド",
        "--========================",
        "function Reroll.bind(Remotes, sweepFourOnBoardFn) -- sweep は PickService の同等処理を使うなら渡さなくてもOK",
        "\t-- 場（全体）リロール",
        "\tRemotes.ReqRerollAll.OnServerEvent:Connect(function(plr)",
        "\t\tlocal s = StateHub.get(plr); if not s or s.phase ~= \"play\" then return end",
        "\t\tensureRerollCounters(s)",
        "\t\tif not decAndSync(s, \"rerollFieldLeft\") then return end",
        "\t\tdoRerollAll(s)",
        "\t\tif sweepFourOnBoardFn then sweepFourOnBoardFn(s) end",
        "\t\tStateHub.set(plr, s); StateHub.pushState(plr)",
        "\tend)",
        "",
        "\t-- 手札リロール",
        "\tRemotes.ReqRerollHand.OnServerEvent:Connect(function(plr)",
        "\t\tlocal s = StateHub.get(plr); if not s or s.phase ~= \"play\" then return end",
        "\t\tensureRerollCounters(s)",
        "\t\tif not decAndSync(s, \"rerollHandLeft\") then return end",
        "\t\tdoRerollHand(s)",
        "\t\tif sweepFourOnBoardFn then sweepFourOnBoardFn(s) end",
        "\t\tStateHub.set(plr, s); StateHub.pushState(plr)",
        "\tend)",
        "end",
        "",
        "return Reroll"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/shared/RoundService.lua",
      "ext": "lua",
      "binary": false,
      "size": 9301,
      "mtime": "2025-10-03T20:02:22.508648+00:00",
      "head": [
        "-- v0.9.1 → v0.9.1-nextdeck (+12-month: month/goal 初期化・保持)",
        "-- 季節開始ロジック（configSnapshot/外部デッキスナップ → 当季デッキ → ★季節開始スナップ保存）",
        "-- ★ Reroll統一：rerollFieldLeft / rerollHandLeft を唯一の真実（SSOT）とする",
        "--    旧フィールド（handsLeft / rerollsLeft）への書き込み・同期を完全撤廃",
        "",
        "local RS = game:GetService(\"ReplicatedStorage\")",
        "local SSS = game:GetService(\"ServerScriptService\")",
        "local HttpService = game:GetService(\"HttpService\")",
        "",
        "local CardEngine   = require(RS.SharedModules.CardEngine)",
        "local StateHub     = require(RS.SharedModules.StateHub)",
        "local RunDeckUtil  = require(RS.SharedModules.RunDeckUtil)",
        "",
        "-- ★ 12-month: Balance（目標スコア/開始月 等）",
        "local Balance do",
        "\tlocal ok, mod = pcall(function() return require(RS:WaitForChild(\"Config\"):WaitForChild(\"Balance\")) end)",
        "\tBalance = ok and mod or {",
        "\t\tSTAGE_START_MONTH = 1,",
        "\t\tgetGoalForMonth = function(_) return 1 end,",
        "\t\t-- フォールバック（分離リロール初期値）",
        "\t\tREROLL_FIELD_INIT = 5,",
        "\t\tREROLL_HAND_INIT  = 3,",
        "\t}",
        "end",
        "",
        "-- ★ SaveService（サーバ専用：失敗してもゲームは継続）",
        "local SaveService do",
        "\tlocal ok, mod = pcall(function() return require(SSS:WaitForChild(\"SaveService\")) end)",
        "\tif ok then SaveService = mod else",
        "\t\twarn(\"[RoundService] SaveService not available; season snapshots will be skipped.\")",
        "\t\tSaveService = nil",
        "\tend",
        "end",
        "",
        "local Round = {}",
        "",
        "-- 旧 MAX_HANDS / MAX_REROLLS は廃止。Balance の REROLL_*_INIT を使用。",
        "",
        "local function makeSeasonSeed(seasonNum: number?)",
        "\tlocal guid = HttpService:GenerateGUID(false)",
        "\tlocal mixed = string.format(\"%s-%s-%.6f\", guid, tostring(seasonNum or 0), os.clock())",
        "\tlocal num = tonumber((mixed:gsub(\"%D\",\"\")):sub(1,9)) or math.random(1, 10^9)",
        "\treturn num",
        "end",
        "",
        "-- ★ ランIDを状態に付与（なければ採番）",
        "local function ensureRunId(state)",
        "\tstate.run = state.run or {}",
        "\tif not state.run.id or state.run.id == \"\" then",
        "\t\tstate.run.id = HttpService:GenerateGUID(false)",
        "\tend",
        "\treturn state.run.id",
        "end",
        "",
        "-- ★ 12-month: 月初の goal を state に設定",
        "local function setMonthAndGoal(state, monthOrNil)",
        "\tstate.run = state.run or {}",
        "\tif monthOrNil ~= nil then",
        "\t\tstate.run.month = tonumber(monthOrNil) or state.run.month or Balance.STAGE_START_MONTH or 1",
        "\telse",
        "\t\tstate.run.month = state.run.month or Balance.STAGE_START_MONTH or 1",
        "\tend",
        "\t-- 目標スコア（UI/未達判定用）",
        "\tif Balance.getGoalForMonth then",
        "\t\tstate.goal = Balance.getGoalForMonth(state.run.month)",
        "\telseif Balance.GOAL_BY_MONTH then",
        "\t\tstate.goal = Balance.GOAL_BY_MONTH[state.run.month] or Balance.GOAL_BY_MONTH[1] or 1",
        "\telse",
        "\t\tstate.goal = 1",
        "\tend",
        "end",
        "",
        "-- 次季に繰り越された bright 変換スタックを消化（ラン構成に反映）",
        "local function consumeQueuedConversions(state, rng)",
        "\tlocal bonus = state.bonus",
        "\tlocal n = tonumber(bonus and bonus.queueBrightNext or 0) or 0",
        "\tif n <= 0 then return end",
        "\tlocal cfg = RunDeckUtil.loadConfig(state, true)",
        "\tlocal converted = 0",
        "\tfor _=1,n do",
        "\t\tlocal ok = CardEngine.convertRandomNonBrightToBright(cfg, rng)",
        "\t\tif not ok then break end",
        "\t\tconverted += 1",
        "\tend",
        "\tif converted > 0 then",
        "\t\tRunDeckUtil.saveConfig(state, cfg)",
        "\t\tbonus.queueBrightNext = math.max(0, n - converted)",
        "\tend",
        "end",
        "",
        "-- ★ DeckRegistry.dumpSnapshot(runId) 等から来る可能性を想定して",
        "--   「構成デッキ」形式へ寄せる（配列 or snap.cards を許容）",
        "local function snapshotToConfigDeck(snap)",
        "\tif not snap then return nil end",
        "\tlocal src = snap.cards or snap",
        "\tif type(src) ~= \"table\" then return nil end",
        "",
        "\tlocal cfg = {}",
        "\tfor i, c in ipairs(src) do",
        "\t\t-- month/idx/kind/name/tags/code が取れればそのまま採用",
        "\t\tcfg[i] = {",
        "\t\t\tmonth = c.month, idx = c.idx, kind = c.kind,",
        "\t\t\tname  = c.name,  tags = (c.tags and table.clone(c.tags) or nil),",
        "\t\t\tcode  = c.code,",
        "\t\t}",
        "\tend",
        "\t-- 48枚想定。足りない/壊れていたら無効",
        "\tif #cfg < 48 then return nil end",
        "\treturn cfg",
        "end",
        "",
        "-- 内部：分離リロール初期化（場/手）— SSOT",
        "local function initRerollCounters(state)",
        "\tstate.run = state.run or {}",
        "\t-- Balance から初期値",
        "\tlocal initField = tonumber(Balance.REROLL_FIELD_INIT or 5) or 5",
        "\tlocal initHand  = tonumber(Balance.REROLL_HAND_INIT  or 3) or 3",
        "",
        "\t-- ★ 正カウンタ（唯一の真実）",
        "\tstate.rerollFieldLeft = initField",
        "\tstate.rerollHandLeft  = initHand",
        "",
        "\t-- ★ セーブ/復帰向けの補助（正本のコピー）",
        "\tstate.run.reroll = { field = initField, hand = initHand }",
        "",
        "\t-- ※ 旧互換フィールド（handsLeft / rerollsLeft）は作らない・触らない",
        "end",
        "",
        "-- 季節開始（1=春, 2=夏, ...）",
        "-- ★ 第3引数 opts を追加。opts.deckSnapshot があればそれを最優先で当季の構成に使う。",
        "function Round.newRound(plr: Player, seasonNum: number, opts: any?)",
        "\topts = opts or {}",
        "",
        "\tlocal s = StateHub.get(plr) or {}",
        "\t-- ランIDを必ず持たせる（GameInit からの参照用）",
        "\tlocal runId = ensureRunId(s)",
        "",
        "\t-- ★ 12-month: month と goal を必ず与える（復帰時は保持、明示指定があれば採用）",
        "\tsetMonthAndGoal(s, (s.run and s.run.month) or nil)",
        "\t-- ★ ラウンド開始ごとにリロール回数を初期化（場/手 分離）",
        "\tinitRerollCounters(s)",
        "",
        "\tStateHub.set(plr, s)  -- ここで goal/リロールが state に乗る（この後 push でクライアント反映）",
        "",
        "\t-- 1) ラン構成をロード or 外部スナップで上書き",
        "\tconsumeQueuedConversions(s, Random.new())",
        "",
        "\tlocal configDeck",
        "\tif opts.deckSnapshot then",
        "\t\tconfigDeck = snapshotToConfigDeck(opts.deckSnapshot)",
        "\t\t-- 破損や想定外フォーマットなら従来のロードにフォールバック",
        "\t\tif not configDeck then",
        "\t\t\twarn(\"[RoundService] deckSnapshot was invalid; falling back to RunDeckUtil.loadConfig\")",
        "\t\t\tconfigDeck = RunDeckUtil.loadConfig(s, true)",
        "\t\telse",
        "\t\t\t-- 外部スナップが有効なら構成の正本として保存しておく",
        "\t\t\tRunDeckUtil.saveConfig(s, configDeck)",
        "\t\tend",
        "\telse",
        "\t\tconfigDeck = RunDeckUtil.loadConfig(s, true) -- 48枚（従来）",
        "\tend",
        "",
        "\t-- 2) 当季デッキを構成からクローン",
        "\tlocal seasonDeck = {}",
        "\tfor i, c in ipairs(configDeck) do",
        "\t\tseasonDeck[i] = {",
        "\t\t\tmonth=c.month, idx=c.idx, kind=c.kind, name=c.name,",
        "\t\t\ttags=c.tags and table.clone(c.tags) or nil, code=c.code,",
        "\t\t}",
        "\tend",
        "",
        "\t-- 2.5) ★ シードを明示管理（復元用に state に保持）",
        "\tlocal seed = makeSeasonSeed(seasonNum)",
        "\tCardEngine.shuffle(seasonDeck, seed)",
        "",
        "\t-- 3) 初期配り",
        "\tlocal hand  = CardEngine.draw(seasonDeck, 5)",
        "\tlocal board = {}",
        "\tfor i=1,8 do table.insert(board, table.remove(seasonDeck)) end",
        "",
        "\t-- 4) 状態保存（命名統一：board/dump）",
        "\ts.run         = s.run or {}",
        "\t-- run.id は ensureRunId でセット済み",
        "\ts.deck        = seasonDeck",
        "\ts.hand        = hand",
        "\ts.board       = board",
        "\ts.taken       = {}",
        "\ts.dump        = {}",
        "\ts.season      = seasonNum",
        "",
        "\t-- ★ 分離済みカウンタは initRerollCounters 済み（旧フィールドは作らない）",
        "",
        "\ts.seasonSum   = 0",
        "\ts.chainCount  = 0",
        "\ts.mult        = s.mult or 1.0",
        "\ts.bank        = s.bank or 0",
        "\ts.mon         = s.mon or 0",
        "\ts.phase       = \"play\"",
        "\ts.deckSeed    = seed            -- ★ 復元用に保持",
        "\t-- ★ 12-month: 月初に goal を再確認（他所で month を更新して戻ってきた場合も安全）",
        "\ts.goal        = (Balance.getGoalForMonth and Balance.getGoalForMonth(s.run.month))",
        "\t               or (Balance.GOAL_BY_MONTH and (Balance.GOAL_BY_MONTH[s.run.month] or Balance.GOAL_BY_MONTH[1]))",
        "\t               or 1",
        "",
        "\tStateHub.set(plr, s)",
        "\tStateHub.pushState(plr)",
        "",
        "\t-- 5) ★ 季節開始スナップを保存（CONTINUE用）",
        "\tif SaveService and SaveService.snapSeasonStart then",
        "\t\tpcall(function()",
        "\t\t\t-- SaveService 側が deckSnapshot を受ける設計であれば、ここで configDeck も併せて保存しておくと復帰が堅牢",
        "\t\t\t-- 既存インタフェース維持のため引数はそのまま",
        "\t\t\tSaveService.snapSeasonStart(plr, s, seasonNum)",
        "\t\tend)",
        "\tend",
        "end",
        "",
        "-- ランを完全リセット（構成も初期48へ戻す）",
        "function Round.resetRun(plr: Player)",
        "\tlocal prev = StateHub.get(plr)",
        "\tlocal keepBank   = (prev and prev.bank) or 0",
        "\tlocal keepYear   = (prev and prev.year) or 0",
        "\tlocal keepClears = (prev and prev.totalClears) or 0",
        "",
        "\tlocal fresh = {",
        "\t\tbank = keepBank, year = keepYear, totalClears = keepClears,",
        "\t\tmult = 1.0, mon = 0, phase = \"play\",",
        "\t\trun = { configSnapshot = nil }, -- 次で自動初期化（run.id は newRound 内で自動採番）",
        "\t}",
        "\t-- ★ 12-month: ラン開始時の month/goal を初期化",
        "\tsetMonthAndGoal(fresh, Balance and Balance.STAGE_START_MONTH or 1)",
        "",
        "\t-- ★ 分離リロールの初期化（SSOT）",
        "\tinitRerollCounters(fresh)",
        "",
        "\tStateHub.set(plr, fresh)",
        "",
        "\t-- ★ 新ラン開始（newRound 内でスナップも作成される）",
        "\tRound.newRound(plr, 1)",
        "end",
        "",
        "-- ★ GameInit から現在ランIDを引くためのAPI",
        "function Round.getRunId(plr: Player)",
        "\tlocal s = StateHub.get(plr)",
        "\tif not s then return nil end",
        "\tif not (s.run and s.run.id) then return nil end",
        "\treturn s.run.id",
        "end",
        "",
        "return Round"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [
          "Config",
          "Balance",
          "SaveService"
        ],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/shared/RunDeckUtil.lua",
      "ext": "lua",
      "binary": false,
      "size": 12902,
      "mtime": "2025-09-25T01:19:11.804234+00:00",
      "head": [
        "-- ReplicatedStorage/SharedModules/RunDeckUtil.lua",
        "-- 役割：ラン状態のユーティリティ。",
        "-- 変更:",
        "--  - getUnlockedTalismanSlots(state): state.run から安全に読取り、無ければ 0 を返す",
        "--  - ensureTalisman(state, opts): 護符テーブルの存在と最低限の形を保証（不足キーのみ補完）",
        "--  - ★ KITOプール基盤（正本=run.configSnapshot へ完全寄せ）",
        "--      * getDeckWithUids(state)       : 一時デッキ（uid=code 付与）を生成",
        "--      * ensureUids(state)            : no-op（互換のため残す）",
        "--      * getDeckVersion/bumpDeckVersion: run.deckVersion に集約",
        "--      * buildUidIndexMap(state)      : getDeckWithUids 基準で作成",
        "--      * applyDeckPatchByUid(state,p) : decode→patch→encode（正本更新）",
        "--      * addEffectTag/hasEffectTag    : 再適用ガード用タグ",
        "--      * monthHasBright(month)        : 当月に光札が“定義として”存在するか判定",
        "--      * entryWithKindLike(src, kind) : 同月で指定kindの定義エントリを返す",
        "",
        "-- v0.9.0+ ラン構成ユーティリティ（唯一の正本：run.configSnapshot）",
        "-- ここだけを読み書きする。季節ごとの山札は毎季これをクローンして生成。",
        "",
        "local RS          = game:GetService(\"ReplicatedStorage\")",
        "local HttpService = game:GetService(\"HttpService\")",
        "",
        "local SharedMods = RS:WaitForChild(\"SharedModules\")",
        "local CardEngine = require(SharedMods:WaitForChild(\"CardEngine\"))",
        "",
        "local M = {}",
        "",
        "--========================",
        "-- Deck snapshot",
        "--========================",
        "",
        "-- run.configSnapshot を返す（必要なら初期48で初期化）",
        "local function _ensureSnapshot(state)",
        "\tstate.run = state.run or {}",
        "\tif typeof(state.run.configSnapshot) == \"table\" then",
        "\t\treturn state.run.configSnapshot",
        "\tend",
        "\t-- 初期化",
        "\tlocal base = CardEngine.buildDeck()",
        "\tlocal snap = CardEngine.buildSnapshot(base)",
        "\tstate.run.configSnapshot = snap",
        "\treturn snap",
        "end",
        "",
        "-- ラン構成（テーブル48枚）を返す",
        "-- initIfMissing=true のとき、存在しなければ初期化して返す",
        "function M.loadConfig(state, initIfMissing)",
        "\tif typeof(state) ~= \"table\" then return nil end",
        "\tstate.run = state.run or {}",
        "\tlocal snap = state.run.configSnapshot",
        "\tif typeof(snap) ~= \"table\" then",
        "\t\tif initIfMissing then snap = _ensureSnapshot(state) else return nil end",
        "\tend",
        "\treturn CardEngine.buildDeckFromSnapshot(snap)",
        "end",
        "",
        "-- 渡された deck（テーブル）で run.configSnapshot を更新",
        "-- deck が省略された場合、既存の run.configSnapshot を再保存（整形）するだけ",
        "function M.saveConfig(state, deck)",
        "\tif typeof(state) ~= \"table\" then return end",
        "\tstate.run = state.run or {}",
        "\tif typeof(deck) ~= \"table\" or #deck == 0 then",
        "\t\t-- 既存スナップショットがない場合は初期化",
        "\t\tif typeof(state.run.configSnapshot) ~= \"table\" then",
        "\t\t\tstate.run.configSnapshot = CardEngine.buildSnapshot(CardEngine.buildDeck())",
        "\t\tend",
        "\t\treturn",
        "\tend",
        "\tstate.run.configSnapshot = CardEngine.buildSnapshot(deck)",
        "end",
        "",
        "-- 現在のスナップショットを返す（必ず存在）",
        "function M.snapshot(state)",
        "\treturn _ensureSnapshot(state)",
        "end",
        "",
        "--========================",
        "-- Matsuri Levels (Festival Levels)",
        "--========================",
        "function M.ensureMeta(state)",
        "\tif typeof(state) ~= \"table\" then return {} end",
        "\tstate.run = state.run or {}",
        "\tstate.run.meta = state.run.meta or {}",
        "\tstate.run.meta.matsuriLevels = state.run.meta.matsuriLevels or {}",
        "\treturn state.run.meta",
        "end",
        "",
        "-- { [festivalId]=level } を返す（無ければ空）",
        "function M.getMatsuriLevels(state)",
        "\tlocal meta = M.ensureMeta(state)",
        "\treturn meta.matsuriLevels",
        "end",
        "",
        "-- 祭事レベルを増減（通常は delta=+1）。戻り値：新レベル",
        "function M.incMatsuri(state, festivalId, delta)",
        "\tlocal meta = M.ensureMeta(state)",
        "\tlocal t = meta.matsuriLevels",
        "\tlocal cur = tonumber(t[festivalId] or 0) or 0",
        "\tlocal nextLv = math.max(0, cur + (tonumber(delta) or 0))",
        "\tt[festivalId] = nextLv",
        "\treturn nextLv",
        "end",
        "",
        "-- ニューゲーム時に祭事をリセット",
        "function M.resetMatsuri(state)",
        "\tlocal meta = M.ensureMeta(state)",
        "\tmeta.matsuriLevels = {}",
        "end",
        "",
        "--========================",
        "-- Talisman（護符）ユーティリティ",
        "--========================",
        "",
        "local function _clone6(src:{any}?): {any}",
        "\tlocal s = src or {}",
        "\treturn { s[1], s[2], s[3], s[4], s[5], s[6] }",
        "end",
        "",
        "-- 内部: 護符のアンロック数をできるだけ多くの互換キーから読み取る",
        "local function _readUnlockedFromRun(run)",
        "\t-- 最優先: run.unlocked / run.talismanUnlocked / run.talisman.unlocked",
        "\tif typeof(run.unlocked) == \"number\" then",
        "\t\treturn math.max(0, math.floor(run.unlocked))",
        "\tend",
        "\tif typeof(run.talismanUnlocked) == \"number\" then",
        "\t\treturn math.max(0, math.floor(run.talismanUnlocked))",
        "\tend",
        "\tif typeof(run.talisman) == \"table\" and typeof(run.talisman.unlocked) == \"number\" then",
        "\t\treturn math.max(0, math.floor(run.talisman.unlocked))",
        "\tend",
        "",
        "\t-- 配列風 talisman の最大インデックスを推定",
        "\tif typeof(run.talisman) == \"table\" then",
        "\t\tlocal maxIdx = 0",
        "\t\tfor k, _ in pairs(run.talisman) do",
        "\t\t\tif typeof(k) == \"number\" and k > maxIdx then",
        "\t\t\t\tmaxIdx = k",
        "\t\t\tend",
        "\t\tend",
        "\t\tif maxIdx > 0 then",
        "\t\t\treturn maxIdx",
        "\t\tend",
        "\tend",
        "",
        "\treturn 0",
        "end",
        "",
        "-- 公開API: アンロック済み護符スロット数を返す（見つからなければ 0）",
        "function M.getUnlockedTalismanSlots(state)",
        "\tif typeof(state) ~= \"table\" then return 0 end",
        "\tstate.run = state.run or {}",
        "\treturn _readUnlockedFromRun(state.run)",
        "end",
        "",
        "-- 公開API: 護符テーブル（run.talisman）の存在と最低限の形を保証",
        "-- opts: { minUnlocked: number?, maxSlots: number? }",
        "-- 既存値は尊重し、不足キーだけ補う（unlocked は整合性のため 0..maxSlots に丸め）",
        "function M.ensureTalisman(state, opts)",
        "\tif typeof(state) ~= \"table\" then return nil end",
        "\tstate.run = state.run or {}",
        "",
        "\tlocal minUnlocked = tonumber(opts and opts.minUnlocked) or 2",
        "\tlocal maxSlots    = tonumber(opts and opts.maxSlots) or 6",
        "\tminUnlocked = math.max(0, math.floor(minUnlocked))",
        "\tmaxSlots    = math.max(1, math.floor(maxSlots))",
        "",
        "\tlocal b = state.run.talisman",
        "\tif typeof(b) ~= \"table\" then",
        "\t\t-- 新規生成（既存が無い場合のみ）",
        "\t\tb = {",
        "\t\t\tmaxSlots = maxSlots,",
        "\t\t\tunlocked = math.min(maxSlots, minUnlocked),",
        "\t\t\tslots    = { nil, nil, nil, nil, nil, nil },",
        "\t\t}",
        "\t\tstate.run.talisman = b",
        "\telse",
        "\t\t-- 既存を尊重しつつ不足補完",
        "\t\tif typeof(b.maxSlots) ~= \"number\" then",
        "\t\t\tb.maxSlots = maxSlots",
        "\t\telse",
        "\t\t\tb.maxSlots = math.max(1, math.floor(b.maxSlots))",
        "\t\tend",
        "",
        "\t\tif typeof(b.unlocked) ~= \"number\" then",
        "\t\t\tb.unlocked = math.min(b.maxSlots, minUnlocked)",
        "\t\telse",
        "\t\t\tb.unlocked = math.floor(b.unlocked)",
        "\t\t\t-- 整合性のためだけに丸め（増減の意思決定はしない）",
        "\t\t\tif b.unlocked < 0 then b.unlocked = 0 end",
        "\t\t\tif b.unlocked > b.maxSlots then b.unlocked = b.maxSlots end",
        "\t\tend",
        "",
        "\t\tif typeof(b.slots) ~= \"table\" then",
        "\t\t\tb.slots = { nil, nil, nil, nil, nil, nil }",
        "\t\telse",
        "\t\t\tb.slots = _clone6(b.slots)",
        "\t\tend",
        "\tend",
        "",
        "\treturn b",
        "end",
        "",
        "--==================================================",
        "-- ★ KITOプール基盤：Deck Versioning / UID / 差分適用",
        "--==================================================",
        "",
        "-- 内部: snapshot から「uid=code」を付与した一時デッキを生成",
        "local function _deckWithUidsFromSnapshot(snap)",
        "\tlocal deck = CardEngine.buildDeckFromSnapshot(snap)",
        "\tfor _, e in ipairs(deck) do",
        "\t\te.code = e.code or CardEngine.toCode(tonumber(e.month), tonumber(e.idx))",
        "\t\te.uid  = e.uid  or e.code",
        "\tend",
        "\treturn deck",
        "end",
        "",
        "-- 公開API: 現在ランの一時デッキ（uid付き）を取得",
        "function M.getDeckWithUids(state)",
        "\tlocal snap = M.snapshot(state)",
        "\treturn _deckWithUidsFromSnapshot(snap)",
        "end",
        "",
        "-- 再適用ガード用タグ",
        "local function ensureEffectTags(state)",
        "\tstate.run = state.run or {}",
        "\tstate.run.meta = state.run.meta or {}",
        "\tstate.run.meta.effectTags = state.run.meta.effectTags or {}",
        "\treturn state.run.meta.effectTags",
        "end",
        "",
        "function M.addEffectTag(state, tag)",
        "\tif type(tag) ~= \"string\" or tag == \"\" then return end",
        "\tlocal t = ensureEffectTags(state)",
        "\tt[tag] = true",
        "end",
        "",
        "function M.hasEffectTag(state, tag)",
        "\tlocal t = ensureEffectTags(state)",
        "\treturn t[tag] == true",
        "end",
        "",
        "-- 当月に光札が“定義として”存在するか",
        "function M.monthHasBright(month)",
        "\tlocal m = tonumber(month or 0) or 0",
        "\tif m <= 0 then return false end",
        "\tlocal defs = CardEngine.cardsByMonth[m]",
        "\tif typeof(defs) ~= \"table\" then return false end",
        "\tfor _, def in ipairs(defs) do",
        "\t\tif def and tostring(def.kind) == \"hikari\" then",
        "\t\t\treturn true",
        "\t\tend",
        "\tend",
        "\treturn false",
        "end",
        "",
        "-- Deck内の各エントリに uid を保証（旧APIは no-op に）",
        "function M.ensureUids(_state:any)",
        "\t-- no-op（互換維持。必要なら getDeckWithUids を使用）",
        "\treturn",
        "end",
        "",
        "-- デッキ版数を取得（run.deckVersion のみを正とする）",
        "function M.getDeckVersion(state:any): number",
        "\tif typeof(state) ~= \"table\" then return 1 end",
        "\tstate.run = state.run or {}",
        "\tlocal v = tonumber(state.run.deckVersion or 0) or 0",
        "\tif v <= 0 then v = 1 end",
        "\tstate.run.deckVersion = v",
        "\treturn v",
        "end",
        "",
        "-- デッキ版数を+1して返す",
        "function M.bumpDeckVersion(state:any): number",
        "\tlocal v = M.getDeckVersion(state) + 1",
        "\tstate.run.deckVersion = v",
        "\treturn v",
        "end",
        "",
        "-- uid→index のマップを構築（スナップショット復元基準）",
        "function M.buildUidIndexMap(state:any): {[string]:number}",
        "\tlocal map = {}",
        "\tlocal deck = M.getDeckWithUids(state)",
        "\tfor i, e in ipairs(deck) do",
        "\t\tif typeof(e) == \"table\" and e.uid then",
        "\t\t\tmap[e.uid] = i",
        "\t\tend",
        "\tend",
        "\treturn map",
        "end",
        "",
        "-- uid 指定差分を適用（対象：run.configSnapshot）",
        "-- patch = {",
        "--   replace = { [uid]=entryTable, ... }?,  -- entry.uid は無視され uid を再付与",
        "--   remove  = { [uid]=true, ... }?         -- 対象 uid のカードをデッキから削除",
        "-- }",
        "function M.applyDeckPatchByUid(state:any, patch:{replace:any?, remove:any?})",
        "\tif typeof(state) ~= \"table\" then return false end",
        "",
        "\t-- 1) decode（uid=code 付与）",
        "\tlocal snap = M.snapshot(state)",
        "\tlocal deck = _deckWithUidsFromSnapshot(snap)"
      ],
      "truncated": true,
      "analysis": {
        "waitForChild": [
          "SharedModules",
          "CardEngine"
        ],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/shared/score/constants.lua",
      "ext": "lua",
      "binary": false,
      "size": 3043,
      "mtime": "2025-09-20T11:43:16.981668+00:00",
      "head": [
        "-- ReplicatedStorage/SharedModules/score/constants.lua",
        "-- v0.9.3-S3 定数 & 対応表（P3_matsuri_kito 用）",
        "-- 注意：P3 は「倍率を掛ける」のではなく、係数を加点として使います。",
        "--       MATSURI_COEFF = { mon_per_lv, pts_per_lv } として解釈されます。",
        "",
        "local K = {}",
        "",
        "-- 役ベース文（mon）",
        "K.ROLE_MON = {",
        "\tfive_bright       = 10,",
        "\tfour_bright       = 8,",
        "\train_four_bright  = 7,",
        "\tthree_bright      = 5,",
        "\tinoshikacho       = 5,",
        "\tred_ribbon        = 5,",
        "\tblue_ribbon       = 5,",
        "\tseeds             = 1,",
        "\tribbons           = 1,",
        "\tchaffs            = 1,",
        "\thanami            = 5,",
        "\ttsukimi           = 5,",
        "}",
        "",
        "-- 1枚あたりの点（pts）",
        "K.CARD_PTS = {",
        "\tbright = 5,",
        "\tseed   = 2,",
        "\tribbon = 2,",
        "\tchaff  = 1,",
        "}",
        "",
        "-- 祭事（festivalId → { mon_per_lv, pts_per_lv }）",
        "-- ※ 現状の P3 実装では「倍率×」ではなく「加点+」として適用されます。",
        "K.MATSURI_COEFF = {",
        "\tsai_kasu      = { 1.0,  1 },  -- カス祭：mon+1/Lv, pts+1/Lv",
        "\tsai_tanzaku   = { 1.0,  3 },  -- 短冊祭：mon+1/Lv, pts+3/Lv",
        "\tsai_tane      = { 1.0,  3 },  -- タネ祭：mon+1/Lv, pts+3/Lv",
        "\tsai_akatan    = { 1.5,  5 },  -- 赤短祭：mon+1.5/Lv, pts+5/Lv",
        "\tsai_aotan     = { 1.5,  5 },  -- 青短祭：mon+1.5/Lv, pts+5/Lv",
        "\tsai_inoshika  = { 2.0, 15 },  -- 猪鹿蝶祭：mon+2/Lv,   pts+15/Lv",
        "\tsai_hanami    = { 2.0, 15 },  -- 花見祭：  mon+2/Lv,   pts+15/Lv",
        "\tsai_tsukimi   = { 2.0, 15 },  -- 月見祭：  mon+2/Lv,   pts+15/Lv",
        "\tsai_sanko     = { 2.0, 20 },  -- 三光祭/雨四光：mon+2/Lv, pts+20/Lv",
        "\tsai_shiko     = { 2.0, 20 },  -- 四光祭： mon+2/Lv, pts+20/Lv",
        "\tsai_goko      = { 3.0, 30 },  -- 五光祭： mon+3/Lv, pts+30/Lv",
        "}",
        "",
        "-- 役キー（roles のキー）→ yaku_*（内部ヤクID）",
        "K.ROLE_TO_YAKU = {",
        "\tchaffs           = \"yaku_kasu\",",
        "\tribbons          = \"yaku_tanzaku\",",
        "\tseeds            = \"yaku_tane\",",
        "\tred_ribbon       = \"yaku_akatan\",",
        "\tblue_ribbon      = \"yaku_aotan\",",
        "\tinoshikacho      = \"yaku_inoshikacho\",",
        "\thanami           = \"yaku_hanami\",",
        "\ttsukimi          = \"yaku_tsukimi\",",
        "\tthree_bright     = \"yaku_sanko\",  -- 三光 → 三光祭",
        "\train_four_bright = \"yaku_sanko\",  -- 雨四光も三光系に合流",
        "\tfour_bright      = \"yaku_shiko\",  -- 四光 → 四光祭",
        "\tfive_bright      = \"yaku_goko\",   -- 五光 → 五光祭",
        "}",
        "",
        "-- yaku_* → 祭事ID 配列（1役に複数祭事を紐付けたい場合は配列で）",
        "K.YAKU_TO_SAI = {",
        "\tyaku_kasu        = { \"sai_kasu\" },",
        "\tyaku_tanzaku     = { \"sai_tanzaku\" },",
        "\tyaku_tane        = { \"sai_tane\" },",
        "\tyaku_akatan      = { \"sai_akatan\", \"sai_tanzaku\" }, -- 赤短は短冊役にも寄与",
        "\tyaku_aotan       = { \"sai_aotan\",  \"sai_tanzaku\" }, -- 青短も短冊に寄与",
        "\tyaku_inoshikacho = { \"sai_inoshika\" },",
        "\tyaku_hanami      = { \"sai_hanami\" },",
        "\tyaku_tsukimi     = { \"sai_tsukimi\" },",
        "\tyaku_sanko       = { \"sai_sanko\" },  -- 三光/雨四光",
        "\tyaku_shiko       = { \"sai_shiko\" },  -- 四光",
        "\tyaku_goko        = { \"sai_goko\" },   -- 五光",
        "}",
        "",
        "return K"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/shared/score/ctx.lua",
      "ext": "lua",
      "binary": false,
      "size": 1529,
      "mtime": "2025-09-18T12:00:43.478003+00:00",
      "head": [
        "-- ReplicatedStorage/SharedModules/score/ctx.lua",
        "-- v0.9.3-S9 計算用コンテキスト",
        "-- ・ledger で各フェーズの寄与を記録",
        "-- ・equipped（S-8）：護符/お守りの装備ID群を通す",
        "-- ・mult（S-9）：将来の倍率合成先（add=加算倍率総和, mul=乗算倍率積）",
        "",
        "local Ctx = {}",
        "Ctx.__index = Ctx",
        "",
        "function Ctx.new()",
        "\treturn setmetatable({",
        "\t\tmon = 0,",
        "\t\tpts = 0,",
        "\t\troles = {},",
        "\t\tledger = {}, -- { {phase=\"P2_roles\", dmon=+X, dpts=+Y, note=\"...\"} , ... }",
        "\t\tequipped = { talisman = {}, omamori = {} }, -- S-8",
        "\t\tmult = { add = 0, mul = 1 }, -- S-9 finalize用（現状add=0,mul=1で挙動不変）",
        "\t}, Ctx)",
        "end",
        "",
        "function Ctx:add(phase: string, dmon: number?, dpts: number?, note: string?)",
        "\ttable.insert(self.ledger, {",
        "\t\tphase = phase,",
        "\t\tdmon  = dmon or 0,",
        "\t\tdpts  = dpts or 0,",
        "\t\tnote  = note,",
        "\t})",
        "end",
        "",
        "-- S-8: 装備IDセット（配列 or set を許容）",
        "local function toIdList(v)",
        "\tlocal out = {}",
        "\tif typeof(v) ~= \"table\" then return out end",
        "\tlocal n = 0",
        "\tfor k, val in pairs(v) do",
        "\t\tif typeof(k)==\"number\" then",
        "\t\t\t-- 配列",
        "\t\t\tif val ~= nil then",
        "\t\t\t\tn += 1; out[n] = tostring(val)",
        "\t\t\tend",
        "\t\telse",
        "\t\t\t-- set/dict",
        "\t\t\tif val then",
        "\t\t\t\tn += 1; out[n] = tostring(k)",
        "\t\t\tend",
        "\t\tend",
        "\tend",
        "\treturn out",
        "end",
        "",
        "function Ctx:setEquipped(e)",
        "\tif typeof(e) ~= \"table\" then return end",
        "\tself.equipped = {",
        "\t\ttalisman = toIdList(e.talisman or e.talismans or e.tlmn or {}),",
        "\t\tomamori  = toIdList(e.omamori  or e.oma      or e.omo  or {}),",
        "\t}",
        "end",
        "",
        "return Ctx"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/shared/score/hooks/init.lua",
      "ext": "lua",
      "binary": false,
      "size": 1477,
      "mtime": "2025-09-19T01:35:41.892501+00:00",
      "head": [
        "-- SharedModules/score/hooks/init.lua",
        "-- v1.0 S5: talisman フックを「役加点の直前」に登録する",
        "",
        "local M = {}",
        "",
        "-- 既存フックの読み込み",
        "local roleHooks     = require(script:WaitForChild(\"role\"))         -- 例：役の加点",
        "local multiplier    = require(script:WaitForChild(\"multiplier\"))   -- 例：倍率処理",
        "local bonus         = require(script:WaitForChild(\"bonus\"))        -- 例：各種ボーナス",
        "local talisman      = require(script:WaitForChild(\"talisman\"))     -- ★今回追加",
        "",
        "-- 実行順を固定化（例）:",
        "--  1) multiplier（倍率の前処理があるなら）",
        "--  2) talisman   ← ★役に依存する護符もあるため「役加点の直前」に置く",
        "--  3) roleHooks",
        "--  4) bonus（最終係数系が別ならここ）",
        "M.ORDERED = {",
        "\t-- 例：倍率前処理",
        "\tfunction (tally, state, ctx) return multiplier.apply(tally, state, ctx) end,",
        "",
        "\t-- ★S5: 護符",
        "\tfunction (tally, state, ctx) return talisman.apply(tally, state, ctx) end,",
        "",
        "\t-- 役",
        "\tfunction (tally, state, ctx) return roleHooks.apply(tally, state, ctx) end,",
        "",
        "\t-- ボーナス（必要に応じて）",
        "\tfunction (tally, state, ctx) return bonus.apply(tally, state, ctx) end,",
        "}",
        "",
        "-- パイプライン実行ユーティリティ（既存があるならそれを使用）",
        "function M.runAll(tally, state, ctx)",
        "\tlocal out = tally",
        "\tfor _, fn in ipairs(M.ORDERED) do",
        "\t\tout = fn(out, state, ctx)",
        "\tend",
        "\treturn out",
        "end",
        "",
        "return M"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [
          "role",
          "multiplier",
          "bonus",
          "talisman"
        ],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/shared/score/hooks/omamori.lua",
      "ext": "lua",
      "binary": false,
      "size": 184,
      "mtime": "2025-09-20T05:33:51.775902+00:00",
      "head": [
        "-- hooks/omamori.lua — S-3 no-op。将来ここにお守りの効果を追加。",
        "local M = {}",
        "",
        "function M.apply(roles, mon, pts, state)",
        "\treturn roles, mon, pts",
        "end",
        "",
        "return M"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/shared/score/hooks/talisman.lua",
      "ext": "lua",
      "binary": false,
      "size": 4856,
      "mtime": "2025-09-20T05:33:54.680464+00:00",
      "head": [
        "-- ReplicatedStorage/SharedModules/score/hooks/talisman.lua",
        "-- v0.9.4-S5: 護符の効果をスコア（mon）へ反映",
        "-- 公開I/F:",
        "--   readEquipped(state) -> { {id=\"...\"}, ... }",
        "--   apply(roles, mon, pts, state, ctx) -> roles, mon, pts",
        "-- 互換: 既存の roles/mon/pts の型を変更しない（mon のみ加算）",
        "",
        "",
        "local RS = game:GetService(\"ReplicatedStorage\")",
        "local SharedModules = RS:WaitForChild(\"SharedModules\")",
        "local TalismanState = require(SharedModules:WaitForChild(\"TalismanState\"))",
        "",
        "-- TalismanDefs は配置が「Shared/TalismanDefs.lua」想定。",
        "-- プロジェクト差に備えてフォールバックも用意。",
        "local function requireTalismanDefs()",
        "\t-- 1) ReplicatedStorage/Shared/TalismanDefs",
        "\tlocal Shared = RS:FindFirstChild(\"Shared\")",
        "\tif Shared and Shared:FindFirstChild(\"TalismanDefs\") then",
        "\t\treturn require(Shared.TalismanDefs)",
        "\tend",
        "\t-- 2) ReplicatedStorage/SharedModules/TalismanDefs",
        "\tif SharedModules:FindFirstChild(\"TalismanDefs\") then",
        "\t\treturn require(SharedModules.TalismanDefs)",
        "\tend",
        "\terror(\"TalismanDefs not found under RS/Shared or RS/SharedModules\")",
        "end",
        "",
        "local TalismanDefs = requireTalismanDefs()",
        "",
        "local M = {}",
        "",
        "--==================================================",
        "-- utils",
        "--==================================================",
        "",
        "local function cloneArray(t)",
        "\tif table.clone then return table.clone(t or {}) end",
        "\tlocal r = {}",
        "\tfor i,v in ipairs(t or {}) do r[i] = v end",
        "\treturn r",
        "end",
        "",
        "-- roles は {\"gokou\",\"shikou\",...} or {gokou=true,...} の両対応",
        "local function hasRole(roles, key)",
        "\tif type(roles) ~= \"table\" or not key then return false end",
        "\tif roles[key] == true then return true end",
        "\tfor _, v in ipairs(roles) do",
        "\t\tif v == key then return true end",
        "\tend",
        "\treturn false",
        "end",
        "",
        "local function anyRole(roles, keys)",
        "\tfor _, k in ipairs(keys or {}) do",
        "\t\tif hasRole(roles, k) then return true end",
        "\tend",
        "\treturn false",
        "end",
        "",
        "--==================================================",
        "-- API",
        "--==================================================",
        "",
        "-- state.run.talisman.slots を唯一の情報源として読み取り、",
        "-- ctx.equipped.talisman 向けの正規形（配列 { {id=...}, ... }）に変換",
        "function M.readEquipped(state)",
        "\tlocal ids = TalismanState.getEquippedIds(state) -- { \"id\", ... } or {}",
        "\tlocal out = {}",
        "\tif typeof(ids) ~= \"table\" then return out end",
        "\tfor i = 1, #ids do",
        "\t\tlocal id = ids[i]",
        "\t\tif id ~= nil then",
        "\t\t\ttable.insert(out, { id = tostring(id) })",
        "\t\tend",
        "\tend",
        "\treturn out",
        "end",
        "",
        "-- S5: 護符効果を mon に反映（roles/pts は不変）",
        "-- ・純関数的に動作（副作用なし）。ログ出力だけ任意で対応（ctx.log があれば）。",
        "-- ・Defs 仕様:",
        "--    - enabled == false なら無効",
        "--    - stack == false なら同一IDは1回まで",
        "--    - limit が数値ならその回数まで適用",
        "--    - effect:",
        "--        type=\"add_mon\", amount=+N",
        "--        type=\"add_role_mon\", role=\"gokou\", amount=+N",
        "--        type=\"add_any_role_mon\", roles={...}, amount=+N",
        "function M.apply(roles, mon, pts, state, ctx)",
        "\t-- 安全な既定値",
        "\tlocal r   = roles or {}",
        "\tlocal m   = tonumber(mon) or 0",
        "\tlocal p   = pts   -- そのまま返す",
        "\tlocal ids = TalismanState.getEquippedIds(state) or {}",
        "",
        "\tif type(ids) ~= \"table\" or #ids == 0 then",
        "\t\treturn r, m, p",
        "\tend",
        "",
        "\t-- スタック制御",
        "\tlocal appliedCount = {}",
        "\tlocal totalAdd = 0",
        "",
        "\tfor _, id in ipairs(ids) do",
        "\t\tif type(id) == \"string\" and #id > 0 then",
        "\t\t\t-- Defs.get(id) 優先（存在しない場合は registry 直参照を許容）",
        "\t\t\tlocal def = nil",
        "\t\t\tif type(TalismanDefs.get) == \"function\" then",
        "\t\t\t\tdef = TalismanDefs.get(id)",
        "\t\t\telseif TalismanDefs.registry then",
        "\t\t\t\tdef = TalismanDefs.registry[id]",
        "\t\t\t\tif def and def.enabled == false then def = nil end",
        "\t\t\tend",
        "",
        "\t\t\tif def then",
        "\t\t\t\t-- スタック／上限",
        "\t\t\t\tlocal cnt = appliedCount[def.id] or 0",
        "\t\t\t\tif def.stack == false and cnt >= 1 then",
        "\t\t\t\t\t-- 何もしない",
        "\t\t\t\telseif type(def.limit) == \"number\" and cnt >= def.limit then",
        "\t\t\t\t\t-- 何もしない",
        "\t\t\t\telse",
        "\t\t\t\t\tlocal eff = def.effect or {}",
        "\t\t\t\t\tlocal delta = 0",
        "",
        "\t\t\t\t\tif eff.type == \"add_mon\" then",
        "\t\t\t\t\t\tdelta = tonumber(eff.amount) or 0",
        "",
        "\t\t\t\t\telseif eff.type == \"add_role_mon\" then",
        "\t\t\t\t\t\tif eff.role and hasRole(r, eff.role) then",
        "\t\t\t\t\t\t\tdelta = tonumber(eff.amount) or 0",
        "\t\t\t\t\t\tend",
        "",
        "\t\t\t\t\telseif eff.type == \"add_any_role_mon\" then",
        "\t\t\t\t\t\tif anyRole(r, eff.roles) then",
        "\t\t\t\t\t\t\tdelta = tonumber(eff.amount) or 0",
        "\t\t\t\t\t\tend",
        "\t\t\t\t\tend",
        "",
        "\t\t\t\t\tif delta ~= 0 then",
        "\t\t\t\t\t\tappliedCount[def.id] = cnt + 1",
        "\t\t\t\t\t\ttotalAdd = totalAdd + delta",
        "\t\t\t\t\t\tif ctx and type(ctx.log) == \"function\" then",
        "\t\t\t\t\t\t\tpcall(ctx.log, \"[P5_score] talisman=%s delta=%d\", def.id, delta)",
        "\t\t\t\t\t\tend",
        "\t\t\t\t\tend",
        "\t\t\t\tend",
        "\t\t\tend",
        "\t\tend",
        "\tend",
        "",
        "\tif totalAdd ~= 0 then",
        "\t\tm = m + totalAdd",
        "\tend",
        "",
        "\treturn r, m, p",
        "end",
        "",
        "return M"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [
          "SharedModules",
          "TalismanState"
        ],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/shared/score/index.lua",
      "ext": "lua",
      "binary": false,
      "size": 3683,
      "mtime": "2025-10-02T02:56:23.041751+00:00",
      "head": [
        "-- ReplicatedStorage/SharedModules/score/index.lua",
        "-- v0.9.3-S10 P4_talisman no-op配管＋equipped受け渡し（挙動不変）",
        "",
        "local RunService = game:GetService(\"RunService\")",
        "local RS = game:GetService(\"ReplicatedStorage\")",
        "",
        "local K   = require(script.Parent.constants)",
        "local Ctx = require(script.Parent.ctx)",
        "",
        "local P1 = require(script.Parent.phases.P1_count)",
        "local P2 = require(script.Parent.phases.P2_roles)",
        "local P3 = require(script.Parent.phases.P3_matsuri_kito)",
        "local P4 = require(script.Parent.phases.P4_talisman)    -- ← no-op 実体",
        "local P5 = require(script.Parent.phases.P5_omamori)     -- ← no-op（既存/無ければ本回答のstubを使用）",
        "local PF = require(script.Parent.phases.finalize)",
        "",
        "-- hooks",
        "local TalHook = require(script.Parent.hooks.talisman)   -- ← ★ 新設フック",
        "",
        "-- スコープ付きロガー（タグ=Score）",
        "local LOG = nil",
        "do",
        "\tlocal ok, Logger = pcall(function()",
        "\t\tlocal SharedModules = RS:WaitForChild(\"SharedModules\")",
        "\t\treturn require(SharedModules:WaitForChild(\"Logger\"))",
        "\tend)",
        "\tif ok and Logger and typeof(Logger.scope) == \"function\" then",
        "\t\tLOG = Logger.scope(\"Score\")",
        "\tend",
        "end",
        "",
        "local function devLog(msg)",
        "\tif not RunService:IsStudio() then return end",
        "\tif LOG and typeof(LOG.info) == \"function\" then",
        "\t\tLOG.info(msg)",
        "\telse",
        "\t\twarn(\"[Score][DEV] \" .. tostring(msg))",
        "\tend",
        "end",
        "",
        "local M = {}",
        "",
        "function M.evaluate(takenCards, state)",
        "\tlocal ctx = Ctx.new()",
        "",
        "\t-- S2: state → ctx.equipped へ“正式形”で転記（talismanのみ・他は将来拡張）",
        "\t--     旧来の state.equipped/loadout 等があっても、talismanは run.talisman から読むのを優先",
        "\tdo",
        "\t\tlocal equipped = {}",
        "\t\tequipped.talisman = TalHook.readEquipped(state) -- => { {id=...}, ... } or {}",
        "\t\t-- 互換: 既存の他スロットがあれば温存",
        "\t\tlocal legacy = (typeof(state)==\"table\") and (state.equipped or state.loadout or state.equip) or nil",
        "\t\tif typeof(legacy)==\"table\" then",
        "\t\t\tfor k,v in pairs(legacy) do",
        "\t\t\t\tif k ~= \"talisman\" then",
        "\t\t\t\t\tequipped[k] = v",
        "\t\t\t\tend",
        "\t\t\tend",
        "\t\tend",
        "\t\tif typeof(ctx.setEquipped) == \"function\" then",
        "\t\t\tctx:setEquipped(equipped)",
        "\t\telse",
        "\t\t\tctx.equipped = equipped",
        "\t\tend",
        "\tend",
        "",
        "\t-- P1: カウント",
        "\tlocal c = P1.counts(takenCards)",
        "",
        "\t-- P2: 役 → mon/pts 基礎",
        "\tlocal roles, mon, pts = P2.evaluateRoles(takenCards, c, ctx)",
        "",
        "\t-- P3: 祭事/寅の上乗せ",
        "\tmon, pts = P3.applyMatsuriAndKito(roles, mon, pts, state, ctx)",
        "",
        "\t-- P4: 護符（no-op: 装備数ログとledger追記のみ。数値は不変）",
        "\troles, mon, pts = P4.applyTalisman(roles, mon, pts, state, ctx)",
        "",
        "\t-- P5: お守り（no-op/将来ON）",
        "\troles, mon, pts = P5.applyOmamori(roles, mon, pts, state, ctx)",
        "",
        "\t-- Dev: ledger出力（Studioのみ）",
        "\tif RunService:IsStudio() then",
        "\t\tfor _,line in ipairs(ctx.ledger) do",
        "\t\t\tdevLog(string.format(\"%s: dmon=%.3f dpts=%.3f %s\",",
        "\t\t\t\ttostring(line.phase),",
        "\t\t\t\ttonumber(line.dmon or 0),",
        "\t\t\t\ttonumber(line.dpts or 0),",
        "\t\t\t\ttostring(line.note or \"\")",
        "\t\t\t))",
        "\t\tend",
        "\tend",
        "",
        "\t-- finalize（唯一式）— 現状 factor=1 で挙動不変",
        "\tlocal total, _mon, _pts, factor = PF.finalize(mon, pts, ctx)",
        "\treturn total, roles, { mon = mon, pts = pts }",
        "end",
        "",
        "-- 互換API",
        "function M.getFestivalStat(fid, level)",
        "\tlocal lv = tonumber(level or 0) or 0",
        "\tlocal coeff = K.MATSURI_COEFF[fid]",
        "\tif not coeff then return 0, 0 end",
        "\treturn lv * (coeff[1] or 0), lv * (coeff[2] or 0)",
        "end",
        "",
        "function M.getFestivalsForYaku(yakuId)",
        "\treturn K.YAKU_TO_SAI[yakuId] or {}",
        "end",
        "",
        "function M.getKitoPts(effectId, level)",
        "\tif effectId == \"tora\" or effectId == \"kito.tora\" then",
        "\t\treturn tonumber(level or 0) or 0",
        "\tend",
        "\treturn 0",
        "end",
        "",
        "return M"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [
          "SharedModules",
          "Logger"
        ],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/shared/score/phases/finalize.lua",
      "ext": "lua",
      "binary": false,
      "size": 1157,
      "mtime": "2025-09-18T12:01:00.588126+00:00",
      "head": [
        "-- ReplicatedStorage/SharedModules/score/phases/finalize.lua",
        "-- v0.9.3-S9 Finalize規約（唯一の式）:",
        "-- score = (Σmon) * (Σpts) * ((1 + ΣaddMult) * ΠmulMult)",
        "-- 現状は add=0, mul=1 なので挙動は不変。将来の倍率は ctx.mult に集約する。",
        "",
        "local F = {}",
        "",
        "function F.finalize(mon: number, pts: number, ctx: any)",
        "\tlocal add = 0",
        "\tlocal mul = 1",
        "\tif ctx and typeof(ctx) == \"table\" and typeof(ctx.mult)==\"table\" then",
        "\t\tadd = tonumber(ctx.mult.add or 0) or 0",
        "\t\tmul = tonumber(ctx.mult.mul or 1) or 1",
        "\tend",
        "\tlocal factor = (1 + add) * mul",
        "\t-- 既存I/Fでは detail は {mon, pts} を返す契約なので、mon/pts は変更しない",
        "\tlocal total = (mon * pts) * factor",
        "\t-- ledgerには合成係数だけ記録（将来のデバッグのため）",
        "\tif ctx and typeof(ctx.add)==\"function\" then",
        "\t\tif factor ~= 1 then",
        "\t\t\tctx:add(\"P9_finalize\", 0, 0, string.format(\"factor=%.6f (add=%.6f, mul=%.6f)\", factor, add, mul))",
        "\t\telse",
        "\t\t\t-- factor=1 の場合は静穏でOK（必要なら上の行を有効化）",
        "\t\t\t-- ctx:add(\"P9_finalize\", 0, 0, \"factor=1.0\")",
        "\t\tend",
        "\tend",
        "\treturn total, mon, pts, factor",
        "end",
        "",
        "return F"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/shared/score/phases/P0_normalize.lua",
      "ext": "lua",
      "binary": false,
      "size": 334,
      "mtime": "2025-09-18T09:37:55.622255+00:00",
      "head": [
        "-- ReplicatedStorage/SharedModules/score/phases/P0_normalize.lua",
        "-- v0.9.3-S2 P0: 正規化ヘルパ集",
        "",
        "local Kind = require(script.Parent.Parent.util.kind)",
        "local Tags = require(script.Parent.Parent.util.tags)",
        "",
        "local P0 = {}",
        "",
        "P0.normKind = Kind.normKind",
        "P0.toTagSet = Tags.toTagSet",
        "P0.hasTags  = Tags.hasTags",
        "",
        "return P0"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/shared/score/phases/P1_count.lua",
      "ext": "lua",
      "binary": false,
      "size": 750,
      "mtime": "2025-09-18T09:38:09.263858+00:00",
      "head": [
        "-- ReplicatedStorage/SharedModules/score/phases/P1_count.lua",
        "-- v0.9.3-S2 P1: 枚数/月/タグ集計（現行countsと同値）",
        "",
        "local P0 = require(script.Parent.P0_normalize)",
        "",
        "local P1 = {}",
        "",
        "function P1.counts(cards: {any}?): {bright:number, seed:number, ribbon:number, chaff:number, months:any, tags:any}",
        "\tlocal c = {bright=0, seed=0, ribbon=0, chaff=0, months={}, tags={}}",
        "\tfor _,card in ipairs(cards or {}) do",
        "\t\tlocal k = P0.normKind(card and card.kind)",
        "\t\tif k then c[k] += 1 end",
        "\t\tif card and card.month then",
        "\t\t\tc.months[card.month] = (c.months[card.month] or 0) + 1",
        "\t\tend",
        "\t\tlocal tset = P0.toTagSet(card and card.tags)",
        "\t\tfor t,_ in pairs(tset) do",
        "\t\t\tc.tags[t] = (c.tags[t] or 0) + 1",
        "\t\tend",
        "\tend",
        "\treturn c",
        "end",
        "",
        "return P1"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/shared/score/phases/P2_roles.lua",
      "ext": "lua",
      "binary": false,
      "size": 2772,
      "mtime": "2025-09-18T12:22:45.981404+00:00",
      "head": [
        "-- ReplicatedStorage/SharedModules/score/phases/P2_roles.lua",
        "-- v0.9.3-S4 P2: 役判定 → mon加算 / pts基礎（ledger対応）",
        "",
        "local K  = require(script.Parent.Parent.constants)",
        "local P0 = require(script.Parent.P0_normalize)",
        "",
        "local P2 = {}",
        "",
        "-- 入力: takenCards, counts, ctx?",
        "-- 出力: roles(table), monBase(number), ptsBase(number)",
        "function P2.evaluateRoles(takenCards: {any}?, c: any, ctx: any)",
        "\tlocal roles, mon = {}, 0",
        "",
        "\t-- 光系",
        "\tif c.bright == 5 then",
        "\t\troles.five_bright = K.ROLE_MON.five_bright",
        "\telseif c.bright == 4 then",
        "\t\t-- 任意の光4枚は常に「四光」扱い（雨札の有無は無視）",
        "\t\troles.four_bright = K.ROLE_MON.four_bright",
        "\telseif c.bright == 3 and (c.tags[\"rain\"] or 0) == 0 then",
        "\t\troles.three_bright = K.ROLE_MON.three_bright",
        "\tend",
        "",
        "\t-- 名前直接（猪鹿蝶・花見・月見）",
        "\tlocal hasName = {}",
        "\tfor _,card in ipairs(takenCards or {}) do",
        "\t\tif card and card.name then hasName[card.name] = true end",
        "\tend",
        "\tif hasName[\"猪\"] and hasName[\"鹿\"] and hasName[\"蝶\"] then roles.inoshikacho = K.ROLE_MON.inoshikacho end",
        "\tif hasName[\"桜に幕\"] and hasName[\"盃\"] then roles.hanami = K.ROLE_MON.hanami end",
        "\tif hasName[\"芒に月\"] and hasName[\"盃\"] then roles.tsukimi = K.ROLE_MON.tsukimi end",
        "",
        "\t-- 赤短（1,2,3 の 赤+字あり）",
        "\tdo",
        "\t\tlocal ok = 0",
        "\t\tfor _,m in ipairs({1,2,3}) do",
        "\t\t\tfor _,card in ipairs(takenCards or {}) do",
        "\t\t\t\tif card.month==m and P0.normKind(card.kind)==\"ribbon\" and P0.hasTags(card, {\"aka\",\"jiari\"}) then",
        "\t\t\t\t\tok += 1; break",
        "\t\t\t\tend",
        "\t\t\tend",
        "\t\tend",
        "\t\tif ok==3 then roles.red_ribbon = K.ROLE_MON.red_ribbon end",
        "\tend",
        "",
        "\t-- 青短（6,9,10 の 青+字あり）",
        "\tdo",
        "\t\tlocal ok = 0",
        "\t\tfor _,m in ipairs({6,9,10}) do",
        "\t\t\tfor _,card in ipairs(takenCards or {}) do",
        "\t\t\t\tif card.month==m and P0.normKind(card.kind)==\"ribbon\" and P0.hasTags(card, {\"ao\",\"jiari\"}) then",
        "\t\t\t\t\tok += 1; break",
        "\t\t\t\tend",
        "\t\t\tend",
        "\t\tend",
        "\t\tif ok==3 then roles.blue_ribbon = K.ROLE_MON.blue_ribbon end",
        "\tend",
        "",
        "\t-- たね/たん/かす（閾値：5/5/10）→ 超過1枚ごとに +1文",
        "\tif c.seed   >= 5  then roles.seeds   = K.ROLE_MON.seeds   + (c.seed   - 5)  end",
        "\tif c.ribbon >= 5  then roles.ribbons = K.ROLE_MON.ribbons + (c.ribbon - 5)  end",
        "\tif c.chaff  >= 10 then roles.chaffs  = K.ROLE_MON.chaffs  + (c.chaff  - 10) end",
        "",
        "\t-- 文合算",
        "\tfor _,v in pairs(roles) do mon += v end",
        "",
        "\t-- 札→点合算（基礎pts）",
        "\tlocal pts = 0",
        "\tfor kind,count in pairs({bright=c.bright, seed=c.seed, ribbon=c.ribbon, chaff=c.chaff}) do",
        "\t\tpts += (K.CARD_PTS[kind] or 0) * (count or 0)",
        "\tend",
        "",
        "\t-- ledger: P2の寄与（基礎 mon/pts）",
        "\tif ctx and typeof(ctx.add) == \"function\" then",
        "\t\tctx:add(\"P2_roles\", mon, pts, \"base roles & card pts\")",
        "\tend",
        "",
        "\treturn roles, mon, pts",
        "end",
        "",
        "return P2"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/shared/score/phases/P3_matsuri_kito.lua",
      "ext": "lua",
      "binary": false,
      "size": 1836,
      "mtime": "2025-10-02T02:56:30.247193+00:00",
      "head": [
        "-- ReplicatedStorage/SharedModules/score/phases/P3_matsuri_kito.lua",
        "-- v0.9.3-S4 P3: 祭事/寅の上乗せ（ledger対応）",
        "",
        "local RS = game:GetService(\"ReplicatedStorage\")",
        "local RunDeckUtil = require(RS:WaitForChild(\"SharedModules\"):WaitForChild(\"RunDeckUtil\"))",
        "local K = require(script.Parent.Parent.constants)",
        "",
        "local P3 = {}",
        "",
        "-- 入力: roles(table), monBase(number), ptsBase(number), state(table?), ctx?",
        "-- 出力: mon(number), pts(number)",
        "function P3.applyMatsuriAndKito(roles: any, mon: number, pts: number, state: any, ctx: any)",
        "\tlocal mon0, pts0 = mon, pts",
        "",
        "\tif typeof(state) == \"table\" then",
        "\t\t-- 祭事",
        "\t\tlocal levels = RunDeckUtil.getMatsuriLevels(state) or {}",
        "\t\tif next(levels) ~= nil then",
        "\t\t\tlocal yakuList = {}",
        "\t\t\tfor roleKey, v in pairs(roles) do",
        "\t\t\t\tif v and v > 0 then",
        "\t\t\t\t\tlocal yaku = K.ROLE_TO_YAKU[roleKey]",
        "\t\t\t\t\tif yaku then table.insert(yakuList, yaku) end",
        "\t\t\t\tend",
        "\t\t\tend",
        "\t\t\tfor _, yakuId in ipairs(yakuList) do",
        "\t\t\t\tlocal festivals = K.YAKU_TO_SAI[yakuId]",
        "\t\t\t\tif festivals then",
        "\t\t\t\t\tfor _, fid in ipairs(festivals) do",
        "\t\t\t\t\t\tlocal lv = tonumber(levels[fid] or 0) or 0",
        "\t\t\t\t\t\tif lv > 0 then",
        "\t\t\t\t\t\t\tlocal coeff = K.MATSURI_COEFF[fid]",
        "\t\t\t\t\t\t\tif coeff then",
        "\t\t\t\t\t\t\t\tmon += lv * (coeff[1] or 0)",
        "\t\t\t\t\t\t\t\tpts += lv * (coeff[2] or 0)",
        "\t\t\t\t\t\t\tend",
        "\t\t\t\t\t\tend",
        "\t\t\t\t\tend",
        "\t\t\t\tend",
        "\t\t\tend",
        "\t\tend",
        "",
        "\t\t-- 干支：寅（Ptsに +1/Lv）",
        "\t\tdo",
        "\t\t\tlocal kitoLevels = (RunDeckUtil.getKitoLevels and RunDeckUtil.getKitoLevels(state)) or state.kito or {}",
        "\t\t\tlocal toraLv = tonumber(kitoLevels.tora or kitoLevels[\"kito.tora\"] or 0) or 0",
        "\t\t\tif toraLv > 0 then pts += toraLv end",
        "\t\tend",
        "\tend",
        "",
        "\t-- ledger: P3の寄与（差分）",
        "\tif ctx and typeof(ctx.add) == \"function\" then",
        "\t\tctx:add(\"P3_matsuri_kito\", mon - mon0, pts - pts0, \"matsuri/kito add-ons\")",
        "\tend",
        "",
        "\treturn mon, pts",
        "end",
        "",
        "return P3"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [
          "SharedModules",
          "RunDeckUtil"
        ],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/shared/score/phases/P4_talisman.lua",
      "ext": "lua",
      "binary": false,
      "size": 3196,
      "mtime": "2025-09-20T05:46:38.575249+00:00",
      "head": [
        "-- ReplicatedStorage/SharedModules/score/phases/P4_talisman.lua",
        "-- v0.9.3-S11: hooks の場所を固定参照（SharedModules/score/hooks/talisman）に変更",
        "-- ・Hooks.apply があれば呼ぶ（pcallで安全呼び出し）",
        "-- ・無くても no-op で ledger に記録",
        "-- ・ctx.equipped.talisman は { \"id\", ... } / { {id=\"...\"}, ... } の両方を許容",
        "",
        "local RS = game:GetService(\"ReplicatedStorage\")",
        "",
        "-- optional: Logger（StudioのみINFO）",
        "local LOG = nil",
        "do",
        "\tlocal ok, Logger = pcall(function()",
        "\t\tlocal SharedModules = RS:WaitForChild(\"SharedModules\")",
        "\t\treturn require(SharedModules:WaitForChild(\"Logger\"))",
        "\tend)",
        "\tif ok and Logger and typeof(Logger.scope) == \"function\" then",
        "\t\tLOG = Logger.scope(\"Score\")",
        "\tend",
        "end",
        "",
        "-- Hooks（固定パスで参照：SharedModules/score/hooks/talisman）",
        "-- ※本プロジェクトでは必ず存在する前提",
        "local Hooks_Talisman = (function()",
        "\tlocal SharedModules = RS:WaitForChild(\"SharedModules\")",
        "\tlocal Score         = SharedModules:WaitForChild(\"score\")",
        "\tlocal HooksFolder   = Score:WaitForChild(\"hooks\")",
        "\tlocal Mod           = require(HooksFolder:WaitForChild(\"talisman\"))",
        "\treturn Mod",
        "end)()",
        "",
        "--========================",
        "-- utils",
        "--========================",
        "",
        "local function toIdList(eq)",
        "\t-- eq: { \"dev_plus1\", ... } or { {id=\"dev_plus1\"}, ... }",
        "\tlocal out = {}",
        "\tif typeof(eq) ~= \"table\" then return out end",
        "\tfor i = 1, #eq do",
        "\t\tlocal v = eq[i]",
        "\t\tif typeof(v) == \"string\" then",
        "\t\t\ttable.insert(out, v)",
        "\t\telseif typeof(v) == \"table\" and v.id ~= nil then",
        "\t\t\ttable.insert(out, tostring(v.id))",
        "\t\tend",
        "\tend",
        "\treturn out",
        "end",
        "",
        "local function addLedger(ctx, dmon, dpts, note)",
        "\tctx = ctx or {}",
        "\tif typeof(ctx.add) == \"function\" then",
        "\t\tctx:add(\"P4_talisman\", dmon or 0, dpts or 0, note or \"\")",
        "\telse",
        "\t\tctx.ledger = ctx.ledger or {}",
        "\t\ttable.insert(ctx.ledger, {",
        "\t\t\tphase = \"P4_talisman\",",
        "\t\t\tdmon  = dmon or 0,",
        "\t\t\tdpts  = dpts or 0,",
        "\t\t\tnote  = note or \"\",",
        "\t\t})",
        "\tend",
        "end",
        "",
        "--========================",
        "-- API",
        "--========================",
        "",
        "local P4 = {}",
        "",
        "function P4.applyTalisman(roles, mon, pts, state, ctx)",
        "\tlocal mon0, pts0 = mon, pts",
        "",
        "\t-- 1) Hooks.apply を呼ぶ（no-opでもOK）",
        "\tif Hooks_Talisman and typeof(Hooks_Talisman.apply) == \"function\" then",
        "\t\tlocal ok, r_roles, r_mon, r_pts = pcall(Hooks_Talisman.apply, roles, mon, pts, state, ctx)",
        "\t\tif ok and r_roles ~= nil and r_mon ~= nil and r_pts ~= nil then",
        "\t\t\troles, mon, pts = r_roles, r_mon, r_pts",
        "\t\tend",
        "\tend",
        "",
        "\t-- 2) 装備IDのログ（no-op）。両形式に対応してCSV化",
        "\tlocal eq = (ctx and ctx.equipped and ctx.equipped.talisman) or {}",
        "\tlocal ids = toIdList(eq)",
        "\tlocal note = \"no-op\"",
        "\tif #ids > 0 then",
        "\t\tnote = (\"no-op IDs=%s\"):format(table.concat(ids, \",\"))",
        "\tend",
        "",
        "\t-- 3) ledger 追記（差分0か、Hooksが数値変更していればその差分）",
        "\tlocal dmon, dpts = (mon - mon0), (pts - pts0)",
        "\taddLedger(ctx, dmon, dpts, note)",
        "",
        "\t-- 4) Studioログ",
        "\tlocal RunService = game:GetService(\"RunService\")",
        "\tif LOG and RunService:IsStudio() then",
        "\t\tLOG.info((\"[P4_talisman] equipped=%d %s dmon=%.3f dpts=%.3f\")",
        "\t\t\t:format(#ids, note, dmon, dpts))",
        "\tend",
        "",
        "\treturn roles, mon, pts",
        "end",
        "",
        "return P4"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [
          "SharedModules",
          "Logger",
          "SharedModules",
          "score",
          "hooks",
          "talisman"
        ],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/shared/score/phases/P5_omamori.lua",
      "ext": "lua",
      "binary": false,
      "size": 2474,
      "mtime": "2025-09-20T05:48:20.052542+00:00",
      "head": [
        "-- ReplicatedStorage/SharedModules/score/phases/P5_omamori.lua",
        "-- v0.9.3-S11: hooks の場所を固定参照（SharedModules/score/hooks/omamori）",
        "-- いまは no-op（ledger対応＋装備IDログ）。Hooks.apply があれば安全に呼ぶ。",
        "",
        "local RS = game:GetService(\"ReplicatedStorage\")",
        "",
        "-- Hooks（固定パスで参照：SharedModules/score/hooks/omamori）",
        "-- ※本プロジェクトでは必ず存在する前提",
        "local Hooks_Omamori = (function()",
        "\tlocal SharedModules = RS:WaitForChild(\"SharedModules\")",
        "\tlocal Score         = SharedModules:WaitForChild(\"score\")",
        "\tlocal HooksFolder   = Score:WaitForChild(\"hooks\")",
        "\tlocal Mod           = require(HooksFolder:WaitForChild(\"omamori\"))",
        "\treturn Mod",
        "end)()",
        "",
        "--========================",
        "-- utils",
        "--========================",
        "",
        "local function toIdList(eq)",
        "\t-- eq: { \"id\", ... } or { {id=\"...\"}, ... }",
        "\tlocal out = {}",
        "\tif typeof(eq) ~= \"table\" then return out end",
        "\tfor i = 1, #eq do",
        "\t\tlocal v = eq[i]",
        "\t\tif typeof(v) == \"string\" then",
        "\t\t\ttable.insert(out, v)",
        "\t\telseif typeof(v) == \"table\" and v.id ~= nil then",
        "\t\t\ttable.insert(out, tostring(v.id))",
        "\t\tend",
        "\tend",
        "\treturn out",
        "end",
        "",
        "local function addLedger(ctx, dmon, dpts, note)",
        "\tctx = ctx or {}",
        "\tif typeof(ctx.add) == \"function\" then",
        "\t\tctx:add(\"P5_omamori\", dmon or 0, dpts or 0, note or \"\")",
        "\telse",
        "\t\tctx.ledger = ctx.ledger or {}",
        "\t\ttable.insert(ctx.ledger, {",
        "\t\t\tphase = \"P5_omamori\",",
        "\t\t\tdmon  = dmon or 0,",
        "\t\t\tdpts  = dpts or 0,",
        "\t\t\tnote  = note or \"\",",
        "\t\t})",
        "\tend",
        "end",
        "",
        "--========================",
        "-- API",
        "--========================",
        "",
        "local P5 = {}",
        "",
        "function P5.applyOmamori(roles, mon, pts, state, ctx)",
        "\tlocal mon0, pts0 = mon, pts",
        "",
        "\t-- 1) Hooks.apply を呼ぶ（no-opでもOK）",
        "\tif Hooks_Omamori and typeof(Hooks_Omamori.apply) == \"function\" then",
        "\t\tlocal ok, r_roles, r_mon, r_pts = pcall(Hooks_Omamori.apply, roles, mon, pts, state, ctx)",
        "\t\tif ok and r_roles ~= nil and r_mon ~= nil and r_pts ~= nil then",
        "\t\t\troles, mon, pts = r_roles, r_mon, r_pts",
        "\t\tend",
        "\tend",
        "",
        "\t-- 2) 装備IDログ（no-op）。両形式に対応してCSV化",
        "\tlocal eq = (ctx and ctx.equipped and ctx.equipped.omamori) or {}",
        "\tlocal ids = toIdList(eq)",
        "\tlocal note = \"omamori effects\"",
        "\tif #ids > 0 then",
        "\t\tnote = note .. \" IDs=\" .. table.concat(ids, \",\")",
        "\tend",
        "",
        "\t-- 3) ledger 追記（差分0か、Hooksが数値変更していればその差分）",
        "\taddLedger(ctx, (mon - mon0), (pts - pts0), note)",
        "",
        "\treturn roles, mon, pts",
        "end",
        "",
        "return P5"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [
          "SharedModules",
          "score",
          "hooks",
          "omamori"
        ],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/shared/score/util/kind.lua",
      "ext": "lua",
      "binary": false,
      "size": 1746,
      "mtime": "2025-09-25T12:51:48.862469+00:00",
      "head": [
        "-- ReplicatedStorage/SharedModules/score/util/kind.lua",
        "-- v0.9.3-S3  kind 正規化（英名へ統一 / 後方互換の別名を広めに吸収）",
        "",
        "local VALID_KIND = { bright=true, seed=true, ribbon=true, chaff=true }",
        "",
        "-- 後方互換の別名（英/和/ローマ字・大小文字を吸収）",
        "local KIND_ALIAS = {",
        "\t-- 英別名",
        "\tlight = \"bright\",",
        "",
        "\t-- ローマ字（和名）",
        "\thikari = \"bright\",",
        "\ttane   = \"seed\",",
        "\ttan    = \"ribbon\",",
        "\tkasu   = \"chaff\",",
        "",
        "\t-- 日本語（代表的に使われがちな表記）",
        "\t[\"光\"]     = \"bright\",",
        "\t[\"種\"]     = \"seed\",",
        "\t[\"短冊\"]   = \"ribbon\",",
        "\t[\"カス\"]   = \"chaff\",",
        "\t[\"かす\"]   = \"chaff\",",
        "\t[\"タネ\"]   = \"seed\",",
        "\t[\"たね\"]   = \"seed\",",
        "\t[\"タン\"]   = \"ribbon\",",
        "\t[\"たん\"]   = \"ribbon\",",
        "}",
        "",
        "local M = {}",
        "",
        "-- 前後空白除去＋小文字化",
        "local function _canon(s:any): string?",
        "\tif type(s) ~= \"string\" then return nil end",
        "\t-- 前後空白",
        "\ts = string.gsub(s, \"^%s+\", \"\")",
        "\ts = string.gsub(s, \"%s+$\", \"\")",
        "\tif #s == 0 then return nil end",
        "\t-- 小文字",
        "\ts = string.lower(s)",
        "\treturn s",
        "end",
        "",
        "-- k を英名に正規化して返す（不正は nil）",
        "function M.normKind(k:any): string?",
        "\tlocal key = _canon(k)",
        "\tif not key then return nil end",
        "\t-- そのまま有効？",
        "\tif VALID_KIND[key] then return key end",
        "\t-- 別名を英名へ",
        "\tlocal aliased = KIND_ALIAS[key]",
        "\tif aliased and VALID_KIND[aliased] then",
        "\t\treturn aliased",
        "\tend",
        "\treturn nil",
        "end",
        "",
        "-- 補助：英名かどうか",
        "function M.isValid(k:any): boolean",
        "\treturn M.normKind(k) ~= nil",
        "end",
        "",
        "-- 補助：入力が不正なら fallback を返す（fallback も正規化）",
        "function M.ensureKind(k:any, fallback:any): string?",
        "\treturn M.normKind(k) or M.normKind(fallback)",
        "end",
        "",
        "return M"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/shared/score/util/tags.lua",
      "ext": "lua",
      "binary": false,
      "size": 636,
      "mtime": "2025-09-18T09:37:25.290793+00:00",
      "head": [
        "-- ReplicatedStorage/SharedModules/score/util/tags.lua",
        "-- v0.9.3-S2 タグ集合（現行同等）",
        "",
        "local M = {}",
        "",
        "function M.toTagSet(tags: any): {[string]: boolean}",
        "\tlocal set: {[string]: boolean} = {}",
        "\tif typeof(tags) == \"table\" then",
        "\t\tfor k,v in pairs(tags) do",
        "\t\t\tif typeof(k) == \"number\" then",
        "\t\t\t\tset[v] = true",
        "\t\t\telse",
        "\t\t\t\tset[k] = (v == nil) and true or v",
        "\t\t\tend",
        "\t\tend",
        "\tend",
        "\treturn set",
        "end",
        "",
        "function M.hasTags(card: any, names: {string}?): boolean",
        "\tlocal set = M.toTagSet(card and card.tags)",
        "\tfor _,name in ipairs(names or {}) do",
        "\t\tif not set[name] then return false end",
        "\tend",
        "\treturn true",
        "end",
        "",
        "return M"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/shared/ScoreService.lua",
      "ext": "lua",
      "binary": false,
      "size": 7629,
      "mtime": "2025-10-04T16:10:58.519685+00:00",
      "head": [
        "-- ReplicatedStorage/SharedModules/ScoreService.lua",
        "-- Confirm（勝負）時の獲得計算と、到達時の遷移制御（12か月一直線版）",
        "-- 1–8月 達成→屋台 / 9–11月 達成→2択（こいこい/ホーム） / 12月 達成→ワンボタンfinal",
        "-- 未達はゲームオーバー（ランリセット）",
        "",
        "local RS         = game:GetService(\"ReplicatedStorage\")",
        "local SSS        = game:GetService(\"ServerScriptService\")",
        "local RunService = game:GetService(\"RunService\")",
        "",
        "--===== safe require helpers ============================================",
        "local function reqShared(name)",
        "\tlocal shared = RS:WaitForChild(\"SharedModules\")",
        "\treturn require(shared:WaitForChild(name))",
        "end",
        "",
        "-- 依存",
        "local Scoring  = reqShared(\"Scoring\")",
        "local StateHub = reqShared(\"StateHub\")",
        "",
        "-- Balance（次月ゴールの表示用）",
        "local Balance do",
        "\tlocal ok, mod = pcall(function()",
        "\t\treturn require(RS:WaitForChild(\"Config\"):WaitForChild(\"Balance\"))",
        "\tend)",
        "\tif ok and type(mod)==\"table\" then",
        "\t\tBalance = mod",
        "\telse",
        "\t\tBalance = { getGoalForMonth = function(_) return 1 end }",
        "\tend",
        "end",
        "",
        "-- SaveService はサーバ専用。クライアントで誤 require されても落ちないように stub 化",
        "local SaveService",
        "do",
        "\tif RunService:IsServer() then",
        "\t\tlocal ok, mod = pcall(function()",
        "\t\t\treturn require(SSS:WaitForChild(\"SaveService\"))",
        "\t\tend)",
        "\t\tif ok and type(mod) == \"table\" then",
        "\t\t\tSaveService = mod",
        "\t\telse",
        "\t\t\twarn(\"[ScoreService] SaveService not found; using stub\")",
        "\t\t\tSaveService = {",
        "\t\t\t\taddBank=function()end, setYear=function()end,",
        "\t\t\t\tbumpYear=function()end, bumpClears=function()end,",
        "\t\t\t}",
        "\t\tend",
        "\telse",
        "\t\t-- クライアント側スタブ",
        "\t\tSaveService = {",
        "\t\t\taddBank=function()end, setYear=function()end,",
        "\t\t\tbumpYear=function()end, bumpClears=function()end,",
        "\t\t}",
        "\tend",
        "end",
        "--=======================================================================",
        "",
        "local Score = {}",
        "",
        "-- GameInit から注入される：openShop(plr, s, opts)",
        "--   opts = { reward:number?, notice:string?, target:number? }",
        "local openShopFn = nil",
        "",
        "-- RoundService 参照（deps から注入。無ければフォールバック require）",
        "local RoundRef = nil",
        "",
        "-- 文（mon）リワード計算（従来ロジック維持）",
        "local function calcMonReward(sum, target, season)",
        "\t-- 目標値は現在使用しないが将来の調整余地として残す",
        "\tlocal _ = target",
        "\tlocal factor = 0.20 + ((season or 1) - 1) * 0.05",
        "\treturn math.max(1, math.floor((sum or 0) * factor))",
        "end",
        "",
        "function Score.bind(Remotes, deps)",
        "\topenShopFn = nil",
        "\tRoundRef   = nil",
        "",
        "\tif deps then",
        "\t\tif typeof(deps.openShop) == \"function\" then",
        "\t\t\topenShopFn = deps.openShop",
        "\t\telseif deps.ShopService and typeof(deps.ShopService.open) == \"function\" then",
        "\t\t\topenShopFn = deps.ShopService.open",
        "\t\tend",
        "\t\tif deps.Round then",
        "\t\t\tRoundRef = deps.Round",
        "\t\tend",
        "\tend",
        "",
        "\tif not (Remotes and Remotes.Confirm and typeof(Remotes.Confirm.OnServerEvent) == \"RBXScriptSignal\") then",
        "\t\twarn(\"[ScoreService] Remotes.Confirm missing\")",
        "\t\treturn",
        "\tend",
        "",
        "\tRemotes.Confirm.OnServerEvent:Connect(function(plr)",
        "\t\tlocal s = StateHub.get(plr)",
        "\t\tif not s or s.phase ~= \"play\" then return end",
        "",
        "\t\t-- 採点",
        "\t\tlocal takenCards = s.taken or {}",
        "\t\tlocal total, roles, detail = Scoring.evaluate(takenCards, s)",
        "\t\tlocal roleMon = (detail and detail.mon) or 0",
        "",
        "\t\t-- 役チェイン（役が1つでもあれば伸ばす）",
        "\t\tlocal roleCount = 0",
        "\t\tfor _ in pairs(roles or {}) do",
        "\t\t\troleCount += 1",
        "\t\tend",
        "\t\tif roleCount > 0 then",
        "\t\t\ts.chainCount = (s.chainCount or 0) + 1",
        "\t\tend",
        "\t\tlocal multNow = StateHub.chainMult(s.chainCount or 0)",
        "\t\ts.mult        = multNow",
        "",
        "\t\t-- 早抜けボーナス（山札残り10枚ごとに roleMon 加算）",
        "\t\tlocal deckLeft   = #(s.deck or {})",
        "\t\tlocal quickBonus = math.floor(math.max(deckLeft, 0) / 10) * roleMon",
        "",
        "\t\t-- 今ターンの獲得・累計",
        "\t\tlocal gained   = (total or 0) * multNow + quickBonus",
        "\t\ts.seasonSum    = (s.seasonSum or 0) + gained",
        "",
        "\t\t-- ▼ 月ゴール（StateHub.goalForMonth を正準とする）",
        "\t\tlocal tgt       = (StateHub and StateHub.goalForMonth) and StateHub.goalForMonth(s) or 1",
        "\t\tlocal curMonth  = tonumber(s.run and s.run.month or 1) or 1",
        "\t\tlocal season    = tonumber(s.season or 1) or 1",
        "",
        "\t\t--========================",
        "\t\t-- 未達：ゲームオーバー（ランリセット）",
        "\t\t--========================",
        "\t\tif (s.seasonSum or 0) < tgt then",
        "\t\t\tif Remotes.StageResult then",
        "\t\t\t\t-- 互換：false, sum, target, mult, bank を送る旧経路も維持",
        "\t\t\t\tRemotes.StageResult:FireClient(plr, false, s.seasonSum or 0, tgt, s.mult or 1, s.bank or 0)",
        "\t\t\tend",
        "\t\t\tlocal Round = RoundRef or reqShared(\"RoundService\")",
        "\t\t\tRound.resetRun(plr)",
        "\t\t\treturn",
        "\t\tend",
        "",
        "\t\t--========================",
        "\t\t-- 達成時分岐（1–12月）",
        "\t\t--========================",
        "",
        "\t\t-- 1) 1〜8月：屋台へ（文を付与）",
        "\t\tif curMonth < 9 then",
        "\t\t\ts.phase = \"shop\"",
        "\t\t\tlocal rewardMon = calcMonReward(s.seasonSum or 0, tgt, season)",
        "\t\t\ts.mon = (s.mon or 0) + rewardMon",
        "\t\t\tif openShopFn then",
        "\t\t\t\topenShopFn(plr, s, { reward = rewardMon, notice = \"達成！\", target = tgt })",
        "\t\t\telse",
        "\t\t\t\tStateHub.pushState(plr)",
        "\t\t\tend",
        "\t\t\treturn",
        "\t\tend",
        "",
        "\t\t-- 2) 9〜11月：2両付与 → 2択モーダル（こいこい/ホーム）",
        "\t\tif curMonth >= 9 and curMonth <= 11 then",
        "\t\t\ts.phase = \"result\"",
        "",
        "\t\t\t-- 2両ボーナス",
        "\t\t\tlocal rewardBank = 2",
        "\t\t\ts.bank = (s.bank or 0) + rewardBank",
        "\t\t\tif typeof(SaveService.addBank) == \"function\" then",
        "\t\t\t\tSaveService.addBank(plr, rewardBank)",
        "\t\t\tend",
        "",
        "\t\t\ts.lastScore = { total = total or 0, roles = roles, detail = detail }",
        "\t\t\tStateHub.pushState(plr)",
        "",
        "\t\t\tif Remotes.StageResult then",
        "\t\t\t\tlocal nextM   = math.min(12, curMonth + 1)",
        "\t\t\t\tlocal nextG   = (Balance and Balance.getGoalForMonth) and Balance.getGoalForMonth(nextM) or nil",
        "\t\t\t\tlocal payload = {",
        "\t\t\t\t\tkind        = \"two\",             -- UI：2択モーダル",
        "\t\t\t\t\trewardBank  = rewardBank,        -- +2両",
        "\t\t\t\t\tnextMonth   = nextM,             -- こいこい先",
        "\t\t\t\t\tnextGoal    = nextG,             -- その目標",
        "\t\t\t\t\tmessage     = (\"クリアおめでとう！ +%d両\"):format(rewardBank),",
        "\t\t\t\t\tlang        = s.lang,",
        "\t\t\t\t}",
        "\t\t\t\t-- 互換のため true,payload で送る（旧ハンドラも安全）",
        "\t\t\t\tRemotes.StageResult:FireClient(plr, true, payload)",
        "\t\t\tend",
        "\t\t\treturn",
        "\t\tend",
        "",
        "\t\t-- 3) 12月：2両付与 → ワンボタン（final）で終了へ",
        "\t\t--    ※ クリア回数(totalClears)は“ラン完走”のこのタイミングだけで +1 する",
        "\t\tif curMonth >= 12 then",
        "\t\t\ts.phase = \"result\"",
        "",
        "\t\t\t-- 2両ボーナス",
        "\t\t\tlocal rewardBank = 2",
        "\t\t\ts.bank = (s.bank or 0) + rewardBank",
        "\t\t\tif typeof(SaveService.addBank) == \"function\" then",
        "\t\t\t\tSaveService.addBank(plr, rewardBank)",
        "\t\t\tend",
        "",
        "\t\t\t-- クリア回数（完走）+1",
        "\t\t\ts.totalClears = (s.totalClears or 0) + 1",
        "\t\t\tif typeof(SaveService.bumpClears) == \"function\" then",
        "\t\t\t\tSaveService.bumpClears(plr, 1)",
        "\t\t\tend",
        "",
        "\t\t\ts.lastScore = { total = total or 0, roles = roles, detail = detail }",
        "\t\t\tStateHub.pushState(plr)",
        "",
        "\t\t\tif Remotes.StageResult then",
        "\t\t\t\tlocal payload = {",
        "\t\t\t\t\tkind        = \"final\",               -- UI：ワンボタン",
        "\t\t\t\t\ttitleText   = \"12月 クリアおめでとう！\",",
        "\t\t\t\t\tdescText    = \"このランは終了です。メニューに戻ります。\",",
        "\t\t\t\t\tbuttonText  = \"ホームへ\",",
        "\t\t\t\t\trewardBank  = rewardBank,",
        "\t\t\t\t\tlang        = s.lang,",
        "\t\t\t\t}",
        "\t\t\t\tRemotes.StageResult:FireClient(plr, true, payload)",
        "\t\t\tend",
        "\t\t\t-- 以降の遷移は C→S: Remotes.DecideNext(\"home\"|\"koikoi\")（NavServer が唯一線）",
        "\t\t\treturn",
        "\t\tend",
        "\tend)",
        "end",
        "",
        "return Score"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [
          "SharedModules",
          "Config",
          "Balance",
          "SaveService"
        ],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/shared/Scoring.lua",
      "ext": "lua",
      "binary": false,
      "size": 1239,
      "mtime": "2025-09-18T11:54:24.406096+00:00",
      "head": [
        "-- SharedModules/Scoring.lua",
        "-- v0.9.3-S7 互換ラッパ：実体は SharedModules/score/index.lua に集約",
        "-- I/F（据え置き）:",
        "--   S.evaluate(takenCards: {Card}, state?: table) -> (totalScore: number, roles: table, detail: { mon: number, pts: number })",
        "--   S.getFestivalStat(fid, lv) -> (dmon, dpts)",
        "--   S.getFestivalsForYaku(yakuId) -> { festivalId, ... }",
        "--   S.getKitoPts(effectId, lv) -> number",
        "",
        "local RS = game:GetService(\"ReplicatedStorage\")",
        "",
        "-- 新実装へ委譲（一本化）",
        "local function loadScoreModule()",
        "\tlocal ok, mod = pcall(function()",
        "\t\tlocal SharedModules = RS:WaitForChild(\"SharedModules\")",
        "\t\tlocal ScoreFolder  = SharedModules:WaitForChild(\"score\")",
        "\t\treturn require(ScoreFolder:WaitForChild(\"index\"))",
        "\tend)",
        "\tif ok and mod then",
        "\t\treturn mod",
        "\tend",
        "\t-- フォールバック：万一ロード失敗してもゲームを落とさない最小スタブ",
        "\twarn(\"[Scoring] failed to load score/index.lua; using safe fallback (always 0)\")",
        "\tlocal S = {}",
        "\tfunction S.evaluate() return 0, {}, { mon = 0, pts = 0 } end",
        "\tfunction S.getFestivalStat() return 0, 0 end",
        "\tfunction S.getFestivalsForYaku() return {} end",
        "\tfunction S.getKitoPts() return 0 end",
        "\treturn S",
        "end",
        "",
        "return loadScoreModule()"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [
          "SharedModules",
          "score",
          "index"
        ],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/shared/ShopDefs.lua",
      "ext": "lua",
      "binary": false,
      "size": 13009,
      "mtime": "2025-10-04T19:05:43.256598+00:00",
      "head": [
        "-- ReplicatedStorage/SharedModules/ShopDefs.lua",
        "-- v0.9.0 → v0.9.0-DOT S3: 「KITOはドット唯一の真実」へ統一（kito_* を廃止）",
        "-- 使い方：",
        "--  ・各カテゴリの出現率は WEIGHTS.<category> を調整（相対重み。合計1でなくてOK）",
        "--  ・商品は POOLS.<category> に配列で追加",
        "--  ・本フェーズ（S3）は UIのみ：購入→「置き先スロ選択状態」へ。RPCはS4で実装",
        "",
        "local ShopDefs = {}",
        "",
        "ShopDefs.CATEGORY = {",
        "\tkito     = \"kito\",",
        "\tsai      = \"sai\",",
        "\tspectral = \"spectral\",",
        "\tomamori  = \"omamori\",",
        "\ttalisman = \"talisman\",   -- ★ 追加：護符カテゴリ",
        "}",
        "",
        "-- 出現重み（相対値）",
        "-- ※ talisman は暫定で 0.3（お好みで調整）。S3ではUI確認が目的なので少し高めでもOK",
        "ShopDefs.WEIGHTS = {",
        "\tkito     = 1.0,",
        "\tsai      = 0.5,",
        "\tspectral = 0.2,",
        "\tomamori  = 0.0,",
        "\ttalisman = 0.3,   -- ★ 追加",
        "}",
        "",
        "-- 商品プール",
        "ShopDefs.POOLS = {",
        "\t-- 祈祷（★DOT ONLY）",
        "\tkito = {",
        "\t\t-- 子：最後の祈祷を再発火（記録は更新しない）",
        "\t\t{",
        "\t\t\tid = \"kito.ko\", name = \"子：前回の祈祷を再発火\", category = \"kito\", price = 4, effect = \"kito.ko\",",
        "\t\t\tdescJP = \"最後に成功した祈祷をもう一度発動（子自身の使用では記録は更新されません）。\",",
        "\t\t\tdescEN = \"Replay the last successful KITO once more (using Child itself doesn’t update the last).\",",
        "\t\t},",
        "",
        "\t\t-- 丑：所持文2倍（上限あり）",
        "\t\t{",
        "\t\t\tid = \"kito.ushi\", name = \"丑：所持文を2倍\", category = \"kito\", price = 5, effect = \"kito.ushi\",",
        "\t\t\tdescJP = \"所持文を即時2倍（上限あり）。\",",
        "\t\t\tdescEN = \"Double your current mon immediately (capped).\",",
        "\t\t},",
        "",
        "\t\t-- 寅：取り札の得点+1（恒常／スタック）",
        "\t\t{",
        "\t\t\tid = \"kito.tora\", name = \"寅：取り札の得点+1\", category = \"kito\", price = 4, effect = \"kito.tora\",",
        "\t\t\tdescJP = \"以後、取り札の得点+1（恒常バフ／スタック可）。\",",
        "\t\t\tdescEN = \"Permanent: taken cards score +1 (stackable).\",",
        "\t\t},",
        "",
        "\t\t-- 卯：短冊化（UIで対象選択）",
        "\t\t{",
        "\t\t\tid = \"kito.usagi_ribbon\", name = \"卯：1枚を短冊に変換\", category = \"kito\", price = 4,",
        "\t\t\teffect = \"kito.usagi_ribbon\",",
        "\t\t\tdescJP = \"ラン構成の対象札を短冊に変換（対象月に短冊が無い場合は不発）。\",",
        "\t\t\tdescEN = \"Convert one target to a Ribbon (no effect if that month has no ribbon).\",",
        "\t\t},",
        "",
        "\t\t-- 辰：写し取り（コピーして最弱候補を上書き）",
        "\t\t{",
        "\t\t\tid = \"kito.tatsu_copy\", name = \"辰：1枚を写し取り\", category = \"kito\", price = 6,",
        "\t\t\teffect = \"kito.tatsu_copy\",",
        "\t\t\tdescJP = \"選んだ札をコピーし、デッキ内の最弱候補（カス優先）1枚を上書き（枚数は不変）。\",",
        "\t\t\tdescEN = \"Duplicate a chosen card and overwrite the weakest deck entry (chaff first). Deck size unchanged.\",",
        "\t\t},",
        "",
        "\t\t-- 巳：1枚をカスに変換（UIで対象選択）",
        "\t\t{",
        "\t\t\tid   = \"kito.mi_venom\", name = \"巳：1枚をカス札に変換\", category = \"kito\", price = 2, effect = \"kito.mi_venom\",",
        "\t\t\tdescJP = \"ラン構成の対象札をカス札に変換（適用時に少額の文を即時加算）。\",",
        "\t\t\tdescEN = \"Convert a target in the run to Chaff (grants a small immediate mon bonus).\",",
        "\t\t},",
        "",
        "\t\t-- 午：タネ化（UIで対象選択）",
        "\t\t{",
        "\t\t\tid = \"kito.uma_seed\", name = \"午：1枚をタネに変換\", category = \"kito\", price = 4,",
        "\t\t\teffect = \"kito.uma_seed\",",
        "\t\t\tdescJP = \"ラン構成の対象札をタネに変換（対象月にタネが無い場合は不発）。\",",
        "\t\t\tdescEN = \"Convert one target to a Seed (no effect if that month has no seed).\",",
        "\t\t},",
        "",
        "\t\t-- 未：圧縮（山札から1枚削除、UIで対象選択）",
        "\t\t{",
        "\t\t\tid = \"kito.hitsuji_prune\", name = \"未：1枚を削除（圧縮）\", category = \"kito\", price = 6,",
        "\t\t\teffect = \"kito.hitsuji_prune\",",
        "\t\t\tdescJP = \"山札から1枚を削除（デッキ圧縮）。対象未指定なら不発。\",",
        "\t\t\tdescEN = \"Remove one card from the deck (compression). No-op if no target specified.\",",
        "\t\t},",
        "",
        "\t\t-- 申：※（将来拡張枠）",
        "\t\t-- { id = \"kito.saru_xxx\", ... },",
        "",
        "\t\t-- 酉：1枚を光札に変換（UIで対象選択）",
        "\t\t{",
        "\t\t\tid = \"kito.tori_brighten\", name = \"酉：1枚を光札に変換\", category = \"kito\", price = 6, effect = \"kito.tori_brighten\",",
        "\t\t\tdescJP = \"ラン構成の非brightを1枚brightへ（対象無しなら次季に+1繰越）。\",",
        "\t\t\tdescEN = \"Convert one non-Bright in run config to Bright (or queue +1 for next season).\",",
        "\t\t},",
        "",
        "\t\t-- 戌：カス化（UIで対象選択）",
        "\t\t{",
        "\t\t\tid = \"kito.inu_chaff2\", name = \"戌：1枚をカス札に変換\", category = \"kito\", price = 3,",
        "\t\t\t-- 旧 \"kito.inu_chaff\" / \"kito.inu_two_chaff\" を廃止し、正規IDに統一",
        "\t\t\teffect = \"kito.inu_chaff2\",",
        "\t\t\tdescJP = \"ラン構成の対象札をカス札に変換（既にカス札なら不発）。\",",
        "\t\t\tdescEN = \"Convert one target in the run to Chaff (no effect if already chaff).\",",
        "\t\t},",
        "",
        "\t\t-- 亥：酒化（UIで対象選択）",
        "\t\t{",
        "\t\t\tid = \"kito.i_sake\", name = \"亥：1枚を酒に変換\", category = \"kito\", price = 5,",
        "\t\t\teffect = \"kito.i_sake\",",
        "\t\t\tdescJP = \"対象札を9月の盃（タネ）に変換します。\",",
        "\t\t\tdescEN = \"Convert target to September's Seed (Sake).\",",
        "\t\t},",
        "\t},",
        "",
        "\t-- 祭事",
        "\tsai = {",
        "\t\t-- 既存：カス祭",
        "\t\t{",
        "\t\t\tid = \"sai_kasu\", name = \"カス祭り\", category = \"sai\", price = 3, effect = \"sai_kasu\",",
        "\t\t\tdescJP = \"カス役に祭事レベル+1（採点時に倍率+1/Lv、点+1/Lv）。\",",
        "\t\t\tdescEN = \"Festival: Kasu +1 level (scoring +1x and +1pt per Lv).\",",
        "\t\t},",
        "\t\t-- 既存：短冊祭",
        "\t\t{",
        "\t\t\tid = \"sai_tanzaku\", name = \"短冊祭り\", category = \"sai\", price = 4, effect = \"sai_tanzaku\",",
        "\t\t\tdescJP = \"短冊役に祭事レベル+1（採点時に倍率+1/Lv、点+3/Lv）。\",",
        "\t\t\tdescEN = \"Festival: Tanzaku +1 level (scoring +1x and +3pt per Lv).\",",
        "\t\t},",
        "",
        "\t\t-- ★ 追加：タネ祭",
        "\t\t{",
        "\t\t\tid = \"sai_seed\", name = \"タネ祭り\", category = \"sai\", price = 4, effect = \"sai_seed\",",
        "\t\t\tdescJP = \"タネ役に祭事レベル+1（採点時に倍率+1/Lv、点+3/Lv）。\",",
        "\t\t\tdescEN = \"Festival: Seeds +1 level (scoring +1x and +3pt per Lv).\",",
        "\t\t},",
        "\t\t-- ★ 追加：赤短祭",
        "\t\t{",
        "\t\t\tid = \"sai_akatan\", name = \"赤短祭り\", category = \"sai\", price = 6, effect = \"sai_akatan\",",
        "\t\t\tdescJP = \"赤短役に祭事レベル+1（採点時に倍率+1.5/Lv、点+5/Lv）。\",",
        "\t\t\tdescEN = \"Festival: Red Ribbons +1 level (+1.5x and +5pt per Lv).\",",
        "\t\t},",
        "\t\t-- ★ 追加：青短祭",
        "\t\t{",
        "\t\t\tid = \"sai_aotan\", name = \"青短祭り\", category = \"sai\", price = 6, effect = \"sai_aotan\",",
        "\t\t\tdescJP = \"青短役に祭事レベル+1（採点時に倍率+1.5/Lv、点+5/Lv）。\",",
        "\t\t\tdescEN = \"Festival: Blue Ribbons +1 level (+1.5x and +5pt per Lv).\",",
        "\t\t},",
        "\t\t-- ★ 追加：猪鹿蝶祭",
        "\t\t{",
        "\t\t\tid = \"sai_inoshika\", name = \"猪鹿蝶祭り\", category = \"sai\", price = 7, effect = \"sai_inoshika\",",
        "\t\t\tdescJP = \"猪鹿蝶役に祭事レベル+1（採点時に倍率+2/Lv、点+15/Lv）。\",",
        "\t\t\tdescEN = \"Festival: Boar–Deer–Butterfly +1 level (+2x and +15pt per Lv).\",",
        "\t\t},",
        "\t\t-- ★ 追加：花見祭",
        "\t\t{",
        "\t\t\tid = \"sai_hanami\", name = \"花見祭り\", category = \"sai\", price = 7, effect = \"sai_hanami\",",
        "\t\t\tdescJP = \"「花見で一杯」に祭事レベル+1（採点時に倍率+2/Lv、点+15/Lv）。\",",
        "\t\t\tdescEN = \"Festival: Hanami Sake +1 level (+2x and +15pt per Lv).\",",
        "\t\t},",
        "\t\t-- ★ 追加：月見祭",
        "\t\t{",
        "\t\t\tid = \"sai_tsukimi\", name = \"月見祭り\", category = \"sai\", price = 7, effect = \"sai_tsukimi\",",
        "\t\t\tdescJP = \"「月見で一杯」に祭事レベル+1（採点時に倍率+2/Lv、点+15/Lv）。\",",
        "\t\t\tdescEN = \"Festival: Tsukimi Sake +1 level (+2x and +15pt per Lv).\",",
        "\t\t},",
        "\t\t-- ★ 追加：三光祭（雨四光も同じ係数で扱う前提）",
        "\t\t{",
        "\t\t\tid = \"sai_sankou\", name = \"三光祭り\", category = \"sai\", price = 8, effect = \"sai_sankou\",",
        "\t\t\tdescJP = \"三光／雨四光に祭事レベル+1（採点時に倍率+2/Lv、点+20/Lv）。\",",
        "\t\t\tdescEN = \"Festival: Three Brights / Rain Four +1 level (+2x and +20pt per Lv).\",",
        "\t\t},",
        "\t\t-- ★ 追加：四光祭",
        "\t\t{",
        "\t\t\tid = \"sai_shikou\", name = \"四光祭り\", category = \"sai\", price = 9, effect = \"sai_shikou\",",
        "\t\t\tdescJP = \"四光に祭事レベル+1（採点時に倍率+2/Lv、点+20/Lv）。\",",
        "\t\t\tdescEN = \"Festival: Four Brights +1 level (+2x and +20pt per Lv).\",",
        "\t\t},",
        "\t\t-- ★ 追加：五光祭",
        "\t\t{",
        "\t\t\tid = \"sai_gokou\", name = \"五光祭り\", category = \"sai\", price = 10, effect = \"sai_gokou\",",
        "\t\t\tdescJP = \"五光に祭事レベル+1（採点時に倍率+3/Lv、点+30/Lv）。\",",
        "\t\t\tdescEN = \"Festival: Five Brights +1 level (+3x and +30pt per Lv).\",",
        "\t\t},",
        "\t},",
        "",
        "\t-- スペクタル（将来系）",
        "\tspectral = {",
        "\t\t{",
        "\t\t\tid = \"spectral_blackhole\", name = \"黒天\", category = \"spectral\", price = 8, effect = \"spectral_blackhole\",",
        "\t\t\tdescJP = \"即時：すべての祭事レベルを+1。\",",
        "\t\t\tdescEN = \"Instant: All festival levels +1.\",",
        "\t\t},",
        "\t},",
        "",
        "\t-- お守り（恒久。今回は出現0）",
        "\tomamori = {",
        "\t\t-- 将来：ここに恒久お守りを追加",
        "\t},",
        "",
        "\t-- ★ 新規：護符（このラン限定の装備。ボードに置いた分だけ有効）",
        "\t--  注意：S3ではUIのみで、enabled=falseのDefでも構いません。S4以降で配置RPCに接続。",
        "\ttalisman = {",
        "\t\t{",
        "\t\t\tid = \"tali_dev_plus1\", name = \"護符：+1点\", category = \"talisman\", price = 2,",
        "\t\t\teffect = \"talisman\", talismanId = \"dev_plus1\",",
        "\t\t\tdescJP = \"採点後、常時+1点を加算（開発用）。\",",
        "\t\t\tdescEN = \"After scoring, add +1 point (dev).\",",
        "\t\t},",
        "\t\t{",
        "\t\t\tid = \"tali_dev_gokou_plus5\", name = \"護符：五光+5\", category = \"talisman\", price = 3,",
        "\t\t\teffect = \"talisman\", talismanId = \"dev_gokou_plus5\",",
        "\t\t\tdescJP = \"五光成立時のみ、+5点（開発用）。\",",
        "\t\t\tdescEN = \"+5 points only when Gokou triggers (dev).\",",
        "\t\t},",
        "\t\t{",
        "\t\t\tid = \"tali_dev_sake_plus3\", name = \"護符：酒+3\", category = \"talisman\", price = 3,",
        "\t\t\teffect = \"talisman\", talismanId = \"dev_sake_plus3\",",
        "\t\t\tdescJP = \"酒が関与したとき、+3点（開発用）。\",",
        "\t\t\tdescEN = \"+3 points when Sake is involved (dev).\",",
        "\t\t},",
        "\t},",
        "}",
        "",
        "----------------------------------------------------------------",
        "-- 追加：互換ID → 正規(DOT)ID へ正規化（KITO専用の“揺らぎ吸収”）",
        "--  - KitoAssets は「kito.<animal>...」のみ受理するため、ここで必ず正規化する",
        "--  - 非KITO（sai_*, spectral_* 等）は入力をそのまま返す",
        "----------------------------------------------------------------",
        "function ShopDefs.toCanonicalEffectId(id) --: string",
        "\tif type(id) ~= \"string\" or id == \"\" then return \"\" end",
        "\tlocal s = id",
        "",
        "\t-- 正規（kito. で始まる）ならそのまま",
        "\tif s:match(\"^kito%.\") then",
        "\t\treturn s",
        "\tend",
        "",
        "\t-- 比較を楽にするため前処理",
        "\tlocal key = s:lower()",
        "\tkey = key:gsub(\"%s+\", \"\")           -- 空白除去",
        "\tkey = key:gsub(\"\\\\\", \"/\")           -- 区切り正規化",
        "\tkey = key:gsub(\"%.luau?$\", \"\")      -- 拡張子除去（.lua/.luau）",
        "\tkey = key:gsub(\"^modules?/\", \"\")    -- パスの先頭ノイズ除去",
        "\tkey = key:gsub(\"^effects?/\", \"\")",
        "\tkey = key:gsub(\"^kito/\", \"\")",
        "\tkey = key:gsub(\"^kito_\", \"kito.\")   -- 先頭の kito_ → kito.",
        "",
        "\t-- 代表的な旧名/別名のマップ（必要に応じて随時追加）",
        "\tlocal ALIAS = {",
        "\t\t-- 変換系",
        "\t\t[\"kito_tori_brighten\"] = \"kito.tori_brighten\",",
        "\t\t[\"tori_brighten\"]      = \"kito.tori_brighten\",",
        "\t\t[\"tori.brighten\"]      = \"kito.tori_brighten\",",
        "",
        "\t\t[\"kito_mi_venom\"]      = \"kito.mi_venom\",",
        "\t\t[\"mi_venom\"]           = \"kito.mi_venom\",",
        "",
        "\t\t[\"kito_uma_seed\"]      = \"kito.uma_seed\",",
        "\t\t[\"uma_seed\"]           = \"kito.uma_seed\",",
        "",
        "\t\t[\"kito_inu_chaff2\"]    = \"kito.inu_chaff2\",",
        "\t\t[\"inu_chaff2\"]         = \"kito.inu_chaff2\",",
        "\t\t[\"kito_inu_two_chaff\"] = \"kito.inu_chaff2\",",
        "",
        "\t\t[\"kito_i_sake\"]        = \"kito.i_sake\",",
        "\t\t[\"i_sake\"]             = \"kito.i_sake\",",
        "",
        "\t\t[\"kito_hitsuji_prune\"] = \"kito.hitsuji_prune\",",
        "\t\t[\"hitsuji_prune\"]      = \"kito.hitsuji_prune\",",
        "",
        "\t\t[\"kito_tatsu_copy\"]    = \"kito.tatsu_copy\",",
        "\t\t[\"tatsu_copy\"]         = \"kito.tatsu_copy\",",
        "",
        "\t\t[\"kito_usagi_ribbon\"]  = \"kito.usagi_ribbon\",",
        "\t\t[\"usagi_ribbon\"]       = \"kito.usagi_ribbon\",",
        "",
        "\t\t-- 常駐系",
        "\t\t[\"kito_tora\"]          = \"kito.tora\",",
        "\t\t[\"tora\"]               = \"kito.tora\",",
        "\t\t[\"kito_ushi\"]          = \"kito.ushi\",",
        "\t\t[\"ushi\"]               = \"kito.ushi\",",
        "\t\t[\"kito_ko\"]            = \"kito.ko\",",
        "\t\t[\"ko\"]                 = \"kito.ko\",",
        "\t}",
        "",
        "\tif ALIAS[key] then",
        "\t\treturn ALIAS[key]",
        "\tend",
        "",
        "\t-- ここまでで確定できなければ一般形で正規化",
        "\t-- 1) アンダースコア → ドット",
        "\tkey = key:gsub(\"_\", \".\")",
        "",
        "\t-- 2) kito. 接頭辞が無ければ付ける（動物名から始まるケースを包含）",
        "\tif not key:find(\"^kito%.\") then"
      ],
      "truncated": true,
      "analysis": {
        "waitForChild": [],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": true,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/shared/ShopFormat.lua",
      "ext": "lua",
      "binary": false,
      "size": 5369,
      "mtime": "2025-09-28T12:07:30.868702+00:00",
      "head": [
        "-- ReplicatedStorage/SharedModules/ShopFormat.lua",
        "-- v0.9.B ShopFormat：SHOP向けの整形系ユーティリティ（Locale優先 + 後方互換）",
        "local ShopFormat = {}",
        "",
        "--==================================================",
        "-- 依存（Locale 一元化）",
        "--==================================================",
        "local RS = game:GetService(\"ReplicatedStorage\")",
        "local Config = RS:WaitForChild(\"Config\")",
        "local Locale = require(Config:WaitForChild(\"Locale\"))",
        "",
        "--==================================================",
        "-- 言語正規化（Locale に委譲）",
        "--==================================================",
        "function ShopFormat.normLang(s: string?): string",
        "\treturn Locale.normalize(s)",
        "end",
        "",
        "--==================================================",
        "-- 価格表記（※従来通り「文」固定。英語UIでもこのまま）",
        "--==================================================",
        "function ShopFormat.fmtPrice(n: number?): string",
        "\treturn (\"%d 文\"):format(tonumber(n or 0))",
        "end",
        "",
        "--==================================================",
        "-- タイトル/説明（Locale.t 最優先 → 既存フィールドへフォールバック）",
        "--==================================================",
        "-- 後方互換：lang 省略可（省略時は Locale の共有言語を使用）",
        "function ShopFormat.itemTitle(it: any, lang: string?): string",
        "\tif not it then return \"???\" end",
        "\tlocal id = tostring(it.id or \"\")",
        "\tif id ~= \"\" then",
        "\t\tlocal key = (\"SHOP_ITEM_%s_NAME\"):format(id)",
        "\t\tlocal s = Locale.t(lang, key)",
        "\t\tif s and s ~= key then",
        "\t\t\treturn s",
        "\t\tend",
        "\tend",
        "\t-- フォールバック：従来 name → id",
        "\treturn tostring(it.name or (id ~= \"\" and id) or \"???\")",
        "end",
        "",
        "function ShopFormat.itemDesc(it: any, lang: string?): string",
        "\tif not it then return \"\" end",
        "\tlocal id = tostring(it.id or \"\")",
        "\tif id ~= \"\" then",
        "\t\tlocal key = (\"SHOP_ITEM_%s_DESC\"):format(id)",
        "\t\tlocal s = Locale.t(lang, key)",
        "\t\tif s and s ~= key then",
        "\t\t\treturn s",
        "\t\tend",
        "\tend",
        "\t-- 既存フィールドへフォールバック",
        "\tlocal use = Locale.normalize(lang)",
        "\tif use == \"en\" then",
        "\t\treturn (it.descEN or it.descEn or it.name or it.id or \"\")",
        "\telse",
        "\t\treturn (it.descJP or it.descJa or it.name or it.id or \"\")",
        "\tend",
        "end",
        "",
        "--==================================================",
        "-- “名前だけ”フェイス表示（干支ID→短名）",
        "--  - id/effect の両方を参照",
        "--  - kito.<name> / kito_<name> / 旧モジュール名(Usagi_Ribbonize 等) すべて対応",
        "--==================================================",
        "",
        "-- 基底トークン -> 漢字",
        "local ZKANJI: {[string]: string} = {",
        "\tko=\"子\", ushi=\"丑\", tora=\"寅\", u=\"卯\", usagi=\"卯\", tatsu=\"辰\", mi=\"巳\",",
        "\tuma=\"午\", hitsuji=\"未\", saru=\"申\", tori=\"酉\", inu=\"戌\", i=\"亥\",",
        "}",
        "",
        "-- 旧モジュール名（kito.* 以外）→ 漢字",
        "local LEGACY_MODULE2KANJI: {[string]: string} = {",
        "\t[\"tori_brighten\"]   = \"酉\",",
        "\t[\"mi_venom\"]        = \"巳\",",
        "\t[\"usagi_ribbonize\"] = \"卯\",",
        "\t[\"uma_seedize\"]     = \"午\",",
        "\t[\"inu_chaff2\"]      = \"戌\",",
        "\t[\"i_sakeify\"]       = \"亥\",",
        "\t[\"hitsuji_prune\"]   = \"未\",",
        "}",
        "",
        "local function pickZodiacKanjiFromId(s: string?): string?",
        "\tif type(s) ~= \"string\" then return nil end",
        "\ts = string.lower(s)",
        "",
        "\t-- 1) 旧モジュール名にそのまま一致",
        "\tdo",
        "\t\tlocal direct = LEGACY_MODULE2KANJI[s]",
        "\t\tif direct then return direct end",
        "\tend",
        "",
        "\t-- 2) \"kito.<name>...\" / \"kito_<name>...\" の <name> を抽出（最初の区切りまで）",
        "\t--    例: kito.tori_brighten → tori / kito_inu_two_chaff → inu",
        "\tlocal name = s:match(\"^kito[._-]([a-z]+)\")",
        "\tif name then",
        "\t\tif name == \"u\" then name = \"usagi\" end -- 旧: kito_u 対応",
        "\t\treturn ZKANJI[name]",
        "\tend",
        "",
        "\treturn nil",
        "end",
        "",
        "function ShopFormat.faceName(it: any): string",
        "\tif not it then return \"???\" end",
        "\t-- 1) 明示の短名を優先",
        "\tfor _, k in ipairs({ \"displayName\", \"short\", \"shortName\" }) do",
        "\t\tlocal v = it[k]",
        "\t\tif v and tostring(v) ~= \"\" then return tostring(v) end",
        "\tend",
        "\t-- 2) effect → id の順で干支判定（ドット/アンダーバー/旧名すべてOK）",
        "\tlocal z = pickZodiacKanjiFromId(it.effect) or pickZodiacKanjiFromId(it.id)",
        "\tif z then return z end",
        "\t-- 3) 最後に name / id をそのまま",
        "\treturn tostring(it.name or it.id or \"???\")",
        "end",
        "",
        "",
        "--==================================================",
        "-- デッキスナップショット → リスト文字列",
        "--==================================================",
        "function ShopFormat.deckListFromSnapshot(snap: any): (integer, string)",
        "\tif typeof(snap) ~= \"table\" then return 0, \"\" end",
        "\tlocal countMap: {[string]: number} = {}",
        "\tlocal order = {}",
        "\tlocal entries = snap.entries",
        "\tif typeof(entries) == \"table\" and #entries > 0 then",
        "\t\tfor _, e in ipairs(entries) do",
        "\t\t\tlocal code = tostring(e.code)",
        "\t\t\tif not countMap[code] then table.insert(order, code) end",
        "\t\t\tcountMap[code] = (countMap[code] or 0) + 1",
        "\t\tend",
        "\telse",
        "\t\tfor _, code in ipairs(snap.codes or {}) do",
        "\t\t\tcode = tostring(code)",
        "\t\t\tif not countMap[code] then table.insert(order, code) end",
        "\t\t\tcountMap[code] = (countMap[code] or 0) + 1",
        "\t\tend",
        "\tend",
        "\ttable.sort(order, function(a,b) return a < b end)",
        "\tlocal parts = {}",
        "\tfor _, code in ipairs(order) do",
        "\t\tlocal n = countMap[code] or 0",
        "\t\ttable.insert(parts, (n > 1) and (\"%s x%d\"):format(code, n) or code)",
        "\tend",
        "\treturn tonumber(snap.count or 0) or 0, table.concat(parts, \", \")",
        "end",
        "",
        "return ShopFormat"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [
          "Config",
          "Locale"
        ],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/shared/ShopService.lua",
      "ext": "lua",
      "binary": false,
      "size": 19669,
      "mtime": "2025-10-02T02:51:36.855171+00:00",
      "head": [
        "-- ServerScriptService/ShopService.lua",
        "-- v0.9.4 (DOT-ONLY) 屋台サービス",
        "-- 変更点（v0.9.4）:",
        "--  - ★ KITO は“ドット唯一の真実”。購入前プリフライトで 'kito_' を明示拒否し、課金/在庫変更をしない",
        "--  - ★ UI経路・直適用ともに 'kito.*' 以外は流さない（found.category==\"kito\" の場合）",
        "--  - v0.9.3 の仕様を継承（toCanonicalEffectId 廃止、SELECT_KITO(underscore) 撤去、ctx.player 付与）",
        "",
        "local RS   = game:GetService(\"ReplicatedStorage\")",
        "local SSS  = game:GetService(\"ServerScriptService\")",
        "local Http = game:GetService(\"HttpService\")",
        "",
        "-- Logger",
        "local Logger = require(RS:WaitForChild(\"SharedModules\"):WaitForChild(\"Logger\"))",
        "local LOG    = Logger.scope(\"ShopService\")",
        "",
        "local Remotes    = RS:WaitForChild(\"Remotes\")",
        "local ShopOpen   = Remotes:WaitForChild(\"ShopOpen\")",
        "local BuyItem    = Remotes:WaitForChild(\"BuyItem\")",
        "local ShopReroll = Remotes:WaitForChild(\"ShopReroll\")",
        "",
        "-- ★ UI分岐用の Balance と ShopDefs",
        "local Balance       = require(RS:WaitForChild(\"Config\"):WaitForChild(\"Balance\"))",
        "local SharedModules = RS:WaitForChild(\"SharedModules\")",
        "local ShopDefs      = require(SharedModules:WaitForChild(\"ShopDefs\"))",
        "",
        "-- ★ RunDeckUtil（安全ロード／無ければ nil）",
        "local RunDeckUtil do",
        "\tlocal ok, mod = pcall(function()",
        "\t\treturn require(SharedModules:WaitForChild(\"RunDeckUtil\"))",
        "\tend)",
        "\tif ok then",
        "\t\tRunDeckUtil = mod",
        "\telse",
        "\t\tRunDeckUtil = nil",
        "\t\tLOG.warn(\"RunDeckUtil not available; deck snapshot/matsuri logs will be limited.\")",
        "\tend",
        "end",
        "",
        "-- ★ 候補生成/送信の一元管理（セッション保持含む）",
        "local KitoPickCore  = require(SSS:WaitForChild(\"KitoPickCore\"))",
        "",
        "-- ★ 護符の正本はサーバ一元管理（不足キー補完のみ）",
        "local TaliService   = require(SSS:WaitForChild(\"TalismanService\"))",
        "",
        "-- ★ SaveService（存在しなくてもゲームは動作継続）",
        "local SaveService do",
        "\tlocal ok, mod = pcall(function() return require(SSS:WaitForChild(\"SaveService\")) end)",
        "\tif ok then",
        "\t\tSaveService = mod",
        "\telse",
        "\t\tLOG.warn(\"SaveService not available; shop snapshots will be skipped.\")",
        "\t\tSaveService = nil",
        "\tend",
        "end",
        "",
        "--========================",
        "-- 設定",
        "--========================",
        "local MAX_STOCK   = 6   -- 並べる最大数",
        "local REROLL_COST = 1   -- リロール費用",
        "",
        "--========================",
        "-- nonce（リロール多重送出防止）",
        "--========================",
        "local REROLL_NONCE_TTL = 120 -- 秒（メモリ掃除用）",
        "local rerollNonceByUser: {[number]: {[string]: number}} = {}",
        "",
        "local function pruneNonces(userId: number, now: number)",
        "\tlocal box = rerollNonceByUser[userId]",
        "\tif not box then return end",
        "\tfor n, t in pairs(box) do",
        "\t\tif (now - (t or 0)) > REROLL_NONCE_TTL then",
        "\t\t\tbox[n] = nil",
        "\t\tend",
        "\tend",
        "end",
        "",
        "local function checkAndAddNonce(userId: number, nonce: string?): boolean",
        "\t-- レガシー互換: nonce が無い場合は許容（必要なら false にして強制）",
        "\tif type(nonce) ~= \"string\" or nonce == \"\" then",
        "\t\treturn true",
        "\tend",
        "\tlocal now = os.time()",
        "\tpruneNonces(userId, now)",
        "\tlocal box = rerollNonceByUser[userId]",
        "\tif not box then",
        "\t\tbox = {}",
        "\t\trerollNonceByUser[userId] = box",
        "\tend",
        "\tif box[nonce] then",
        "\t\treturn false",
        "\tend",
        "\tbox[nonce] = now",
        "\treturn true",
        "end",
        "",
        "-- 置換後（★ run.id を唯一源泉に）",
        "local function ensureRunId(state:any): string",
        "\tstate.run = state.run or {}",
        "\tlocal id = state.run.id",
        "\tif type(id) ~= \"string\" or id == \"\" then",
        "\t\tid = Http:GenerateGUID(false)",
        "\t\tstate.run.id = id",
        "\tend",
        "\treturn id",
        "end",
        "",
        "--========================",
        "-- KITO: ラベル（DOT ONLY）",
        "--========================",
        "-- effectId が 'kito.*' のモジュール名である前提",
        "local function kitoLabelDot(dotId: string?): string",
        "\tlocal id = tostring(dotId or \"\")",
        "\tif id:sub(1,5) ~= \"kito.\" then return \"KITO\" end",
        "\tif id:find(\"tori\",   1, true) then return \"酉\" end",
        "\tif id:find(\"mi\",     1, true) then return \"巳\" end",
        "\tif id:find(\"usagi\",  1, true) then return \"卯\" end",
        "\tif id:find(\"uma\",    1, true) then return \"午\" end",
        "\tif id:find(\"inu\",    1, true) then return \"戌\" end",
        "\tif id:find(\"i_sake\", 1, true) or id:match(\"^kito%.i$\") then return \"亥\" end",
        "\tif id:find(\"hitsuji\",1, true) then return \"未\" end",
        "\tif id:match(\"^kito%.ushi$\") then return \"丑\" end",
        "\tif id:match(\"^kito%.tora$\") then return \"寅\" end",
        "\tif id:match(\"^kito%.ko$\")   then return \"子\" end",
        "\treturn \"KITO\"",
        "end",
        "",
        "-- ★ どの Kito が「選択 UI（KitoPick）」必須か（DOT ONLY）",
        "--   Module ID（dot）をそのまま key にする。",
        "local SELECT_KITO_DOT: {[string]: boolean} = {",
        "\t[\"kito.tori_brighten\"] = true,",
        "\t[\"kito.mi_venom\"]      = true,",
        "\t[\"kito.usagi_ribbon\"]  = true,",
        "\t[\"kito.uma_seed\"]      = true,",
        "\t[\"kito.inu_chaff2\"]    = true,",
        "\t[\"kito.i_sake\"]        = true,",
        "\t[\"kito.hitsuji_prune\"] = true,",
        "\t-- 省略形（将来のShopDefsが 'kito.usagi' などを使う可能性に備える）",
        "\t[\"kito.usagi\"]         = true,",
        "\t[\"kito.uma\"]           = true,",
        "\t[\"kito.inu\"]           = true,",
        "\t[\"kito.i\"]             = true,",
        "\t[\"kito.hitsuji\"]       = true,",
        "}",
        "local function requiresKitoPickDot(effectId: string): boolean",
        "\treturn SELECT_KITO_DOT[effectId] == true",
        "end",
        "",
        "--========================",
        "-- ログ支援",
        "--========================",
        "local function j(v)",
        "\tlocal ok, res = pcall(function() return Http:JSONEncode(v) end)",
        "\treturn ok and res or tostring(v)",
        "end",
        "",
        "local function matsuriJSON(state)",
        "\t-- RunDeckUtil が無い場合は {} を返す（ログ用途のため挙動非影響）",
        "\tif RunDeckUtil and typeof(RunDeckUtil.getMatsuriLevels) == \"function\" then",
        "\t\tlocal levels = RunDeckUtil.getMatsuriLevels(state)",
        "\t\treturn j(levels or {})",
        "\tend",
        "\treturn j({})",
        "end",
        "",
        "local function stockBrief(stock)",
        "\tlocal n = (stock and #stock) or 0",
        "\tlocal cats = {}",
        "\tif stock then",
        "\t\tfor _,it in ipairs(stock) do",
        "\t\t\tlocal c = it and it.category or \"?\"",
        "\t\t\tcats[c] = (cats[c] or 0) + 1",
        "\t\tend",
        "\tend",
        "\treturn (\"%d items %s\"):format(n, j(cats))",
        "end",
        "",
        "--========================",
        "-- スナップ保存（屋台シーン用）",
        "--========================",
        "local function snapShop(plr: Player, s: any)",
        "\tif not SaveService or not SaveService.snapShopEnter then return end",
        "\tpcall(function() SaveService.snapShopEnter(plr, s) end)",
        "end",
        "",
        "--========================",
        "-- 効果ローダー",
        "--========================",
        "local ShopEffects",
        "do",
        "\tlocal function tryRequire()",
        "\t\tlocal node = SSS:FindFirstChild(\"ShopEffects\")",
        "\t\tif node then",
        "\t\t\tif node:IsA(\"Folder\") then",
        "\t\t\t\tlocal initMod = node:FindFirstChild(\"init\")",
        "\t\t\t\tif initMod and initMod:IsA(\"ModuleScript\") then",
        "\t\t\t\t\treturn require(initMod)",
        "\t\t\t\tend",
        "\t\t\telseif node:IsA(\"ModuleScript\") then",
        "\t\t\t\treturn require(node)",
        "\t\t\tend",
        "\t\tend",
        "\t\tlocal mod = SharedModules:FindFirstChild(\"ShopEffects\")",
        "\t\tif mod and mod:IsA(\"ModuleScript\") then",
        "\t\t\treturn require(mod)",
        "\t\tend",
        "\t\treturn nil",
        "\tend",
        "\tlocal ok, mod = pcall(tryRequire)",
        "\tif ok and type(mod) == \"table\" and type(mod.apply) == \"function\" then",
        "\t\tShopEffects = mod",
        "\t\tLOG.info(\"ShopEffects loaded OK\")",
        "\telse",
        "\t\tLOG.warn(\"ShopEffects missing/invalid | ok=%s err=%s\", tostring(ok), tostring(mod))",
        "\t\tShopEffects = nil",
        "\tend",
        "end",
        "",
        "--========================",
        "-- 在庫生成",
        "--========================",
        "local function rollCategory(rng: Random)",
        "\tlocal weights = ShopDefs.WEIGHTS or {}",
        "\tlocal total = 0",
        "\tfor _, w in pairs(weights) do total += (w or 0) end",
        "\tif total <= 0 then return \"kito\" end",
        "\tlocal r, acc = rng:NextNumber(0, total), 0",
        "\tfor cat, w in pairs(weights) do",
        "\t\tacc += (w or 0)",
        "\t\tif r <= acc then return cat end",
        "\tend",
        "\treturn \"kito\"",
        "end",
        "",
        "local function generateStock(rng: Random, count: number)",
        "\tlocal items = {}",
        "\tlocal pools = ShopDefs.POOLS or {}",
        "\tfor _=1, count do",
        "\t\tlocal cat  = rollCategory(rng)",
        "\t\tlocal pool = pools[cat]",
        "\t\tif pool and #pool > 0 then",
        "\t\t\ttable.insert(items, table.clone(pool[rng:NextInteger(1, #pool)]))",
        "\t\tend",
        "\tend",
        "\t-- フィッシャー–イェーツシャッフル",
        "\tfor i = #items, 2, -1 do",
        "\t\tlocal jx = rng:NextInteger(1, i)",
        "\t\titems[i], items[jx] = items[jx], items[i]",
        "\tend",
        "\treturn items",
        "end",
        "",
        "--========================",
        "-- talisman 抽出（整形/補完はしない）",
        "--========================",
        "local function readRunTalisman(s:any)",
        "\tif type(s) ~= \"table\" then return nil end",
        "\tif type(s.run) == \"table\" and type(s.run.talisman) == \"table\" then",
        "\t\treturn s.run.talisman",
        "\tend",
        "\treturn nil",
        "end",
        "",
        "--========================",
        "-- 本体",
        "--========================",
        "local Service = { _getState=nil, _pushState=nil }",
        "",
        "-- ========= open =========",
        "local function openFor(plr: Player, s: any, opts: {reward:number?, notice:string?, target:number?}?)",
        "\t-- 開店直前に、正本の talisman を必ず準備（不足キーのみ補う）",
        "\tpcall(function() TaliService.ensureFor(plr, \"ShopOpen\") end)",
        "",
        "\ts.phase = \"shop\"",
        "\ts.shop = s.shop or {}",
        "\ts.shop.rng = s.shop.rng or Random.new(os.clock()*1000000)",
        "",
        "\t-- 初回オープン時：在庫が無ければ MAX_STOCK で生成",
        "\tif not s.shop.stock then",
        "\t\ts.shop.stock = generateStock(s.shop.rng, MAX_STOCK)",
        "\tend",
        "",
        "\tlocal reward = (opts and opts.reward) or 0",
        "\tlocal notice = (opts and opts.notice) or \"\"",
        "\tlocal target = (opts and opts.target) or 0",
        "\tlocal money  = tonumber(s.mon or 0) or 0",
        "",
        "\t-- ★ RunDeckUtil が読めない環境でも nil 許容",
        "\tlocal deckView = nil",
        "\tif RunDeckUtil and typeof(RunDeckUtil.snapshot) == \"function\" then",
        "\t\tdeckView = RunDeckUtil.snapshot(s)",
        "\tend",
        "",
        "\t-- ★ talisman は state.run.talisman を“そのまま”搭載（補完や推測はしない）",
        "\tlocal tali = readRunTalisman(s)",
        "",
        "\t-- ===== LOG =====",
        "\tLOG.info(",
        "\t\t\"[OPEN] u=%s season=%s mon=%d rerollCost=%d matsuri=%s stock=%s notice=%s talisman#=%s\",",
        "\t\ttostring(plr and plr.Name or \"?\"),"
      ],
      "truncated": true,
      "analysis": {
        "waitForChild": [
          "SharedModules",
          "Logger",
          "Remotes",
          "ShopOpen",
          "BuyItem",
          "ShopReroll",
          "Config",
          "Balance",
          "SharedModules",
          "ShopDefs",
          "RunDeckUtil",
          "KitoPickCore",
          "TalismanService",
          "SaveService"
        ],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 1
        },
        "kitoMention": true,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/shared/StateHub.lua",
      "ext": "lua",
      "binary": false,
      "size": 12515,
      "mtime": "2025-10-03T20:09:48.945974+00:00",
      "head": [
        "-- ReplicatedStorage/SharedModules/StateHub.lua",
        "-- サーバ専用：プレイヤー状態を一元管理し、Remotes経由でクライアントへ送信する",
        "-- 12-month版：StatePushは month/goal を正とし、season/seasonStr は送信しない",
        "-- ★ Reroll 統一（SSOT）：rerollFieldLeft / rerollHandLeft を唯一の真実とする",
        "--    旧フィールド（handsLeft / rerollsLeft）には一切依存しない・送らない",
        "",
        "local RS = game:GetService(\"ReplicatedStorage\")",
        "",
        "local Logger = require(RS:WaitForChild(\"SharedModules\"):WaitForChild(\"Logger\"))",
        "local LOG    = Logger.scope(\"StateHub\")",
        "",
        "local Scoring     = require(RS:WaitForChild(\"SharedModules\"):WaitForChild(\"Scoring\"))",
        "local RunDeckUtil = require(RS:WaitForChild(\"SharedModules\"):WaitForChild(\"RunDeckUtil\"))",
        "",
        "-- Balance は存在しない環境でも動作するようフォールバック",
        "local Balance do",
        "\tlocal ok, mod = pcall(function()",
        "\t\treturn require(RS:WaitForChild(\"Config\"):WaitForChild(\"Balance\"))",
        "\tend)",
        "\tBalance = ok and mod or {",
        "\t\tSTAGE_START_MONTH = 1,",
        "\t\tgetGoalForMonth = function(_) return 1 end,",
        "\t}",
        "end",
        "",
        "local StateHub = {}",
        "",
        "--========================",
        "-- 内部状態（Server専用）",
        "--========================",
        "export type PlrState = {",
        "\tdeck: {any}?, hand: {any}?, board: {any}?, taken: {any}?, dump: {any}?,",
        "",
        "\t-- ▼ 新：場/手で明確に分離（唯一の真実）",
        "\trerollFieldLeft: number?,    -- 全体/場リロール残数（正）",
        "\trerollHandLeft:  number?,    -- 手札リロール残数（正）",
        "",
        "\tseasonSum: number?,  -- UI表示用の合計",
        "\tchainCount: number?, -- 連続役数（倍率表示用）",
        "\tmult: number?,       -- 表示用倍率",
        "",
        "\tbank: number?,       -- 両（周回通貨）",
        "\tmon: number?,        -- 文（季節通貨）",
        "",
        "\tphase: string?,      -- \"play\" / \"shop\" / \"result\" / \"home\"",
        "\tyear: number?,       -- 周回年数",
        "\thomeReturns: number?,-- 「ホームへ戻る」回数",
        "",
        "\tlang: string?,       -- \"ja\"/\"en\"",
        "\tlastScore: any?,     -- 任意デバッグ",
        "",
        "\trun: any?,           -- { month=number, reroll={field,hand}, talisman=?, ... }",
        "\tgoal: number?,       -- 月ごとの目標（数値）",
        "}",
        "",
        "local stateByPlr : {[Player]: PlrState} = {}",
        "",
        "--========================",
        "-- Remotes（Server→Client）",
        "--========================",
        "local Remotes : {",
        "\tStatePush: RemoteEvent?, ScorePush: RemoteEvent?,",
        "\tHandPush:  RemoteEvent?, FieldPush: RemoteEvent?, TakenPush: RemoteEvent?,",
        "} | nil = nil",
        "",
        "--========================",
        "-- 共通ユーティリティ",
        "--========================",
        "local function chainMult(n: number?): number",
        "\tlocal x = tonumber(n) or 0",
        "\tif x <= 1 then return 1.0",
        "\telseif x == 2 then return 1.5",
        "\telseif x == 3 then return 2.0",
        "\telse return 3.0 + (x - 4) * 0.5",
        "\tend",
        "end",
        "",
        "local function monthName(n:number?): string",
        "\tlocal m = tonumber(n) or 0",
        "\tif m < 1 then m = 1 end",
        "\tif m > 12 then m = 12 end",
        "\treturn tostring(m) .. \"月\"",
        "end",
        "",
        "local function goalForMonth(s: PlrState): number",
        "\tlocal m = (s.run and s.run.month) or Balance.STAGE_START_MONTH or 1",
        "\tif s.goal and type(s.goal)==\"number\" then return s.goal end",
        "\tif Balance.getGoalForMonth then",
        "\t\treturn Balance.getGoalForMonth(m)",
        "\tend",
        "\tif Balance.GOAL_BY_MONTH then",
        "\t\treturn Balance.GOAL_BY_MONTH[m] or Balance.GOAL_BY_MONTH[1] or 1",
        "\tend",
        "\treturn 1",
        "end",
        "",
        "--========================",
        "-- 初期化（Remotes 注入）",
        "--========================",
        "function StateHub.init(remotesTable:any)",
        "\tRemotes = remotesTable",
        "\tLOG.info(\"initialized | remotes: State=%s Score=%s Hand=%s Field=%s Taken=%s\",",
        "\t\tRemotes and tostring(Remotes.StatePush ~= nil) or \"nil\",",
        "\t\tRemotes and tostring(Remotes.ScorePush ~= nil) or \"nil\",",
        "\t\tRemotes and tostring(Remotes.HandPush  ~= nil) or \"nil\",",
        "\t\tRemotes and tostring(Remotes.FieldPush ~= nil) or \"nil\",",
        "\t\tRemotes and tostring(Remotes.TakenPush ~= nil) or \"nil\"",
        "\t)",
        "end",
        "",
        "--========================",
        "-- 基本API",
        "--========================",
        "function StateHub.get(plr: Player): PlrState? return stateByPlr[plr] end",
        "function StateHub.set(plr: Player, s: PlrState) stateByPlr[plr] = s end",
        "function StateHub.clear(plr: Player) stateByPlr[plr] = nil end",
        "function StateHub.exists(plr: Player): boolean return stateByPlr[plr] ~= nil end",
        "",
        "--========================================",
        "-- リロール補完：run.reroll から新フィールドを復元",
        "--========================================",
        "local function ensureRerollFields(s: PlrState)",
        "\t-- run.reroll から補完（SSOTを守る：旧 handsLeft/rerollsLeft には触れない）",
        "\tif s.run and typeof(s.run.reroll)==\"table\" then",
        "\t\tlocal rr = s.run.reroll",
        "\t\tif s.rerollFieldLeft == nil and type(rr.field)==\"number\" then",
        "\t\t\ts.rerollFieldLeft = rr.field",
        "\t\tend",
        "\t\tif s.rerollHandLeft == nil and type(rr.hand)==\"number\" then",
        "\t\t\ts.rerollHandLeft = rr.hand",
        "\t\tend",
        "\tend",
        "",
        "\t-- 既定値（0 クランプ）",
        "\ts.rerollFieldLeft = tonumber(s.rerollFieldLeft or 0) or 0",
        "\ts.rerollHandLeft  = tonumber(s.rerollHandLeft  or 0) or 0",
        "",
        "\t-- run.reroll にも正の数値を反映（保存系がこちらを読む想定）",
        "\ts.run = s.run or {}",
        "\ts.run.reroll = s.run.reroll or {}",
        "\ts.run.reroll.field = s.rerollFieldLeft",
        "\ts.run.reroll.hand  = s.rerollHandLeft",
        "end",
        "",
        "-- サーバ内ユーティリティ：欠損プロパティの安全な既定値",
        "local function ensureDefaults(s: PlrState)",
        "\t-- リロール（SSOT）を最初に整える",
        "\tensureRerollFields(s)",
        "",
        "\ts.seasonSum   = s.seasonSum or 0",
        "\ts.chainCount  = s.chainCount or 0",
        "\ts.mult        = s.mult or 1.0",
        "\ts.bank        = s.bank or 0",
        "\ts.mon         = s.mon or 0",
        "\ts.phase       = s.phase or \"play\"",
        "\ts.year        = s.year or 1",
        "\ts.homeReturns = s.homeReturns or 0",
        "\ts.deck        = s.deck or {}",
        "\ts.hand        = s.hand or {}",
        "\ts.board       = s.board or {}",
        "\ts.taken       = s.taken or {}",
        "\ts.run         = s.run or {}",
        "\ts.run.month   = s.run.month or Balance.STAGE_START_MONTH or 1",
        "\t-- goal は getGoalForMonth を優先（Balance 側で月別設定を吸収）",
        "\ts.goal        = s.goal or goalForMonth(s)",
        "end",
        "",
        "local function safeLen(t:any) return (typeof(t) == \"table\") and #t or 0 end",
        "",
        "--========================",
        "-- クライアント送信（状態/得点/札）",
        "--========================",
        "function StateHub.pushState(plr: Player)",
        "\tlocal tAll0 = os.clock()",
        "\tif not Remotes then",
        "\t\tLOG.warn(\"pushState: Remotes table missing (skip) | u=%s\", plr and plr.Name or \"?\")",
        "\t\treturn",
        "\tend",
        "\tlocal s = stateByPlr[plr]",
        "\tif not s then",
        "\t\tLOG.warn(\"pushState: state missing (skip) | u=%s\", plr and plr.Name or \"?\")",
        "\t\treturn",
        "\tend",
        "",
        "\tensureDefaults(s)",
        "",
        "\tlocal deckN  = safeLen(s.deck)",
        "\tlocal handN  = safeLen(s.hand)",
        "\tlocal boardN = safeLen(s.board)",
        "\tlocal takenN = safeLen(s.taken)",
        "",
        "\tlocal m = (s.run and s.run.month) or Balance.STAGE_START_MONTH or 1",
        "\tlocal g = goalForMonth(s)",
        "",
        "\tLOG.info(\"pushState.begin u=%s phase=%s month=%d goal=%s deck=%d hand=%d board=%d taken=%d mon=%s bank=%s\",",
        "\t\tplr and plr.Name or \"?\", tostring(s.phase), m, tostring(g),",
        "\t\tdeckN, handN, boardN, takenN, tostring(s.mon), tostring(s.bank)",
        "\t)",
        "",
        "\t-- サマリー算出（例外安全）",
        "\tlocal score_t0 = os.clock()",
        "\tlocal okScore, total, roles, detail = pcall(function()",
        "\t\tlocal takenCards = s.taken or {}",
        "\t\treturn Scoring.evaluate(takenCards, s) -- detail={mon,pts}",
        "\tend)",
        "\tlocal score_ms = (os.clock() - score_t0) * 1000.0",
        "\tif not okScore then",
        "\t\tLOG.warn(\"pushState: Scoring.evaluate threw: %s\", tostring(total))",
        "\t\ttotal, roles, detail = 0, {}, { mon = s.mon or 0, pts = 0 }",
        "\telse",
        "\t\tLOG.debug(\"ScorePush types: %s %s %s (in %.2fms)\", typeof(total), typeof(roles), typeof(detail), score_ms)",
        "\tend",
        "",
        "\t-- 祭事レベル（UI用）",
        "\tlocal mats_t0 = os.clock()",
        "\tlocal okM, matsuriLevels = pcall(function()",
        "\t\treturn RunDeckUtil.getMatsuriLevels(s) or {}",
        "\tend)",
        "\tlocal mats_ms = (os.clock() - mats_t0) * 1000.0",
        "\tif not okM then",
        "\t\tLOG.warn(\"pushState: RunDeckUtil.getMatsuriLevels threw: %s\", tostring(matsuriLevels))",
        "\t\tmatsuriLevels = {}",
        "\tend",
        "",
        "\t--========================",
        "\t-- 状態（HUD/UI用）",
        "\t--========================",
        "\tif Remotes.StatePush then",
        "\t\tlocal t0 = os.clock()",
        "\t\tlocal okSend, err = pcall(function()",
        "\t\t\tRemotes.StatePush:FireClient(plr, {",
        "\t\t\t\t-- ★ 送るのは month/goal が正。season は送らない。",
        "\t\t\t\tmonth       = m,",
        "\t\t\t\tmonthStr    = monthName(m),",
        "\t\t\t\tgoal        = g,",
        "\t\t\t\ttarget      = g, -- 旧互換が必要なら同値を置く（UI側で未使用なら無視）",
        "",
        "\t\t\t\t-- ▼ 残り系（SSOT：新キーのみ）",
        "\t\t\t\trerollFieldLeft = s.rerollFieldLeft or 0,",
        "\t\t\t\trerollHandLeft  = s.rerollHandLeft  or 0,",
        "",
        "\t\t\t\tsum         = s.seasonSum or 0,",
        "\t\t\t\tmult        = s.mult or 1.0,",
        "\t\t\t\tbank        = s.bank or 0,",
        "\t\t\t\tmon         = s.mon or 0,",
        "",
        "\t\t\t\t-- 進行/年数",
        "\t\t\t\tphase       = s.phase or \"play\",",
        "\t\t\t\tyear        = s.year or 1,",
        "\t\t\t\thomeReturns = s.homeReturns or 0,",
        "",
        "\t\t\t\tlang        = s.lang,",
        "\t\t\t\tmatsuri     = matsuriLevels,",
        "",
        "\t\t\t\t-- Run 側のスナップショット（護符ボード等のUI用）",
        "\t\t\t\trun         = {",
        "\t\t\t\t\ttalisman = (s.run and s.run.talisman) or nil,",
        "\t\t\t\t\treroll   = {",
        "\t\t\t\t\t\tfield = s.rerollFieldLeft or 0,",
        "\t\t\t\t\t\thand  = s.rerollHandLeft  or 0,",
        "\t\t\t\t\t},",
        "\t\t\t\t},",
        "",
        "\t\t\t\t-- 山/手の残枚数（UIの安全表示用）",
        "\t\t\t\tdeckLeft    = deckN,",
        "\t\t\t\thandLeft    = handN,",
        "\t\t\t})",
        "\t\tend)",
        "\t\tlocal ms = (os.clock() - t0) * 1000.0",
        "\t\tif okSend then",
        "\t\t\tLOG.info(\"pushState.StatePush u=%s month=%d goal=%s phase=%s sent in %.2fms (mats#=%d)\",",
        "\t\t\t\tplr and plr.Name or \"?\", m, tostring(g), tostring(s.phase),",
        "\t\t\t\tms, (typeof(matsuriLevels)==\"table\" and #matsuriLevels or -1)",
        "\t\t\t)",
        "\t\telse",
        "\t\t\tLOG.warn(\"pushState.StatePush send failed u=%s err=%s\", plr and plr.Name or \"?\", tostring(err))",
        "\t\tend",
        "\telse",
        "\t\tLOG.warn(\"pushState: StatePush remote missing\")",
        "\tend",
        "",
        "\t--========================",
        "\t-- スコア（リスト/直近役表示）",
        "\t--========================",
        "\tif Remotes.ScorePush then",
        "\t\tlocal t0 = os.clock()",
        "\t\tlocal okSend, err = pcall(function()",
        "\t\t\tRemotes.ScorePush:FireClient(plr, total, roles, detail) -- detail={mon,pts}",
        "\t\tend)",
        "\t\tlocal ms = (os.clock() - t0) * 1000.0",
        "\t\tif okSend then",
        "\t\t\tLOG.debug(\"pushState.ScorePush u=%s in %.2fms (score=%s, pts=%s, mon=%s)\",",
        "\t\t\t\tplr and plr.Name or \"?\", ms,",
        "\t\t\t\ttostring(total),",
        "\t\t\t\t(detail and tostring(detail.pts) or \"?\"),",
        "\t\t\t\t(detail and tostring(detail.mon) or \"?\")",
        "\t\t\t)",
        "\t\telse",
        "\t\t\tLOG.warn(\"pushState.ScorePush send failed u=%s err=%s\", plr and plr.Name or \"?\", tostring(err))",
        "\t\tend"
      ],
      "truncated": true,
      "analysis": {
        "waitForChild": [
          "SharedModules",
          "Logger",
          "SharedModules",
          "Scoring",
          "SharedModules",
          "RunDeckUtil",
          "Config",
          "Balance"
        ],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 1
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/shared/TalismanDefs.lua",
      "ext": "lua",
      "binary": false,
      "size": 1880,
      "mtime": "2025-09-20T05:33:48.633588+00:00",
      "head": [
        "-- shared/TalismanDefs.lua",
        "-- v0.2 S5: 効果定義つき。必要に応じて enabled=true を段階解放",
        "local M = {}",
        "",
        "-- scope: \"run\"（ラン全体）/ \"hand\"（手番限定）/ \"role\"（役成立時のみ）…将来拡張用",
        "-- stack: 同一IDの重ね掛け可否（true=可）",
        "-- limit: 適用上限回数（nil=制限なし）",
        "-- effect:",
        "--   type=\"add_mon\", amount=+N                                  … 常時 文 加算",
        "--   type=\"add_role_mon\", role=\"gokou\", amount=+N               … 特定役成立時に 文 加算",
        "--   type=\"add_any_role_mon\", roles={...}, amount=+N            … 複数役のいずれか成立時",
        "M.registry = {",
        "\t-- 開発用サンプル（まずは dev_plus1 だけ有効化して動作確認）",
        "\tdev_plus1 = {",
        "\t\tid=\"dev_plus1\",",
        "\t\tnameJa=\"開発+1\",",
        "\t\tnameEn=\"Dev +1\",",
        "\t\tenabled=true,",
        "\t\ttags={\"dev\",\"basic\"},",
        "\t\tstack=false,",
        "\t\tlimit=nil,",
        "\t\tscope=\"run\",",
        "\t\teffect={ type=\"add_mon\", amount=1 },",
        "\t},",
        "",
        "\tdev_gokou_plus5 = {",
        "\t\tid=\"dev_gokou_plus5\",",
        "\t\tnameJa=\"五光+5\",",
        "\t\tnameEn=\"Gokou +5\",",
        "\t\tenabled=false, -- 段階解放：回帰が取れたら true に",
        "\t\ttags={\"dev\",\"role\"},",
        "\t\tstack=false,",
        "\t\tlimit=nil,",
        "\t\tscope=\"role\",",
        "\t\teffect={ type=\"add_role_mon\", role=\"gokou\", amount=5 },",
        "\t},",
        "",
        "\tdev_sake_plus3 = {",
        "\t\tid=\"dev_sake_plus3\",",
        "\t\tnameJa=\"酒+3\",",
        "\t\tnameEn=\"Sake +3\",",
        "\t\tenabled=false, -- 段階解放：回帰が取れたら true に",
        "\t\ttags={\"dev\",\"role\"},",
        "\t\tstack=true,",
        "\t\tlimit=1, -- 例：最大1回まで",
        "\t\tscope=\"role\",",
        "\t\teffect={ type=\"add_any_role_mon\", roles={\"sake\",\"inoshikacho\"}, amount=3 },",
        "\t},",
        "}",
        "",
        "function M.get(id)",
        "\tlocal d = M.registry[id]",
        "\tif not d or d.enabled == false then return nil end",
        "\treturn d",
        "end",
        "",
        "function M.allEnabled()",
        "\tlocal t = {}",
        "\tfor id, d in pairs(M.registry) do",
        "\t\tif d.enabled ~= false then",
        "\t\t\ttable.insert(t, d)",
        "\t\tend",
        "\tend",
        "\treturn t",
        "end",
        "",
        "return M"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    },
    {
      "path": "src/shared/TalismanState.lua",
      "ext": "lua",
      "binary": false,
      "size": 1313,
      "mtime": "2025-09-18T04:51:05.881986+00:00",
      "head": [
        "-- shared/TalismanState.lua",
        "-- v0.1 Step0: ラン側ボードの初期化と装備ID抽出",
        "local M = {}",
        "",
        "local function clamp(n, lo, hi)",
        "\tif math.clamp then return math.clamp(n, lo, hi) end",
        "\tif n < lo then return lo elseif n > hi then return hi else return n end",
        "end",
        "",
        "function M.ensureRunBoard(state: any)",
        "\tstate.run = state.run or {}",
        "\tlocal accUnlocked = 2",
        "\tif state.account and state.account.talismanUnlock and tonumber(state.account.talismanUnlock.unlocked) then",
        "\t\taccUnlocked = clamp(tonumber(state.account.talismanUnlock.unlocked), 0, 6)",
        "\tend",
        "",
        "\tlocal t = state.run.talisman",
        "\tif type(t) ~= \"table\" then",
        "\t\tt = {",
        "\t\t\tmaxSlots = 6,",
        "\t\t\tunlocked = accUnlocked,",
        "\t\t\tslots = {nil,nil,nil,nil,nil,nil},",
        "\t\t\tbag = {},",
        "\t\t}",
        "\t\tstate.run.talisman = t",
        "\telse",
        "\t\tt.maxSlots = 6",
        "\t\tt.unlocked = clamp(tonumber(t.unlocked or accUnlocked), 0, 6)",
        "\t\tlocal s = t.slots or {}",
        "\t\t-- 長さを6に正規化",
        "\t\tt.slots = { s[1], s[2], s[3], s[4], s[5], s[6] }",
        "\tend",
        "\treturn state.run.talisman",
        "end",
        "",
        "function M.getEquippedIds(state: any): {string}",
        "\tlocal t = state and state.run and state.run.talisman",
        "\tif not t or not t.slots then return {} end",
        "\tlocal out = {}",
        "\tfor i=1, math.min(6, #t.slots) do",
        "\t\tlocal id = t.slots[i]",
        "\t\tif id ~= nil then table.insert(out, id) end",
        "\tend",
        "\treturn out",
        "end",
        "",
        "return M"
      ],
      "truncated": false,
      "analysis": {
        "waitForChild": [],
        "routerScreens": [],
        "fireServerArgs": [],
        "udim": {
          "fromScale": 0,
          "fromOffset": 0,
          "new": 0
        },
        "locale": {
          "jp_literals": 0,
          "ja_literals": 0
        },
        "kitoMention": false,
        "onClientEventCount": 0
      }
    }
  ],
  "analysis": {
    "summary": {
      "relativeLayoutRisk": [
        "src/client/ui/components/renderers/TakenRenderer.lua",
        "src/client/ui/components/YakuPanel.lua"
      ],
      "routerScreens": {
        "kitoPick": [
          "src/client/ui/screens/KitoPickView.lua"
        ]
      },
      "remotes": {
        "fireServerArgs": {
          "home": [
            "src/client/ui/screens/RunScreen.lua",
            "src/client/ui/screens/RunScreen.lua",
            "src/client/ui/screens/RunScreen.lua"
          ],
          "next": [
            "src/client/ui/screens/RunScreen.lua"
          ],
          "abandon": [
            "src/client/ui/screens/RunScreen.lua",
            "src/client/ui/screens/RunScreen.lua"
          ]
        },
        "waitForChild": {
          "TalismanService": [
            "_unused/src/client/_unused_dev_patch_diary_2025-09-14.md",
            "src/shared/ShopService.lua"
          ],
          "Config": [
            "src/client/ui/CameraController.client.lua",
            "src/client/ui/ClientMain.client.lua",
            "src/client/ui/components/controllers/KitoPickWires.client.lua",
            "src/client/ui/components/controllers/ShopWires.lua",
            "src/client/ui/components/DevTools.lua",
            "src/client/ui/components/Overlay.lua",
            "src/client/ui/components/renderers/FieldRenderer.lua",
            "src/client/ui/components/renderers/HandRenderer.lua",
            "src/client/ui/components/renderers/ShopRenderer.lua",
            "src/client/ui/components/renderers/TakenRenderer.lua",
            "src/client/ui/components/ResultModal.lua",
            "src/client/ui/highlight/MatchHighlighter.lua",
            "src/client/ui/lib/FormatUtil.lua",
            "src/client/ui/ScreenRouter.lua",
            "src/client/ui/screens/HomeScreen.lua",
            "src/client/ui/screens/PatchNotesModal.lua",
            "src/client/ui/screens/RunScreen.lua",
            "src/client/ui/screens/RunScreenUI.lua",
            "src/client/ui/screens/ShopView.lua",
            "src/client/ui/styles/ShopStyles.lua",
            "src/server/GameInit.server.lua",
            "src/server/KitoPickCore.lua",
            "src/server/KitoPickServer.server.lua",
            "src/server/ShopEffects/Kito.lua",
            "src/shared/Deck/Effects/kito/Mi_Venom.lua",
            "src/shared/DeckSampler.lua",
            "src/shared/LocaleUtil.lua",
            "src/shared/RoundService.lua",
            "src/shared/ScoreService.lua",
            "src/shared/ShopFormat.lua",
            "src/shared/ShopService.lua",
            "src/shared/StateHub.lua"
          ],
          "DisplayMode": [
            "src/client/ui/CameraController.client.lua"
          ],
          "Remotes": [
            "src/client/ui/ClientMain.client.lua",
            "src/client/ui/components/controllers/KitoPickWires.client.lua",
            "src/client/ui/components/controllers/ShopWires.lua",
            "src/client/ui/screens/KitoPickView.lua",
            "src/server/KitoPickCore.lua",
            "src/server/KitoPickServer.server.lua",
            "src/shared/ShopService.lua"
          ],
          "SharedModules": [
            "src/client/ui/ClientMain.client.lua",
            "src/client/ui/ClientMain.client.lua",
            "src/client/ui/ClientMain.client.lua",
            "src/client/ui/components/CardNode.lua",
            "src/client/ui/components/controllers/KitoPickWires.client.lua",
            "src/client/ui/components/controllers/ShopWires.lua",
            "src/client/ui/components/renderers/FieldRenderer.lua",
            "src/client/ui/components/renderers/HandRenderer.lua",
            "src/client/ui/components/renderers/KitoPickRenderer.lua",
            "src/client/ui/components/renderers/ShopRenderer.lua",
            "src/client/ui/components/renderers/TakenRenderer.lua",
            "src/client/ui/components/YakuPanel.lua",
            "src/client/ui/components/YakuPanel.lua",
            "src/client/ui/components/YakuPanel.lua",
            "src/client/ui/lib/KitoAssets.lua",
            "src/client/ui/ScreenRouter.lua",
            "src/client/ui/screens/KitoPickView.lua",
            "src/client/ui/screens/KitoPickView.lua",
            "src/client/ui/screens/PatchNotesModal.lua",
            "src/client/ui/screens/RunScreen.lua",
            "src/client/ui/screens/RunScreenUI.lua",
            "src/client/ui/screens/ShopView.lua",
            "src/server/GameInit.server.lua",
            "src/server/GameInit.server.lua",
            "src/server/GameInit.server.lua",
            "src/server/KitoPickCore.lua",
            "src/server/KitoPickCore.lua",
            "src/server/KitoPickServer.server.lua",
            "src/server/KitoPickServer.server.lua",
            "src/server/NavServer.lua",
            "src/server/SaveService.lua",
            "src/server/ShopEffects/Kito.lua",
            "src/server/ShopEffects/Sai.lua",
            "src/server/ShopEffects/Spectral.lua",
            "src/server/TalismanService.lua",
            "src/server/TalismanService.lua",
            "src/server/UiResync.server.lua",
            "src/shared/CardEngine.lua",
            "src/shared/Deck/DeckOps.lua",
            "src/shared/Deck/DeckRegistry.lua",
            "src/shared/Deck/DeckStore.lua",
            "src/shared/Deck/DeckViewAdapter.lua",
            "src/shared/Deck/Effects/kito/Hitsuji_Prune.lua",
            "src/shared/Deck/Effects/kito/I_Sakeify.lua",
            "src/shared/Deck/Effects/kito/Inu_Chaff2.lua",
            "src/shared/Deck/Effects/kito/Mi_Venom.lua",
            "src/shared/Deck/Effects/kito/Tatsu_Copy.lua",
            "src/shared/Deck/Effects/kito/Tori_Brighten.lua",
            "src/shared/Deck/Effects/kito/Uma_Seedize.lua",
            "src/shared/Deck/Effects/kito/Usagi_Ribbonize.lua",
            "src/shared/Deck/EffectsRegisterAll.lua",
            "src/shared/Deck/EffectsRegisterAll.lua",
            "src/shared/Deck/EffectsRegistry.lua",
            "src/shared/DeckSampler.lua",
            "src/shared/DeckSampler.lua",
            "src/shared/RunDeckUtil.lua",
            "src/shared/score/hooks/talisman.lua",
            "src/shared/score/index.lua",
            "src/shared/score/phases/P3_matsuri_kito.lua",
            "src/shared/score/phases/P4_talisman.lua",
            "src/shared/score/phases/P4_talisman.lua",
            "src/shared/score/phases/P5_omamori.lua",
            "src/shared/ScoreService.lua",
            "src/shared/Scoring.lua",
            "src/shared/ShopService.lua",
            "src/shared/ShopService.lua",
            "src/shared/StateHub.lua",
            "src/shared/StateHub.lua",
            "src/shared/StateHub.lua"
          ],
          "Logger": [
            "src/client/ui/ClientMain.client.lua",
            "src/client/ui/components/controllers/KitoPickWires.client.lua",
            "src/client/ui/components/controllers/ShopWires.lua",
            "src/client/ui/components/renderers/KitoPickRenderer.lua",
            "src/client/ui/components/renderers/ShopRenderer.lua",
            "src/client/ui/lib/KitoAssets.lua",
            "src/client/ui/ScreenRouter.lua",
            "src/client/ui/screens/KitoPickView.lua",
            "src/client/ui/screens/RunScreen.lua",
            "src/client/ui/screens/RunScreenUI.lua",
            "src/client/ui/screens/ShopView.lua",
            "src/server/GameInit.server.lua",
            "src/server/KitoPickCore.lua",
            "src/server/KitoPickServer.server.lua",
            "src/server/NavServer.lua",
            "src/server/TalismanService.lua",
            "src/server/UiResync.server.lua",
            "src/shared/Deck/DeckRegistry.lua",
            "src/shared/Deck/Effects/kito/Hitsuji_Prune.lua",
            "src/shared/Deck/Effects/kito/I_Sakeify.lua",
            "src/shared/Deck/Effects/kito/Inu_Chaff2.lua",
            "src/shared/Deck/Effects/kito/Mi_Venom.lua",
            "src/shared/Deck/Effects/kito/Tatsu_Copy.lua",
            "src/shared/Deck/Effects/kito/Tori_Brighten.lua",
            "src/shared/Deck/Effects/kito/Uma_Seedize.lua",
            "src/shared/Deck/Effects/kito/Usagi_Ribbonize.lua",
            "src/shared/Deck/EffectsRegisterAll.lua",
            "src/shared/Deck/EffectsRegistry.lua",
            "src/shared/DeckSampler.lua",
            "src/shared/score/index.lua",
            "src/shared/score/phases/P4_talisman.lua",
            "src/shared/ShopService.lua",
            "src/shared/StateHub.lua"
          ],
          "Locale": [
            "src/client/ui/ClientMain.client.lua",
            "src/client/ui/components/controllers/ShopWires.lua",
            "src/client/ui/components/renderers/ShopRenderer.lua",
            "src/client/ui/components/TalismanBoard.lua",
            "src/client/ui/lib/FormatUtil.lua",
            "src/client/ui/ScreenRouter.lua",
            "src/client/ui/screens/HomeScreen.lua",
            "src/client/ui/screens/PatchNotesModal.lua",
            "src/client/ui/screens/RunScreen.lua",
            "src/client/ui/screens/RunScreenUI.lua",
            "src/client/ui/screens/ShopView.lua",
            "src/shared/LocaleUtil.lua",
            "src/shared/ShopFormat.lua"
          ],
          "LocaleUtil": [
            "src/client/ui/ClientMain.client.lua",
            "src/client/ui/components/CardNode.lua",
            "src/client/ui/components/controllers/ShopWires.lua",
            "src/client/ui/components/renderers/TakenRenderer.lua",
            "src/client/ui/screens/PatchNotesModal.lua"
          ],
          "NavClient": [
            "src/client/ui/ClientMain.client.lua"
          ],
          "HomeOpen": [
            "src/client/ui/ClientMain.client.lua"
          ],
          "ShopOpen": [
            "src/client/ui/ClientMain.client.lua",
            "src/client/ui/components/controllers/ShopWires.lua",
            "src/shared/ShopService.lua"
          ],
          "StatePush": [
            "src/client/ui/ClientMain.client.lua"
          ],
          "HandPush": [
            "src/client/ui/ClientMain.client.lua"
          ],
          "FieldPush": [
            "src/client/ui/ClientMain.client.lua"
          ],
          "TakenPush": [
            "src/client/ui/ClientMain.client.lua"
          ],
          "ScorePush": [
            "src/client/ui/ClientMain.client.lua"
          ],
          "RoundReady": [
            "src/client/ui/ClientMain.client.lua"
          ],
          "StageResult": [
            "src/client/ui/ClientMain.client.lua"
          ],
          "ReqStartNewRun": [
            "src/client/ui/ClientMain.client.lua"
          ],
          "ReqContinueRun": [
            "src/client/ui/ClientMain.client.lua"
          ],
          "Confirm": [
            "src/client/ui/ClientMain.client.lua"
          ],
          "ReqRerollAll": [
            "src/client/ui/ClientMain.client.lua"
          ],
          "ReqRerollHand": [
            "src/client/ui/ClientMain.client.lua"
          ],
          "ShopDone": [
            "src/client/ui/ClientMain.client.lua"
          ],
          "BuyItem": [
            "src/client/ui/ClientMain.client.lua",
            "src/shared/ShopService.lua"
          ],
          "ShopReroll": [
            "src/client/ui/ClientMain.client.lua",
            "src/shared/ShopService.lua"
          ],
          "ReqPick": [
            "src/client/ui/ClientMain.client.lua"
          ],
          "ReqSyncUI": [
            "src/client/ui/ClientMain.client.lua"
          ],
          "DecideNext": [
            "src/client/ui/ClientMain.client.lua"
          ],
          "ReqSetLang": [
            "src/client/ui/ClientMain.client.lua"
          ],
          "ScreenRouter": [
            "src/client/ui/ClientMain.client.lua",
            "src/client/ui/screens/KitoPickView.lua"
          ],
          "screens": [
            "src/client/ui/ClientMain.client.lua"
          ],
          "HomeScreen": [
            "src/client/ui/ClientMain.client.lua"
          ],
          "RunScreen": [
            "src/client/ui/ClientMain.client.lua"
          ],
          "ShopView": [
            "src/client/ui/ClientMain.client.lua"
          ],
          "ShrineScreen": [
            "src/client/ui/ClientMain.client.lua"
          ],
          "KitoPickView": [
            "src/client/ui/ClientMain.client.lua"
          ],
          "PlayerGui": [
            "src/client/ui/ClientMain.client.lua",
            "src/client/ui/components/YakuPanel.lua",
            "src/client/ui/DevLogViewer.client.lua",
            "src/client/ui/screens/KitoPickView.lua",
            "src/client/ui/screens/KitoPickView.lua",
            "src/client/ui/screens/ShopView.lua"
          ],
          "components": [
            "src/client/ui/ClientMain.client.lua",
            "src/client/ui/screens/KitoPickView.lua",
            "src/client/ui/screens/RunScreen.lua",
            "src/client/ui/screens/ShopView.lua"
          ],
          "controllers": [
            "src/client/ui/ClientMain.client.lua",
            "src/client/ui/ClientMain.client.lua",
            "src/client/ui/screens/ShopView.lua",
            "src/client/ui/screens/ShopView.lua"
          ],
          "ShopWires": [
            "src/client/ui/ClientMain.client.lua",
            "src/client/ui/screens/ShopView.lua"
          ],
          "ClientSignals": [
            "src/client/ui/ClientMain.client.lua",
            "src/client/ui/components/controllers/ShopWires.lua",
            "src/client/ui/screens/KitoPickView.lua",
            "src/client/ui/screens/ShopView.lua"
          ],
          "Deck": [
            "src/client/ui/components/CardNode.lua",
            "src/client/ui/components/renderers/FieldRenderer.lua",
            "src/client/ui/components/renderers/HandRenderer.lua",
            "src/server/GameInit.server.lua",
            "src/server/GameInit.server.lua",
            "src/server/KitoPickCore.lua",
            "src/server/KitoPickCore.lua",
            "src/server/KitoPickServer.server.lua",
            "src/server/ShopEffects/Kito.lua",
            "src/shared/CardEngine.lua",
            "src/shared/Deck/DeckOps.lua",
            "src/shared/Deck/DeckStore.lua",
            "src/shared/Deck/DeckStore.lua",
            "src/shared/Deck/EffectsRegistry.lua",
            "src/shared/Deck/EffectsRegistry.lua"
          ],
          "DeckViewAdapter": [
            "src/client/ui/components/CardNode.lua",
            "src/client/ui/components/renderers/FieldRenderer.lua",
            "src/client/ui/components/renderers/HandRenderer.lua"
          ],
          "Balance": [
            "src/client/ui/components/controllers/KitoPickWires.client.lua",
            "src/server/GameInit.server.lua",
            "src/server/KitoPickCore.lua",
            "src/server/KitoPickServer.server.lua",
            "src/server/ShopEffects/Kito.lua",
            "src/shared/Deck/Effects/kito/Mi_Venom.lua",
            "src/shared/DeckSampler.lua",
            "src/shared/RoundService.lua",
            "src/shared/ScoreService.lua",
            "src/shared/ShopService.lua",
            "src/shared/StateHub.lua"
          ],
          "KitoPickStart": [
            "src/client/ui/components/controllers/KitoPickWires.client.lua",
            "src/server/KitoPickCore.lua"
          ],
          "KitoPickDecide": [
            "src/client/ui/components/controllers/KitoPickWires.client.lua",
            "src/client/ui/screens/KitoPickView.lua",
            "src/server/KitoPickServer.server.lua"
          ],
          "KitoPickResult": [
            "src/client/ui/components/controllers/KitoPickWires.client.lua",
            "src/client/ui/screens/KitoPickView.lua"
          ],
          "Theme": [
            "src/client/ui/components/DevTools.lua",
            "src/client/ui/components/Overlay.lua",
            "src/client/ui/components/renderers/FieldRenderer.lua",
            "src/client/ui/components/renderers/HandRenderer.lua",
            "src/client/ui/components/renderers/ShopRenderer.lua",
            "src/client/ui/components/renderers/TakenRenderer.lua",
            "src/client/ui/components/ResultModal.lua",
            "src/client/ui/components/TalismanBoard.lua",
            "src/client/ui/highlight/MatchHighlighter.lua",
            "src/client/ui/screens/RunScreen.lua",
            "src/client/ui/screens/RunScreenUI.lua",
            "src/client/ui/screens/ShopView.lua",
            "src/client/ui/styles/ShopStyles.lua"
          ],
          "lib": [
            "src/client/ui/components/renderers/FieldRenderer.lua",
            "src/client/ui/screens/RunScreen.lua",
            "src/client/ui/screens/RunScreenUI.lua"
          ],
          "UiUtil": [
            "src/client/ui/components/renderers/FieldRenderer.lua",
            "src/client/ui/screens/RunScreenUI.lua"
          ],
          "CardNode": [
            "src/client/ui/components/renderers/FieldRenderer.lua",
            "src/client/ui/components/renderers/HandRenderer.lua",
            "src/client/ui/components/renderers/TakenRenderer.lua"
          ],
          "styles": [
            "src/client/ui/components/renderers/KitoPickRenderer.lua",
            "src/client/ui/screens/KitoPickView.lua",
            "src/client/ui/screens/ShopView.lua"
          ],
          "KitoPickStyles": [
            "src/client/ui/components/renderers/KitoPickRenderer.lua",
            "src/client/ui/screens/KitoPickView.lua"
          ],
          "ShopFormat": [
            "src/client/ui/components/renderers/ShopRenderer.lua",
            "src/client/ui/screens/ShopView.lua"
          ],
          "ShopDefs": [
            "src/client/ui/components/renderers/ShopRenderer.lua",
            "src/client/ui/screens/KitoPickView.lua",
            "src/shared/ShopService.lua"
          ],
          "Scoring": [
            "src/client/ui/components/YakuPanel.lua",
            "src/shared/StateHub.lua"
          ],
          "RunDeckUtil": [
            "src/client/ui/components/YakuPanel.lua",
            "src/server/ShopEffects/Sai.lua",
            "src/server/ShopEffects/Spectral.lua",
            "src/server/TalismanService.lua",
            "src/shared/Deck/DeckRegistry.lua",
            "src/shared/DeckSampler.lua",
            "src/shared/score/phases/P3_matsuri_kito.lua",
            "src/shared/ShopService.lua",
            "src/shared/StateHub.lua"
          ],
          "CardImageMap": [
            "src/client/ui/components/YakuPanel.lua",
            "src/server/KitoPickCore.lua",
            "src/shared/Deck/DeckViewAdapter.lua"
          ],
          "PatchNotesModal": [
            "src/client/ui/screens/HomeScreen.lua"
          ],
          "KitoPickIncoming": [
            "src/client/ui/screens/KitoPickView.lua"
          ],
          "viewmodels": [
            "src/client/ui/screens/KitoPickView.lua"
          ],
          "KitoPickVM": [
            "src/client/ui/screens/KitoPickView.lua"
          ],
          "renderers": [
            "src/client/ui/screens/KitoPickView.lua",
            "src/client/ui/screens/RunScreen.lua",
            "src/client/ui/screens/ShopView.lua"
          ],
          "KitoPickRenderer": [
            "src/client/ui/screens/KitoPickView.lua"
          ],
          "HandRenderer": [
            "src/client/ui/screens/RunScreen.lua"
          ],
          "FieldRenderer": [
            "src/client/ui/screens/RunScreen.lua"
          ],
          "TakenRenderer": [
            "src/client/ui/screens/RunScreen.lua"
          ],
          "ResultModal": [
            "src/client/ui/screens/RunScreen.lua"
          ],
          "Overlay": [
            "src/client/ui/screens/RunScreen.lua"
          ],
          "DevTools": [
            "src/client/ui/screens/RunScreen.lua"
          ],
          "YakuPanel": [
            "src/client/ui/screens/RunScreen.lua"
          ],
          "TalismanBoard": [
            "src/client/ui/screens/RunScreen.lua",
            "src/client/ui/screens/ShopView.lua"
          ],
          "FormatUtil": [
            "src/client/ui/screens/RunScreen.lua"
          ],
          "RunScreenUI": [
            "src/client/ui/screens/RunScreen.lua"
          ],
          "RunScreenRemotes": [
            "src/client/ui/screens/RunScreen.lua"
          ],
          "highlight": [
            "src/client/ui/screens/RunScreen.lua"
          ],
          "MatchHighlighter": [
            "src/client/ui/screens/RunScreen.lua"
          ],
          "ShopStyles": [
            "src/client/ui/screens/ShopView.lua"
          ],
          "ShopRenderer": [
            "src/client/ui/screens/ShopView.lua"
          ],
          "SaveService": [
            "src/server/GameInit.server.lua",
            "src/shared/RoundService.lua",
            "src/shared/ScoreService.lua",
            "src/shared/ShopService.lua"
          ],
          "NavServer": [
            "src/server/GameInit.server.lua"
          ],
          "KitoPickServer": [
            "src/server/GameInit.server.lua"
          ],
          "DeckRegistry": [
            "src/server/GameInit.server.lua",
            "src/server/KitoPickCore.lua",
            "src/server/KitoPickServer.server.lua",
            "src/shared/Deck/DeckStore.lua"
          ],
          "EffectsRegisterAll": [
            "src/server/GameInit.server.lua"
          ],
          "CardEngine": [
            "src/server/KitoPickCore.lua",
            "src/server/KitoPickServer.server.lua",
            "src/shared/CardEngine.lua",
            "src/shared/Deck/DeckOps.lua",
            "src/shared/Deck/DeckRegistry.lua",
            "src/shared/Deck/DeckStore.lua",
            "src/shared/Deck/DeckViewAdapter.lua",
            "src/shared/Deck/EffectsRegisterAll.lua",
            "src/shared/Deck/EffectsRegistry.lua",
            "src/shared/RunDeckUtil.lua"
          ],
          "DeckSampler": [
            "src/server/KitoPickCore.lua"
          ],
          "EffectsRegistry": [
            "src/server/KitoPickCore.lua",
            "src/server/ShopEffects/Kito.lua",
            "src/shared/Deck/EffectsRegisterAll.lua"
          ],
          "KitoPickCore": [
            "src/server/KitoPickServer.server.lua",
            "src/server/ShopEffects/Kito.lua",
            "src/shared/ShopService.lua"
          ],
          "StateHub": [
            "src/server/KitoPickServer.server.lua",
            "src/server/TalismanService.lua"
          ],
          "TalismanState": [
            "src/server/SaveService.lua",
            "src/server/SaveService.lua",
            "src/shared/score/hooks/talisman.lua"
          ],
          "DeckSchema": [
            "src/server/SaveService.lua",
            "src/shared/Deck/DeckOps.lua",
            "src/shared/Deck/DeckStore.lua"
          ],
          "DeckStore": [
            "src/shared/Deck/EffectsRegistry.lua"
          ],
          "DeckOps": [
            "src/shared/Deck/EffectsRegistry.lua"
          ],
          "role": [
            "src/shared/score/hooks/init.lua"
          ],
          "multiplier": [
            "src/shared/score/hooks/init.lua"
          ],
          "bonus": [
            "src/shared/score/hooks/init.lua"
          ],
          "talisman": [
            "src/shared/score/hooks/init.lua",
            "src/shared/score/phases/P4_talisman.lua"
          ],
          "score": [
            "src/shared/score/phases/P4_talisman.lua",
            "src/shared/score/phases/P5_omamori.lua",
            "src/shared/Scoring.lua"
          ],
          "hooks": [
            "src/shared/score/phases/P4_talisman.lua",
            "src/shared/score/phases/P5_omamori.lua"
          ],
          "omamori": [
            "src/shared/score/phases/P5_omamori.lua"
          ],
          "index": [
            "src/shared/Scoring.lua"
          ]
        }
      },
      "localeJpUsage": [
        "PROJECT_SNAPSHOT.json",
        "snapshot_json_plus.py",
        "src/client/ui/ClientMain.client.lua",
        "src/client/ui/components/controllers/ShopWires.lua",
        "src/client/ui/lib/FormatUtil.lua",
        "src/client/ui/screens/HomeScreen.lua",
        "src/client/ui/screens/PatchNotesModal.lua",
        "src/client/ui/screens/RunScreen.lua",
        "src/client/ui/screens/RunScreenUI.lua",
        "src/client/ui/screens/ShopView.lua",
        "src/config/Locale.lua",
        "src/config/PatchNotes.lua",
        "src/server/GameInit.server.lua",
        "src/server/NavServer.lua",
        "src/server/SaveService.lua",
        "src/shared/LocaleUtil.lua"
      ],
      "kitoFiles": [
        "PROJECT_SNAPSHOT.json",
        "src/client/ui/ClientMain.client.lua",
        "src/client/ui/components/controllers/KitoPickWires.client.lua",
        "src/client/ui/components/renderers/ShopRenderer.lua",
        "src/client/ui/lib/KitoAssets.lua",
        "src/client/ui/screens/KitoPickView.lua",
        "src/client/ui/viewmodels/KitoPickVM.lua",
        "src/config/FeatureFlags.lua",
        "src/shared/ShopDefs.lua",
        "src/shared/ShopService.lua"
      ]
    }
  }
}